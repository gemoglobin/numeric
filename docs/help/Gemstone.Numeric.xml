<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Gemstone.Numeric</name>
  </assembly>
  <members>
    <member name="T:Gemstone.Numeric.ComplexNumber">
      <summary>
            Represents a complex number.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.ComplexNumber.#ctor(Gemstone.Numeric.ComplexNumber)">
      <summary>
            Creates a <see cref="T:Gemstone.Numeric.ComplexNumber" /> from the given <see cref="T:Gemstone.Numeric.ComplexNumber" />.
            </summary>
      <param name="z">
        <see cref="T:Gemstone.Numeric.ComplexNumber" /> to be copied.</param>
    </member>
    <member name="M:Gemstone.Numeric.ComplexNumber.#ctor(Gemstone.Units.Angle,System.Double)">
      <summary>
            Creates a <see cref="T:Gemstone.Numeric.ComplexNumber" /> from the given polar values.
            </summary>
      <param name="angle">The <see cref="P:Gemstone.Numeric.ComplexNumber.Angle" /> component, in radians, of the <see cref="T:Gemstone.Numeric.ComplexNumber" />.</param>
      <param name="magnitude">The magnitude (or absolute value) component of the <see cref="T:Gemstone.Numeric.ComplexNumber" />.</param>
    </member>
    <member name="M:Gemstone.Numeric.ComplexNumber.#ctor(System.Double,System.Double)">
      <summary>
            Creates a <see cref="T:Gemstone.Numeric.ComplexNumber" /> from the given rectangular values. 
            </summary>
      <param name="real">The real component of the <see cref="T:Gemstone.Numeric.ComplexNumber" />.</param>
      <param name="imaginary">The imaginary component of the <see cref="T:Gemstone.Numeric.ComplexNumber" />.</param>
    </member>
    <member name="P:Gemstone.Numeric.ComplexNumber.AllAssigned">
      <summary>
            Gets a boolean value indicating if each composite value of the <see cref="T:Gemstone.Numeric.ComplexNumber" /> (i.e., real and imaginary) has been assigned a value.
            </summary>
      <returns>True, if all composite values have been assigned a value; otherwise, false.</returns>
    </member>
    <member name="P:Gemstone.Numeric.ComplexNumber.Angle">
      <summary>
            Gets or sets the <see cref="P:Gemstone.Numeric.ComplexNumber.Angle" /> (a.k.a. the argument) in radians of this <see cref="T:Gemstone.Numeric.ComplexNumber" />.
            </summary>
    </member>
    <member name="P:Gemstone.Numeric.ComplexNumber.Conjugate">
      <summary>
            Gets the complex conjugate of this <see cref="T:Gemstone.Numeric.ComplexNumber" />.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.ComplexNumber.Equals(Gemstone.Numeric.ComplexNumber)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified ComplexNumber value.
            </summary>
      <param name="obj">A <see cref="T:Gemstone.Numeric.ComplexNumber" /> to compare to this instance.</param>
      <returns>
            True if <paramref name="obj" /> has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Numeric.ComplexNumber.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if <paramref name="obj" /> is an instance of ComplexNumber and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Numeric.ComplexNumber.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="P:Gemstone.Numeric.ComplexNumber.Imaginary">
      <summary>
            Gets or sets the imaginary component of this <see cref="T:Gemstone.Numeric.ComplexNumber" />.
            </summary>
    </member>
    <member name="P:Gemstone.Numeric.ComplexNumber.Magnitude">
      <summary>
            Gets or sets the magnitude (a.k.a. the modulus or absolute value) of this <see cref="T:Gemstone.Numeric.ComplexNumber" />.
            </summary>
    </member>
    <member name="P:Gemstone.Numeric.ComplexNumber.NoneAssigned">
      <summary>
            Gets a boolean value indicating if each composite value of the <see cref="T:Gemstone.Numeric.ComplexNumber" /> (i.e., real and imaginary) has not been assigned a value.
            </summary>
      <returns>True, if none of the composite values have been assigned a value; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.Numeric.ComplexNumber.op_Addition(Gemstone.Numeric.ComplexNumber,Gemstone.Numeric.ComplexNumber)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>ComplexNumber representing the result of the addition operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.ComplexNumber.op_Division(Gemstone.Numeric.ComplexNumber,Gemstone.Numeric.ComplexNumber)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>ComplexNumber representing the result of the division operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.ComplexNumber.op_Equality(Gemstone.Numeric.ComplexNumber,Gemstone.Numeric.ComplexNumber)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean representing the result of the addition operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.ComplexNumber.op_Exponent(Gemstone.Numeric.ComplexNumber,System.Double)">
      <summary>
             Returns result of first value raised to power of second value.
             </summary>
      <param name="z">Complex number to be raised to power <paramref name="y" />.</param>
      <param name="y">Power to raise <see cref="T:Gemstone.Numeric.ComplexNumber" /><paramref name="z" />.</param>
      <returns>ComplexNumber representing the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.ComplexNumber.op_Implicit(Gemstone.Numeric.ComplexNumber)~System.Numerics.Complex">
      <summary>
            Implicitly converts a <see cref="T:Gemstone.Numeric.ComplexNumber" /> to a .NET <see cref="T:System.Numerics.Complex" /> value.
            </summary>
      <param name="value">Operand.</param>
      <returns>Complex representing the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.ComplexNumber.op_Implicit(System.Double)~Gemstone.Numeric.ComplexNumber">
      <summary>
            Implicitly converts a <see cref="T:System.Double" /> to a <see cref="T:Gemstone.Numeric.ComplexNumber" />.
            </summary>
      <param name="value">Operand.</param>
      <returns>ComplexNumber representing the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.ComplexNumber.op_Implicit(System.Numerics.Complex)~Gemstone.Numeric.ComplexNumber">
      <summary>
            Implicitly converts a .NET <see cref="T:System.Numerics.Complex" /> value to a <see cref="T:Gemstone.Numeric.ComplexNumber" />.
            </summary>
      <param name="value">Operand.</param>
      <returns>Complex representing the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.ComplexNumber.op_Inequality(Gemstone.Numeric.ComplexNumber,Gemstone.Numeric.ComplexNumber)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean representing the result of the inequality operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.ComplexNumber.op_Multiply(Gemstone.Numeric.ComplexNumber,Gemstone.Numeric.ComplexNumber)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>ComplexNumber representing the result of the multiplication operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.ComplexNumber.op_Subtraction(Gemstone.Numeric.ComplexNumber,Gemstone.Numeric.ComplexNumber)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>ComplexNumber representing the result of the subtraction operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.ComplexNumber.op_UnaryNegation(Gemstone.Numeric.ComplexNumber)">
      <summary>
            Returns the negated value.
            </summary>
      <param name="z">Left hand operand.</param>
      <returns>ComplexNumber representing the result of the unary negation operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.ComplexNumber.Parse(System.String)">
      <summary>
            Converts the string representation of a complex number to its complex number equivalent.
            </summary>
      <param name="str">A string that contains a number to convert.</param>
      <returns>A complex number that is equivalent to the numeric value or symbols specified in <paramref name="str" />.</returns>
    </member>
    <member name="M:Gemstone.Numeric.ComplexNumber.Pow(Gemstone.Numeric.ComplexNumber,System.Double)">
      <summary>
             Returns specified <see cref="T:Gemstone.Numeric.ComplexNumber" /> raised to the specified power.
            </summary>
      <param name="z">Complex number to be raised to power <paramref name="y" />.</param>
      <param name="y">Power to raise <see cref="T:Gemstone.Numeric.ComplexNumber" /><paramref name="z" />.</param>
      <returns>ComplexNumber representing the result of the operation.</returns>
    </member>
    <member name="P:Gemstone.Numeric.ComplexNumber.Real">
      <summary>
            Gets or sets the real component of this <see cref="T:Gemstone.Numeric.ComplexNumber" />.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.ComplexNumber.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this <see cref="T:Gemstone.Numeric.ComplexNumber" /> instance.
            </returns>
    </member>
    <member name="T:Gemstone.Numeric.Int24">
      <summary>Represents a 3-byte, 24-bit signed integer.</summary>
    </member>
    <member name="M:Gemstone.Numeric.Int24.#ctor(Gemstone.Numeric.Int24)">
      <summary>Creates 24-bit signed integer from an existing 24-bit signed integer.</summary>
      <param name="value">24-but signed integer to create new Int24 from.</param>
    </member>
    <member name="M:Gemstone.Numeric.Int24.#ctor(System.Byte[],System.Int32)">
      <summary>Creates 24-bit signed integer from three bytes at a specified position in a byte array.</summary>
      <param name="value">An array of bytes.</param>
      <param name="startIndex">The starting position within <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> cannot be null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is greater than <paramref name="value" /> length.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> length from <paramref name="startIndex" /> is too small to represent a <see cref="T:Gemstone.Numeric.UInt24" />.</exception>
    </member>
    <member name="M:Gemstone.Numeric.Int24.#ctor(System.Int32)">
      <summary>Creates 24-bit signed integer from a 32-bit signed integer.</summary>
      <param name="value">32-bit signed integer to use as new 24-bit signed integer value.</param>
      <exception cref="T:System.OverflowException">Source values outside 24-bit min/max range will cause an overflow exception.</exception>
    </member>
    <member name="F:Gemstone.Numeric.Int24.BitMask">
      <summary>High byte bit-mask used when a 24-bit integer is stored within a 32-bit integer. This field is constant.</summary>
    </member>
    <member name="M:Gemstone.Numeric.Int24.CompareTo(Gemstone.Numeric.Int24)">
      <summary>
            Compares this instance to a specified 24-bit signed integer and returns an indication of their
            relative values.
            </summary>
      <param name="value">An integer to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.CompareTo(System.Int32)">
      <summary>
            Compares this instance to a specified 32-bit signed integer and returns an indication of their
            relative values.
            </summary>
      <param name="value">An integer to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not an Int32 or Int24.</exception>
    </member>
    <member name="M:Gemstone.Numeric.Int24.Equals(Gemstone.Numeric.Int24)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified Int24 value.
            </summary>
      <param name="obj">An Int24 value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.Equals(System.Int32)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified Int32 value.
            </summary>
      <param name="obj">An Int32 value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of Int32 or Int24 and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.GetBytes">
      <summary>Returns the Int24 value as an array of three bytes.</summary>
      <returns>An array of bytes with length 3.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.GetBytes(Gemstone.Numeric.Int24)">
      <summary>Returns the specified Int24 value as an array of three bytes.</summary>
      <param name="value">Int24 value to convert to bytes.</param>
      <returns>An array of bytes with length 3.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.GetTypeCode">
      <summary>
            Returns the System.TypeCode for value type System.Int32 (there is no defined type code for an Int24).
            </summary>
      <returns>The enumerated constant, System.TypeCode.Int32.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.GetValue(System.Byte[],System.Int32)">
      <summary>Returns a 24-bit signed integer from three bytes at a specified position in a byte array.</summary>
      <param name="value">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 24-bit signed integer formed by three bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> cannot be null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is greater than <paramref name="value" /> length.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> length from <paramref name="startIndex" /> is too small to represent an <see cref="T:Gemstone.Numeric.Int24" />.</exception>
    </member>
    <member name="F:Gemstone.Numeric.Int24.MaxValue">
      <summary>
            Represents the largest possible value of an Int24. This field is constant.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.Int24.MinValue">
      <summary>
            Represents the smallest possible value of an Int24. This field is constant.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Addition(Gemstone.Numeric.Int24,Gemstone.Numeric.Int24)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Int24 result of addition.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Addition(Gemstone.Numeric.Int24,System.Int32)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer result of addition.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Addition(System.Int32,Gemstone.Numeric.Int24)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer result of addition.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_BitwiseAnd(Gemstone.Numeric.Int24,Gemstone.Numeric.Int24)">
      <summary>
            Returns logical bitwise AND of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Int24 as result of operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_BitwiseAnd(Gemstone.Numeric.Int24,System.Int32)">
      <summary>
            Returns logical bitwise AND of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer as result of operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_BitwiseAnd(System.Int32,Gemstone.Numeric.Int24)">
      <summary>
            Returns logical bitwise AND of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer as result of operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_BitwiseOr(Gemstone.Numeric.Int24,Gemstone.Numeric.Int24)">
      <summary>
            Returns logical bitwise OR of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Int24 as result of operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_BitwiseOr(Gemstone.Numeric.Int24,System.Int32)">
      <summary>
            Returns logical bitwise OR of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer as result of operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_BitwiseOr(System.Int32,Gemstone.Numeric.Int24)">
      <summary>
            Returns logical bitwise OR of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer as result of operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Decrement(Gemstone.Numeric.Int24)">
      <summary>
            Returns decremented value.
            </summary>
      <param name="value">The operand.</param>
      <returns>Int24 result of decrement.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Division(Gemstone.Numeric.Int24,Gemstone.Numeric.Int24)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Int24 result of operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Division(Gemstone.Numeric.Int24,System.Int32)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer result of operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Division(System.Int32,Gemstone.Numeric.Int24)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer result of operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Equality(Gemstone.Numeric.Int24,Gemstone.Numeric.Int24)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean value indicating equality.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Equality(Gemstone.Numeric.Int24,System.Int32)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean value indicating equality.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Equality(System.Int32,Gemstone.Numeric.Int24)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean value indicating equality.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_ExclusiveOr(Gemstone.Numeric.Int24,Gemstone.Numeric.Int24)">
      <summary>
            Returns logical bitwise exclusive-OR of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer value of the resulting exclusive-OR operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_ExclusiveOr(Gemstone.Numeric.Int24,System.Int32)">
      <summary>
            Returns logical bitwise exclusive-OR of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer value of the resulting exclusive-OR operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_ExclusiveOr(System.Int32,Gemstone.Numeric.Int24)">
      <summary>
            Returns logical bitwise exclusive-OR of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer value of the resulting exclusive-OR operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Explicit(Gemstone.Numeric.Int24)~System.Int16">
      <summary>
            Explicitly converts <see cref="T:Gemstone.Numeric.Int24" /> to <see cref="T:System.Int16" />.
            </summary>
      <param name="value">Int24 value that is converted.</param>
      <returns>Short</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Explicit(Gemstone.Numeric.Int24)~System.UInt16">
      <summary>
            Explicitly converts <see cref="T:Gemstone.Numeric.Int24" /> to <see cref="T:System.UInt16" />.
            </summary>
      <param name="value">Int24 value that is converted.</param>
      <returns>Unsigned Short</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Explicit(Gemstone.Numeric.Int24)~System.Byte">
      <summary>
            Explicitly converts <see cref="T:Gemstone.Numeric.Int24" /> to <see cref="T:System.Byte" />.
            </summary>
      <param name="value">Int24 value that is converted.</param>
      <returns>Byte</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Explicit(System.Decimal)~Gemstone.Numeric.Int24">
      <summary>
            Explicitly converts value to an <see cref="T:Gemstone.Numeric.Int24" />.
            </summary>
      <param name="value">Decimal value that is converted.</param>
      <returns>Int24</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Explicit(System.Double)~Gemstone.Numeric.Int24">
      <summary>
            Explicitly converts value to an <see cref="T:Gemstone.Numeric.Int24" />.
            </summary>
      <param name="value">Double value that is converted.</param>
      <returns>Int24</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Explicit(System.Enum)~Gemstone.Numeric.Int24">
      <summary>
            Explicitly converts value to an <see cref="T:Gemstone.Numeric.Int24" />.
            </summary>
      <param name="value">Enum value that is converted.</param>
      <returns>Int24</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Explicit(System.Int32)~Gemstone.Numeric.Int24">
      <summary>
            Explicitly converts value to an <see cref="T:Gemstone.Numeric.Int24" />.
            </summary>
      <param name="value">Integer value that is converted.</param>
      <returns>Int24</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Explicit(System.Int64)~Gemstone.Numeric.Int24">
      <summary>
            Explicitly converts value to an <see cref="T:Gemstone.Numeric.Int24" />.
            </summary>
      <param name="value">Long value that is converted.</param>
      <returns>Int24</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Explicit(System.Single)~Gemstone.Numeric.Int24">
      <summary>
            Explicitly converts value to an <see cref="T:Gemstone.Numeric.Int24" />.
            </summary>
      <param name="value">Float value that is converted.</param>
      <returns>Int24</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Explicit(System.String)~Gemstone.Numeric.Int24">
      <summary>
            Explicitly converts value to an <see cref="T:Gemstone.Numeric.Int24" />.
            </summary>
      <param name="value">String value that is converted.</param>
      <returns>Int24</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Exponent(Gemstone.Numeric.Int24,Gemstone.Numeric.Int24)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Double that is the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Exponent(Gemstone.Numeric.Int24,System.Int32)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Double that is the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Exponent(System.Int32,Gemstone.Numeric.Int24)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Double that is the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_False(Gemstone.Numeric.Int24)">
      <summary>
            Returns true if value is equal to zero.
            </summary>
      <param name="value">Int24 value to test.</param>
      <returns>Boolean to indicate whether the value was equal to zero.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_GreaterThan(Gemstone.Numeric.Int24,Gemstone.Numeric.Int24)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating whether the left value was greater than the right value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_GreaterThan(Gemstone.Numeric.Int24,System.Int32)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating whether the left value was greater than the right value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_GreaterThan(System.Int32,Gemstone.Numeric.Int24)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating whether the left value was greater than the right value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_GreaterThanOrEqual(Gemstone.Numeric.Int24,Gemstone.Numeric.Int24)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating whether the left value was greater than or equal to the right value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_GreaterThanOrEqual(Gemstone.Numeric.Int24,System.Int32)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating whether the left value was greater than or equal to the right value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_GreaterThanOrEqual(System.Int32,Gemstone.Numeric.Int24)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating whether the left value was greater than or equal to the right value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Implicit(Gemstone.Numeric.Int24)~System.Int32">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Numeric.Int24" /> to <see cref="T:System.Int32" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.Int24" /> value that is converted to an <see cref="T:System.Int32" />.</param>
      <returns>An <see cref="T:System.Int32" /> value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Implicit(Gemstone.Numeric.Int24)~System.UInt32">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Numeric.Int24" /> to <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.Int24" /> value that is converted to an unsigned integer.</param>
      <returns>Unsigned integer</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Implicit(Gemstone.Numeric.Int24)~System.Int64">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Numeric.Int24" /> to <see cref="T:System.Int64" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.Int24" /> value that is converted to an <see cref="T:System.Int64" />.</param>
      <returns>An <see cref="T:System.Int64" /> value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Implicit(Gemstone.Numeric.Int24)~System.UInt64">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Numeric.Int24" /> to <see cref="T:System.UInt64" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.Int24" /> value that is converted to an <see cref="T:System.UInt64" />.</param>
      <returns>An <see cref="T:System.UInt64" /> value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Implicit(Gemstone.Numeric.Int24)~System.Double">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Numeric.Int24" /> to <see cref="T:System.Double" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.Int24" /> value that is converted to an <see cref="T:System.Double" />.</param>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Implicit(Gemstone.Numeric.Int24)~System.Single">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Numeric.Int24" /> to <see cref="T:System.Single" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.Int24" /> value that is converted to an <see cref="T:System.Single" />.</param>
      <returns>A <see cref="T:System.Single" /> value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Implicit(Gemstone.Numeric.Int24)~System.Decimal">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Numeric.Int24" /> to <see cref="T:System.Decimal" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.Int24" /> value that is converted to an <see cref="T:System.Decimal" />.</param>
      <returns>A <see cref="T:System.Decimal" /> value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Implicit(Gemstone.Numeric.Int24)~System.String">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Numeric.Int24" /> to <see cref="T:System.String" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.Int24" /> value that is converted to an <see cref="T:System.String" />.</param>
      <returns>A <see cref="T:System.String" /> value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Implicit(System.Byte)~Gemstone.Numeric.Int24">
      <summary>
            Implicitly converts value to an <see cref="T:Gemstone.Numeric.Int24" />.
            </summary>
      <param name="value">Byte value that is converted to an <see cref="T:Gemstone.Numeric.Int24" />.</param>
      <returns>An <see cref="T:Gemstone.Numeric.Int24" /> value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Implicit(System.Char)~Gemstone.Numeric.Int24">
      <summary>
            Implicitly converts value to an <see cref="T:Gemstone.Numeric.Int24" />.
            </summary>
      <param name="value">Char value that is converted to an <see cref="T:Gemstone.Numeric.Int24" />.</param>
      <returns>An <see cref="T:Gemstone.Numeric.Int24" /> value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Implicit(System.Int16)~Gemstone.Numeric.Int24">
      <summary>
            Implicitly converts value to an <see cref="T:Gemstone.Numeric.Int24" />.
            </summary>
      <param name="value">Short value that is converted to an <see cref="T:Gemstone.Numeric.Int24" />.</param>
      <returns>An <see cref="T:Gemstone.Numeric.Int24" /> value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Increment(Gemstone.Numeric.Int24)">
      <summary>
            Returns incremented value.
            </summary>
      <param name="value">The operand.</param>
      <returns>Int24 result of increment.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Inequality(Gemstone.Numeric.Int24,Gemstone.Numeric.Int24)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating the result of the inequality.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Inequality(Gemstone.Numeric.Int24,System.Int32)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating the result of the inequality.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Inequality(System.Int32,Gemstone.Numeric.Int24)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating the result of the inequality.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_LeftShift(Gemstone.Numeric.Int24,System.Int32)">
      <summary>
            Returns value after left shifts of first value by the number of bits specified by second value.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.Int24" /> value to shift.</param>
      <param name="shifts">
        <see cref="T:System.Int32" /> shifts indicates how many places to shift.</param>
      <returns>An <see cref="T:Gemstone.Numeric.Int24" /> value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_LessThan(Gemstone.Numeric.Int24,Gemstone.Numeric.Int24)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating whether the left value was less than the right value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_LessThan(Gemstone.Numeric.Int24,System.Int32)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating whether the left value was less than the right value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_LessThan(System.Int32,Gemstone.Numeric.Int24)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating whether the left value was less than the right value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_LessThanOrEqual(Gemstone.Numeric.Int24,Gemstone.Numeric.Int24)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating whether the left value was less than the right value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_LessThanOrEqual(Gemstone.Numeric.Int24,System.Int32)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating whether the left value was less than the right value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_LessThanOrEqual(System.Int32,Gemstone.Numeric.Int24)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating whether the left value was less than the right value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Modulus(Gemstone.Numeric.Int24,Gemstone.Numeric.Int24)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.Int24" /> value as numerator.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.Int24" /> value as denominator.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.Int24" /> as remainder</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Modulus(Gemstone.Numeric.Int24,System.Int32)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.Int24" /> value as numerator.</param>
      <param name="value2">
        <see cref="T:System.Int32" /> value as denominator.</param>
      <returns>
        <see cref="T:System.Int32" /> as remainder</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Modulus(System.Int32,Gemstone.Numeric.Int24)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">
        <see cref="T:System.Int32" /> value as numerator.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.Int24" /> value as denominator.</param>
      <returns>
        <see cref="T:System.Int32" /> as remainder</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Multiply(Gemstone.Numeric.Int24,Gemstone.Numeric.Int24)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.Int24" /> value as left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.Int24" /> value as right hand operand.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.Int24" /> as result</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Multiply(Gemstone.Numeric.Int24,System.Int32)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.Int24" /> value as left hand operand.</param>
      <param name="value2">
        <see cref="T:System.Int32" /> value as right hand operand.</param>
      <returns>
        <see cref="T:System.Int32" /> as result</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Multiply(System.Int32,Gemstone.Numeric.Int24)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">
        <see cref="T:System.Int32" /> value as left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.Int24" /> value as right hand operand.</param>
      <returns>
        <see cref="T:System.Int32" /> as result</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_OnesComplement(Gemstone.Numeric.Int24)">
      <summary>
            Returns bitwise complement of value.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.Int24" /> value as operand.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.Int24" /> as result.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_RightShift(Gemstone.Numeric.Int24,System.Int32)">
      <summary>
            Returns value after right shifts of first value by the number of bits specified by second value.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.Int24" /> value to shift.</param>
      <param name="shifts">
        <see cref="T:System.Int32" /> shifts indicates how many places to shift.</param>
      <returns>An <see cref="T:Gemstone.Numeric.Int24" /> value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Subtraction(Gemstone.Numeric.Int24,Gemstone.Numeric.Int24)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Int24 result of subtraction.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Subtraction(Gemstone.Numeric.Int24,System.Int32)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer result of subtraction.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_Subtraction(System.Int32,Gemstone.Numeric.Int24)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer result of subtraction.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.op_True(Gemstone.Numeric.Int24)">
      <summary>
            Returns true if value is not zero.
            </summary>
      <param name="value">Int24 value to test.</param>
      <returns>Boolean to indicate whether the value was not equal to zero.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its 24-bit signed integer equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A 24-bit signed integer equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than Int24.MinValue or greater than Int24.MaxValue.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Numeric.Int24.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its 24-bit signed integer equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            A typical value to specify is System.Globalization.NumberStyles.Integer.
            </param>
      <returns>
            A 24-bit signed integer equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than Int24.MinValue or greater than Int24.MaxValue.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Numeric.Int24.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its 24-bit
            signed integer equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            A typical value to specify is System.Globalization.NumberStyles.Integer.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A 24-bit signed integer equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than Int24.MinValue or greater than Int24.MaxValue.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Numeric.Int24.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its 24-bit
            signed integer equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A 24-bit signed integer equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than Int24.MinValue or greater than Int24.MaxValue.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Numeric.Int24.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.
            </returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.TryParse(System.String,Gemstone.Numeric.Int24@)">
      <summary>
            Converts the string representation of a number to its 24-bit signed integer equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the 24-bit signed integer value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than Int24.MinValue or greater than Int24.MaxValue.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gemstone.Numeric.Int24@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            24-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            A typical value to specify is System.Globalization.NumberStyles.Integer.
            </param>
      <param name="result">
            When this method returns, contains the 24-bit signed integer value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than Int24.MinValue or greater than
            Int24.MaxValue. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:Gemstone.Numeric.RadixCodec">
      <summary>
            Represents a radix value codec for conversion of base-10 integer values to and from other base values.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.RadixCodec.#ctor(System.String,System.Boolean)">
      <summary>
            Creates a new <see cref="T:Gemstone.Numeric.RadixCodec" />.
            </summary>
      <param name="digits">Digits to use for radix values.</param>
      <param name="caseSensitive">Determines if alphabetic radix characters are case sensitive.</param>
    </member>
    <member name="M:Gemstone.Numeric.RadixCodec.Decode``1(System.String)">
      <summary>
            Converts a radix value to an integer value.
            </summary>
      <param name="radixValue">Radix value to convert.</param>
      <typeparam name="T">Integer type to convert</typeparam>
      <returns>Decoded integer value.</returns>
      <exception cref="T:System.ArgumentNullException">Radix value is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentException">Invalid radix value character.</exception>
      <exception cref="T:System.OverflowException">Decoded radix value overflowed integer type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Only integer types Int16, UInt16, Int24, UInt24, Int32, UInt32, Int64 and UInt64 are supported.</exception>
    </member>
    <member name="M:Gemstone.Numeric.RadixCodec.Decode(System.Type,System.String)">
      <summary>
            Converts a radix value to an integer value.
            </summary>
      <param name="type">Integer type to convert.</param>
      <param name="radixValue">Radix value to convert.</param>
      <returns>Decoded integer value.</returns>
      <exception cref="T:System.ArgumentNullException">Radix value is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentException">Invalid radix value character.</exception>
      <exception cref="T:System.OverflowException">Decoded radix value overflowed integer type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Only integer types Int16, UInt16, Int24, UInt24, Int32, UInt32, Int64 and UInt64 are supported.</exception>
    </member>
    <member name="F:Gemstone.Numeric.RadixCodec.Digits">
      <summary>
            Defines the available digits for a radix value codec.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.RadixCodec.Encode(Gemstone.Numeric.Int24)">
      <summary>
            Converts integer value to a radix value.
            </summary>
      <param name="value">Integer value to convert.</param>
      <returns>Radix value string.</returns>
    </member>
    <member name="M:Gemstone.Numeric.RadixCodec.Encode(Gemstone.Numeric.UInt24)">
      <summary>
            Converts integer value to a radix value.
            </summary>
      <param name="value">Integer value to convert.</param>
      <returns>Radix value string.</returns>
    </member>
    <member name="M:Gemstone.Numeric.RadixCodec.Encode(System.Int16)">
      <summary>
            Converts integer value to a radix value.
            </summary>
      <param name="value">Integer value to convert.</param>
      <returns>Radix value string.</returns>
    </member>
    <member name="M:Gemstone.Numeric.RadixCodec.Encode(System.Int32)">
      <summary>
            Converts integer value to a radix value.
            </summary>
      <param name="value">Integer value to convert.</param>
      <returns>Radix value string.</returns>
    </member>
    <member name="M:Gemstone.Numeric.RadixCodec.Encode(System.Int64)">
      <summary>
            Converts integer value to a radix value.
            </summary>
      <param name="value">Integer value to convert.</param>
      <returns>Radix value string.</returns>
    </member>
    <member name="M:Gemstone.Numeric.RadixCodec.Encode(System.UInt16)">
      <summary>
            Converts integer value to a radix value.
            </summary>
      <param name="value">Integer value to convert.</param>
      <returns>Radix value string.</returns>
    </member>
    <member name="M:Gemstone.Numeric.RadixCodec.Encode(System.UInt32)">
      <summary>
            Converts integer value to a radix value.
            </summary>
      <param name="value">Integer value to convert.</param>
      <returns>Radix value string.</returns>
    </member>
    <member name="M:Gemstone.Numeric.RadixCodec.Encode(System.UInt64)">
      <summary>
            Converts integer value to a radix value.
            </summary>
      <param name="value">Integer value to convert.</param>
      <returns>Radix value string.</returns>
    </member>
    <member name="F:Gemstone.Numeric.RadixCodec.Radix16">
      <summary>
            Gets a radix-16 value (hex) encoding.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.RadixCodec.Radix2">
      <summary>
            Gets a radix-2 value (binary) encoding.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.RadixCodec.Radix32">
      <summary>
            Gets a radix-32 value encoding.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.RadixCodec.Radix36">
      <summary>
            Gets a radix-36 value encoding.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.RadixCodec.Radix64">
      <summary>
            Gets a radix-64 value encoding.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.RadixCodec.Radix8">
      <summary>
            Gets a radix-8 value (octal) encoding.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.RadixCodec.Radix86">
      <summary>
            Gets a radix-86 value encoding.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.RadixCodec.TryDecode(System.String,Gemstone.Numeric.Int24@)">
      <summary>
            Attempts to convert a radix value to an integer value.
            </summary>
      <param name="radixValue">Radix value to convert.</param>
      <param name="value">Decoded integer value.</param>
      <returns>
        <c>true</c> if decode succeeds; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Numeric.RadixCodec.TryDecode(System.String,Gemstone.Numeric.UInt24@)">
      <summary>
            Attempts to convert a radix value to an integer value.
            </summary>
      <param name="radixValue">Radix value to convert.</param>
      <param name="value">Decoded integer value.</param>
      <returns>
        <c>true</c> if decode succeeds; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Numeric.RadixCodec.TryDecode(System.String,System.Int16@)">
      <summary>
            Attempts to convert a radix value to an integer value.
            </summary>
      <param name="radixValue">Radix value to convert.</param>
      <param name="value">Decoded integer value.</param>
      <returns>
        <c>true</c> if decode succeeds; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Numeric.RadixCodec.TryDecode(System.String,System.Int32@)">
      <summary>
            Attempts to convert a radix value to an integer value.
            </summary>
      <param name="radixValue">Radix value to convert.</param>
      <param name="value">Decoded integer value.</param>
      <returns>
        <c>true</c> if decode succeeds; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Numeric.RadixCodec.TryDecode(System.String,System.Int64@)">
      <summary>
            Attempts to convert a radix value to an integer value.
            </summary>
      <param name="radixValue">Radix value to convert.</param>
      <param name="value">Decoded integer value.</param>
      <returns>
        <c>true</c> if decode succeeds; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Numeric.RadixCodec.TryDecode(System.String,System.UInt16@)">
      <summary>
            Attempts to convert a radix value to an integer value.
            </summary>
      <param name="radixValue">Radix value to convert.</param>
      <param name="value">Decoded integer value.</param>
      <returns>
        <c>true</c> if decode succeeds; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Numeric.RadixCodec.TryDecode(System.String,System.UInt32@)">
      <summary>
            Attempts to convert a radix value to an integer value.
            </summary>
      <param name="radixValue">Radix value to convert.</param>
      <param name="value">Decoded integer value.</param>
      <returns>
        <c>true</c> if decode succeeds; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Numeric.RadixCodec.TryDecode(System.String,System.UInt64@)">
      <summary>
            Attempts to convert a radix value to an integer value.
            </summary>
      <param name="radixValue">Radix value to convert.</param>
      <param name="value">Decoded integer value.</param>
      <returns>
        <c>true</c> if decode succeeds; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:Gemstone.Numeric.UInt24">
      <summary>Represents a 3-byte, 24-bit unsigned integer.</summary>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.#ctor(Gemstone.Numeric.UInt24)">
      <summary>Creates 24-bit unsigned integer from an existing 24-bit unsigned integer.</summary>
      <param name="value">A <see cref="T:Gemstone.Numeric.UInt24" /> to create the new value from. </param>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.#ctor(System.Byte[],System.Int32)">
      <summary>Creates 24-bit unsigned integer from three bytes at a specified position in a byte array.</summary>
      <param name="value">An array of bytes.</param>
      <param name="startIndex">The starting position within <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> cannot be null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is greater than <paramref name="value" /> length.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> length from <paramref name="startIndex" /> is too small to represent a <see cref="T:Gemstone.Numeric.UInt24" />.</exception>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.#ctor(System.UInt32)">
      <summary>Creates 24-bit unsigned integer from a 32-bit unsigned integer.</summary>
      <param name="value">32-bit unsigned integer to use as new 24-bit unsigned integer value.</param>
      <exception cref="T:System.OverflowException">Source values over 24-bit max range will cause an overflow exception.</exception>
    </member>
    <member name="F:Gemstone.Numeric.UInt24.BitMask">
      <summary>High byte bit-mask used when a 24-bit integer is stored within a 32-bit integer. This field is constant.</summary>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.CompareTo(Gemstone.Numeric.UInt24)">
      <summary>
            Compares this instance to a specified 24-bit unsigned integer and returns an indication of their
            relative values.
            </summary>
      <param name="value">An integer to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not an UInt32 or UInt24.</exception>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.CompareTo(System.UInt32)">
      <summary>
            Compares this instance to a specified 32-bit unsigned integer and returns an indication of their
            relative values.
            </summary>
      <param name="value">An integer to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.Equals(Gemstone.Numeric.UInt24)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified UInt24 value.
            </summary>
      <param name="obj">An UInt24 value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of UInt32 or UInt24 and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.Equals(System.UInt32)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified uint value.
            </summary>
      <param name="obj">An UInt32 value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.GetBytes">
      <summary>Returns the UInt24 value as an array of three bytes.</summary>
      <returns>An array of bytes with length 3.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.GetBytes(Gemstone.Numeric.UInt24)">
      <summary>Returns the specified UInt24 value as an array of three bytes.</summary>
      <param name="value">UInt24 value to convert to bytes.</param>
      <returns>An array of bytes with length 3.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit unsigned integer hash code.
            </returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.GetTypeCode">
      <summary>
            Returns the System.TypeCode for value type System.UInt32 (there is no defined type code for an UInt24).
            </summary>
      <returns>The enumerated constant, System.TypeCode.UInt32.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.GetValue(System.Byte[],System.Int32)">
      <summary>Returns a 24-bit unsigned integer from three bytes at a specified position in a byte array.</summary>
      <param name="value">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 24-bit unsigned integer formed by three bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> cannot be null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is greater than <paramref name="value" /> length.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> length from <paramref name="startIndex" /> is too small to represent an <see cref="T:Gemstone.Numeric.UInt24" />.</exception>
    </member>
    <member name="F:Gemstone.Numeric.UInt24.MaxValue">
      <summary>
            Represents the largest possible value of an Int24. This field is constant.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.UInt24.MinValue">
      <summary>
            Represents the smallest possible value of an Int24. This field is constant.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Addition(Gemstone.Numeric.UInt24,Gemstone.Numeric.UInt24)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value as result of addition operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Addition(Gemstone.Numeric.UInt24,System.UInt32)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value as result of addition operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Addition(System.UInt32,Gemstone.Numeric.UInt24)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value as result of addition operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_BitwiseAnd(Gemstone.Numeric.UInt24,Gemstone.Numeric.UInt24)">
      <summary>
            Returns logical bitwise AND of values.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value representing the logical bitwise AND of the values.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_BitwiseAnd(Gemstone.Numeric.UInt24,System.UInt32)">
      <summary>
            Returns logical bitwise AND of values.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value representing the logical bitwise AND of the values.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_BitwiseAnd(System.UInt32,Gemstone.Numeric.UInt24)">
      <summary>
            Returns logical bitwise AND of values.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value representing the logical bitwise AND of the values.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_BitwiseOr(Gemstone.Numeric.UInt24,Gemstone.Numeric.UInt24)">
      <summary>
            Returns logical bitwise OR of values.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value representing the logical bitwise OR of the values.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_BitwiseOr(Gemstone.Numeric.UInt24,System.UInt32)">
      <summary>
            Returns logical bitwise OR of values.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value representing the logical bitwise OR of the values.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_BitwiseOr(System.UInt32,Gemstone.Numeric.UInt24)">
      <summary>
            Returns logical bitwise OR of values.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value representing the logical bitwise OR of the values.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Decrement(Gemstone.Numeric.UInt24)">
      <summary>
            Returns decremented value.
            </summary>
      <param name="value">The operand.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> result of decrement.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Division(Gemstone.Numeric.UInt24,Gemstone.Numeric.UInt24)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value as result of division operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Division(Gemstone.Numeric.UInt24,System.UInt32)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value as result of division operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Division(System.UInt32,Gemstone.Numeric.UInt24)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value as result of division operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Equality(Gemstone.Numeric.UInt24,Gemstone.Numeric.UInt24)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Equality(Gemstone.Numeric.UInt24,System.UInt32)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Equality(System.UInt32,Gemstone.Numeric.UInt24)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_ExclusiveOr(Gemstone.Numeric.UInt24,Gemstone.Numeric.UInt24)">
      <summary>
            Returns logical bitwise exclusive-OR of values.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value representing the logical bitwise exclusive-OR of the values.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_ExclusiveOr(Gemstone.Numeric.UInt24,System.UInt32)">
      <summary>
            Returns logical bitwise exclusive-OR of values.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value representing the logical bitwise exclusive-OR of the values.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_ExclusiveOr(System.UInt32,Gemstone.Numeric.UInt24)">
      <summary>
            Returns logical bitwise exclusive-OR of values.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value representing the logical bitwise exclusive-OR of the values.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Explicit(Gemstone.Numeric.Int24)~Gemstone.Numeric.UInt24">
      <summary>
            Explicitly converts value to an <see cref="T:Gemstone.Numeric.UInt24" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.Int24" /> value to be converted.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Explicit(Gemstone.Numeric.UInt24)~Gemstone.Numeric.Int24">
      <summary>
            Explicitly converts value to an <see cref="T:Gemstone.Numeric.Int24" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.UInt24" /> value to be converted.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.Int24" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Explicit(Gemstone.Numeric.UInt24)~System.Int16">
      <summary>
            Explicitly converts <see cref="T:Gemstone.Numeric.UInt24" /> to <see cref="T:System.Int16" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.UInt24" /> value to be converted.</param>
      <returns>
        <see cref="T:System.Int16" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Explicit(Gemstone.Numeric.UInt24)~System.UInt16">
      <summary>
            Explicitly converts <see cref="T:Gemstone.Numeric.UInt24" /> to <see cref="T:System.UInt16" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.UInt24" /> value to be converted.</param>
      <returns>
        <see cref="T:System.UInt16" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Explicit(Gemstone.Numeric.UInt24)~System.Byte">
      <summary>
            Explicitly converts <see cref="T:Gemstone.Numeric.UInt24" /> to <see cref="T:System.Byte" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.UInt24" /> value to be converted.</param>
      <returns>
        <see cref="T:System.Byte" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Explicit(System.Decimal)~Gemstone.Numeric.UInt24">
      <summary>
            Explicitly converts value to an <see cref="T:Gemstone.Numeric.UInt24" />.
            </summary>
      <param name="value">
        <see cref="T:System.Decimal" /> value to be converted.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Explicit(System.Double)~Gemstone.Numeric.UInt24">
      <summary>
            Explicitly converts value to an <see cref="T:Gemstone.Numeric.UInt24" />.
            </summary>
      <param name="value">
        <see cref="T:System.Double" /> value to be converted.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Explicit(System.Enum)~Gemstone.Numeric.UInt24">
      <summary>
            Explicitly converts value to an <see cref="T:Gemstone.Numeric.UInt24" />.
            </summary>
      <param name="value">
        <see cref="T:System.Enum" /> value to be converted.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Explicit(System.Single)~Gemstone.Numeric.UInt24">
      <summary>
            Explicitly converts value to an <see cref="T:Gemstone.Numeric.UInt24" />.
            </summary>
      <param name="value">
        <see cref="T:System.Single" /> value to be converted.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Explicit(System.String)~Gemstone.Numeric.UInt24">
      <summary>
            Explicitly converts value to an <see cref="T:Gemstone.Numeric.UInt24" />.
            </summary>
      <param name="value">
        <see cref="T:System.String" /> value to be converted.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Explicit(System.UInt32)~Gemstone.Numeric.UInt24">
      <summary>
            Explicitly converts value to an <see cref="T:Gemstone.Numeric.UInt24" />.
            </summary>
      <param name="value">
        <see cref="T:System.UInt32" /> value to be converted.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Explicit(System.UInt64)~Gemstone.Numeric.UInt24">
      <summary>
            Explicitly converts value to an <see cref="T:Gemstone.Numeric.UInt24" />.
            </summary>
      <param name="value">
        <see cref="T:System.UInt64" /> value to be converted.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Exponent(Gemstone.Numeric.UInt24,Gemstone.Numeric.UInt24)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Double" /> value as result of operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Exponent(Gemstone.Numeric.UInt24,System.Int32)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Double" /> value as result of operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Exponent(System.Int32,Gemstone.Numeric.UInt24)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Double" /> value as result of operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_False(Gemstone.Numeric.UInt24)">
      <summary>
            Returns true if value is equal to zero.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.UInt24" /> value to evaluate.</param>
      <returns>
        <see cref="T:System.Boolean" /> value indicating whether the value is equal than zero.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_GreaterThan(Gemstone.Numeric.UInt24,Gemstone.Numeric.UInt24)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_GreaterThan(Gemstone.Numeric.UInt24,System.UInt32)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_GreaterThan(System.UInt32,Gemstone.Numeric.UInt24)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_GreaterThanOrEqual(Gemstone.Numeric.UInt24,Gemstone.Numeric.UInt24)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_GreaterThanOrEqual(Gemstone.Numeric.UInt24,System.UInt32)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_GreaterThanOrEqual(System.UInt32,Gemstone.Numeric.UInt24)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Implicit(Gemstone.Numeric.UInt24)~System.Int32">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Numeric.UInt24" /> to <see cref="T:System.Int32" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.UInt24" /> value to be converted.</param>
      <returns>
        <see cref="T:System.Int32" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Implicit(Gemstone.Numeric.UInt24)~System.UInt32">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Numeric.UInt24" /> to <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.UInt24" /> value to be converted.</param>
      <returns>
        <see cref="T:System.UInt32" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Implicit(Gemstone.Numeric.UInt24)~System.Int64">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Numeric.UInt24" /> to <see cref="T:System.Int64" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.UInt24" /> value to be converted.</param>
      <returns>
        <see cref="T:System.Int64" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Implicit(Gemstone.Numeric.UInt24)~System.UInt64">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Numeric.UInt24" /> to <see cref="T:System.UInt64" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.UInt24" /> value to be converted.</param>
      <returns>
        <see cref="T:System.UInt64" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Implicit(Gemstone.Numeric.UInt24)~System.Double">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Numeric.UInt24" /> to <see cref="T:System.Double" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.UInt24" /> value to be converted.</param>
      <returns>
        <see cref="T:System.Double" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Implicit(Gemstone.Numeric.UInt24)~System.Single">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Numeric.UInt24" /> to <see cref="T:System.Single" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.UInt24" /> value to be converted.</param>
      <returns>
        <see cref="T:System.Single" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Implicit(Gemstone.Numeric.UInt24)~System.Decimal">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Numeric.UInt24" /> to <see cref="T:System.Decimal" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.UInt24" /> value to be converted.</param>
      <returns>
        <see cref="T:System.Decimal" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Implicit(Gemstone.Numeric.UInt24)~System.String">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Numeric.UInt24" /> to <see cref="T:System.String" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.UInt24" /> value to be converted.</param>
      <returns>
        <see cref="T:System.String" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Implicit(System.Byte)~Gemstone.Numeric.UInt24">
      <summary>
            Implicitly converts value to an <see cref="T:Gemstone.Numeric.UInt24" />.
            </summary>
      <param name="value">
        <see cref="T:System.Byte" /> value to be converted.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Implicit(System.Char)~Gemstone.Numeric.UInt24">
      <summary>
            Implicitly converts value to an <see cref="T:Gemstone.Numeric.UInt24" />.
            </summary>
      <param name="value">
        <see cref="T:System.Char" /> value to be converted.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Implicit(System.UInt16)~Gemstone.Numeric.UInt24">
      <summary>
            Implicitly converts value to an <see cref="T:Gemstone.Numeric.UInt24" />.
            </summary>
      <param name="value">
        <see cref="T:System.UInt16" /> value to be converted.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Increment(Gemstone.Numeric.UInt24)">
      <summary>
            Returns incremented value.
            </summary>
      <param name="value">The operand.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> result of increment.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Inequality(Gemstone.Numeric.UInt24,Gemstone.Numeric.UInt24)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Inequality(Gemstone.Numeric.UInt24,System.UInt32)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Inequality(System.UInt32,Gemstone.Numeric.UInt24)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_LeftShift(Gemstone.Numeric.UInt24,System.Int32)">
      <summary>
            Returns value after left shifts of first value by the number of bits specified by second value.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.UInt24" /> value to left shift.</param>
      <param name="shifts">
        <see cref="T:System.Int32" /> value indicating the number of bits to left shift by.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value as result of left shift operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_LessThan(Gemstone.Numeric.UInt24,Gemstone.Numeric.UInt24)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_LessThan(Gemstone.Numeric.UInt24,System.UInt32)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_LessThan(System.UInt32,Gemstone.Numeric.UInt24)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_LessThanOrEqual(Gemstone.Numeric.UInt24,Gemstone.Numeric.UInt24)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_LessThanOrEqual(Gemstone.Numeric.UInt24,System.UInt32)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_LessThanOrEqual(System.UInt32,Gemstone.Numeric.UInt24)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Modulus(Gemstone.Numeric.UInt24,Gemstone.Numeric.UInt24)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value as result of modulus operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Modulus(Gemstone.Numeric.UInt24,System.UInt32)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value as result of modulus operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Modulus(System.UInt32,Gemstone.Numeric.UInt24)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value as result of modulus operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Multiply(Gemstone.Numeric.UInt24,Gemstone.Numeric.UInt24)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value as result of multiplication operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Multiply(Gemstone.Numeric.UInt24,System.UInt32)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value as result of multiplication operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Multiply(System.UInt32,Gemstone.Numeric.UInt24)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value as result of multiplication operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_OnesComplement(Gemstone.Numeric.UInt24)">
      <summary>
            Returns bitwise complement of value.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.UInt24" /> value to evaluate.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value representing the complement of the input value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_RightShift(Gemstone.Numeric.UInt24,System.Int32)">
      <summary>
            Returns value after right shifts of first value by the number of bits specified by second value.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.UInt24" /> value to right shift.</param>
      <param name="shifts">
        <see cref="T:System.Int32" /> value indicating the number of bits to right shift by.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value as result of right shift operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Subtraction(Gemstone.Numeric.UInt24,Gemstone.Numeric.UInt24)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value as result of subtraction operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Subtraction(Gemstone.Numeric.UInt24,System.UInt32)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value as result of subtraction operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_Subtraction(System.UInt32,Gemstone.Numeric.UInt24)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value as result of subtraction operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.op_True(Gemstone.Numeric.UInt24)">
      <summary>
            Returns true if value is greater than zero.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Numeric.UInt24" /> value to evaluate.</param>
      <returns>
        <see cref="T:System.Boolean" /> value indicating whether the value is greater than zero.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its 24-bit unsigned integer equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A 24-bit unsigned integer equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than UInt24.MinValue or greater than UInt24.MaxValue.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its 24-bit unsigned integer equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            A typical value to specify is System.Globalization.NumberStyles.Integer.
            </param>
      <returns>
            A 24-bit unsigned integer equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than UInt24.MinValue or greater than UInt24.MaxValue.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its 24-bit
            unsigned integer equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            A typical value to specify is System.Globalization.NumberStyles.Integer.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A 24-bit unsigned integer equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than UInt24.MinValue or greater than UInt24.MaxValue.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its 24-bit
            unsigned integer equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A 24-bit unsigned integer equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than UInt24.MinValue or greater than UInt24.MaxValue.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.
            </returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.TryParse(System.String,Gemstone.Numeric.UInt24@)">
      <summary>
            Converts the string representation of a number to its 24-bit unsigned integer equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the 24-bit unsigned integer value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than UInt24.MinValue or greater than UInt24.MaxValue.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gemstone.Numeric.UInt24@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            24-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            A typical value to specify is System.Globalization.NumberStyles.Integer.
            </param>
      <param name="result">
            When this method returns, contains the 24-bit unsigned integer value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than UInt24.MinValue or greater than
            UInt24.MaxValue. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:Gemstone.Numeric.Analysis.Euclidean">
      <summary>
            Contains an implementation of greatest common denominator
            and least common multiple using the Euclidean algorithm.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.Analysis.Euclidean.GreatestCommonDenominator(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Gets the greatest common denominator of all the integers in the source collection.
            </summary>
      <param name="source">The collection of integers.</param>
      <returns>The greatest common denominator.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Analysis.Euclidean.GreatestCommonDenominator(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            Gets the greatest common denominator of all the integers in the source collection.
            </summary>
      <param name="source">The collection of integers.</param>
      <returns>The greatest common denominator.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Analysis.Euclidean.GreatestCommonDenominator(System.Int32,System.Int32)">
      <summary>
            Gets the greatest common denominator of the given integers.
            </summary>
      <param name="a">The first of the given integers.</param>
      <param name="b">The second of the given integers.</param>
      <returns>The greatest common denominator.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Analysis.Euclidean.GreatestCommonDenominator(System.Int32[])">
      <summary>
            Gets the greatest common denominator of all the integers in the source collection.
            </summary>
      <param name="source">The collection of integers.</param>
      <returns>The greatest common denominator.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Analysis.Euclidean.GreatestCommonDenominator(System.Int64,System.Int64)">
      <summary>
            Gets the greatest common denominator of the given integers.
            </summary>
      <param name="a">The first of the given integers.</param>
      <param name="b">The second of the given integers.</param>
      <returns>The greatest common denominator.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Analysis.Euclidean.GreatestCommonDenominator(System.Int64[])">
      <summary>
            Gets the greatest common denominator of all the integers in the source collection.
            </summary>
      <param name="source">The collection of integers.</param>
      <returns>The greatest common denominator.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Analysis.Euclidean.LeastCommonMultiple(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Gets the least common multiple of all the integers in the source collection.
            </summary>
      <param name="source">The collection of integers.</param>
      <returns>The least common multiple.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Analysis.Euclidean.LeastCommonMultiple(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            Gets the least common multiple of all the integers in the source collection.
            </summary>
      <param name="source">The collection of integers.</param>
      <returns>The least common multiple.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Analysis.Euclidean.LeastCommonMultiple(System.Int32,System.Int32)">
      <summary>
            Gets the least common multiple of the given integers.
            </summary>
      <param name="a">The first of the given integers.</param>
      <param name="b">The second of the given integers.</param>
      <returns>The least common multiple.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Analysis.Euclidean.LeastCommonMultiple(System.Int32[])">
      <summary>
            Gets the least common multiple of all the integers in the source collection.
            </summary>
      <param name="source">The collection of integers.</param>
      <returns>The least common multiple.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Analysis.Euclidean.LeastCommonMultiple(System.Int64,System.Int64)">
      <summary>
            Gets the least common multiple of the given integers.
            </summary>
      <param name="a">The first of the given integers.</param>
      <param name="b">The second of the given integers.</param>
      <returns>The least common multiple.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Analysis.Euclidean.LeastCommonMultiple(System.Int64[])">
      <summary>
            Gets the least common multiple of all the integers in the source collection.
            </summary>
      <param name="source">The collection of integers.</param>
      <returns>The least common multiple.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Analysis.Euclidean.Mod(System.Double,System.Double)">
      <summary>
            Implementation of the modulo operator using Euclidean division.
            </summary>
      <param name="numerator">The number to be divided.</param>
      <param name="denominator">The number to divide by.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Numeric.Analysis.Euclidean.Mod(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.Numeric.Analysis.Euclidean.Wrap(System.Double,System.Double,System.Double)">
      <summary>
            Wraps a value to a range of values defined
            by the given minimum value and range.
            </summary>
      <param name="value">The value to be wrapped.</param>
      <param name="minimum">The minimum value of the range.</param>
      <param name="range">The size of the range.</param>
      <returns>The given value wrapped to the given range.</returns>
    </member>
    <member name="T:Gemstone.Numeric.Analysis.GaussianDistribution">
      <summary>
            Implements a BoxMuller method for generating statistically normal random numbers.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.Analysis.GaussianDistribution.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a <see cref="T:Gemstone.Numeric.Analysis.GaussianDistribution" /></summary>
      <param name="mean">the mean of the distribution</param>
      <param name="standardDeviation">the standard deviation</param>
      <param name="min">a clipping boundary</param>
      <param name="max">a clipping boundary</param>
    </member>
    <member name="M:Gemstone.Numeric.Analysis.GaussianDistribution.Next">
      <summary>
            Gets the next random value.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Numeric.Analysis.GaussianDistribution.Next</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Gemstone.Numeric.Analysis.NumericAnalysisExtensions">
      <summary>
            Defines extension functions related to numerical analysis over a sequence of data.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.Analysis.NumericAnalysisExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal},System.Boolean)">
      <summary>
            Computes the standard deviation over a sequence of <see cref="T:System.Decimal" /> values.
            </summary>
      <param name="source">Source data sample.</param>
      <param name="calculateForSample">Set to <c>true</c> to calculate for estimated population size, or <c>false</c> for full population.</param>
      <returns>The standard deviation of the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" /> does not contain enough values to produce a result.</exception>
    </member>
    <member name="M:Gemstone.Numeric.Analysis.NumericAnalysisExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double},System.Boolean)">
      <summary>
            Computes the standard deviation over a sequence of <see cref="T:System.Double" /> values.
            </summary>
      <param name="source">Source data sample.</param>
      <param name="calculateForSample">Set to <c>true</c> to calculate for estimated population size, or <c>false</c> for full population.</param>
      <returns>The standard deviation of the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" /> does not contain enough values to produce a result.</exception>
    </member>
    <member name="M:Gemstone.Numeric.Analysis.NumericAnalysisExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Single},System.Boolean)">
      <summary>
            Computes the standard deviation over a sequence of <see cref="T:System.Single" /> values.
            </summary>
      <param name="source">Source data sample.</param>
      <param name="calculateForSample">Set to <c>true</c> to calculate for estimated population size, or <c>false</c> for full population.</param>
      <returns>The standard deviation of the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" /> does not contain enough values to produce a result.</exception>
    </member>
    <member name="M:Gemstone.Numeric.Analysis.NumericAnalysisExtensions.StandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal},System.Boolean)">
      <summary>
            Computes the standard deviation over a sequence of <see cref="T:System.Decimal" /> values.
            </summary>
      <param name="source">Source data sample.</param>
      <param name="selector">Used to map value from enumerable of <typeparamref name="T" /> to enumerable of <see cref="T:System.Decimal" />.</param>
      <param name="calculateForSample">Set to <c>true</c> to calculate for estimated population size, or <c>false</c> for full population.</param>
      <typeparam name="T">Type of source used to extract decimal.</typeparam>
      <returns>The standard deviation of the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" /> does not contain enough values to produce a result.</exception>
    </member>
    <member name="M:Gemstone.Numeric.Analysis.NumericAnalysisExtensions.StandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Boolean)">
      <summary>
            Computes the standard deviation over a sequence of <see cref="T:System.Double" /> values.
            </summary>
      <param name="source">Source data sample.</param>
      <param name="selector">Used to map value from enumerable of <typeparamref name="T" /> to enumerable of <see cref="T:System.Double" />.</param>
      <param name="calculateForSample">Set to <c>true</c> to calculate for estimated population size, or <c>false</c> for full population.</param>
      <typeparam name="T">Type of source used to extract double.</typeparam>
      <returns>The standard deviation of the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" /> does not contain enough values to produce a result.</exception>
    </member>
    <member name="M:Gemstone.Numeric.Analysis.NumericAnalysisExtensions.StandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},System.Boolean)">
      <summary>
            Computes the standard deviation over a sequence of <see cref="T:System.Single" /> values.
            </summary>
      <param name="source">Source data sample.</param>
      <param name="selector">Used to map value from enumerable of <typeparamref name="T" /> to enumerable of <see cref="T:System.Single" />.</param>
      <param name="calculateForSample">Set to <c>true</c> to calculate for estimated population size, or <c>false</c> for full population.</param>
      <typeparam name="T">Type of source used to extract float.</typeparam>
      <returns>The standard deviation of the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" /> does not contain enough values to produce a result.</exception>
    </member>
    <member name="T:Gemstone.Numeric.EE.LineFrequency">
      <summary>
            Nominal line frequencies enumeration.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.LineFrequency.Hz50">
      <summary>
            50Hz nominal frequency.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.LineFrequency.Hz60">
      <summary>
            60Hz nominal frequency.
            </summary>
    </member>
    <member name="T:Gemstone.Numeric.EE.Phasor">
      <summary>
            Represents a phasor as a complex number value and a type (i.e., a voltage or a current).
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.EE.Phasor.#ctor(Gemstone.Numeric.EE.PhasorType,Gemstone.Numeric.ComplexNumber)">
      <summary>
            Creates a <see cref="T:Gemstone.Numeric.EE.Phasor" /> of the specified <paramref name="type" /> from the given <see cref="T:Gemstone.Numeric.ComplexNumber" />.
            </summary>
      <param name="type">Type of phasor, i.e., current or voltage.</param>
      <param name="z">
        <see cref="T:Gemstone.Numeric.ComplexNumber" /> to be copied.</param>
    </member>
    <member name="M:Gemstone.Numeric.EE.Phasor.#ctor(Gemstone.Numeric.EE.PhasorType,Gemstone.Units.Angle,System.Double)">
      <summary>
            Creates a <see cref="T:Gemstone.Numeric.EE.Phasor" /> of the specified <paramref name="type" /> from the given polar values.
            </summary>
      <param name="type">Type of phasor, i.e., current or voltage.</param>
      <param name="angle">The <see cref="T:Gemstone.Units.Angle" /> component, in radians, of the <see cref="T:Gemstone.Numeric.ComplexNumber" />.</param>
      <param name="magnitude">The magnitude (or absolute value) component of the <see cref="T:Gemstone.Numeric.ComplexNumber" />.</param>
    </member>
    <member name="M:Gemstone.Numeric.EE.Phasor.#ctor(Gemstone.Numeric.EE.PhasorType,System.Double,System.Double)">
      <summary>
            Creates a <see cref="T:Gemstone.Numeric.EE.Phasor" /> of the specified <paramref name="type" /> from the given rectangular values. 
            </summary>
      <param name="type">Type of phasor, i.e., current or voltage.</param>
      <param name="real">The real component of the <see cref="T:Gemstone.Numeric.ComplexNumber" />.</param>
      <param name="imaginary">The imaginary component of the <see cref="T:Gemstone.Numeric.ComplexNumber" />.</param>
    </member>
    <member name="M:Gemstone.Numeric.EE.Phasor.CalculateActivePower(Gemstone.Numeric.EE.Phasor,Gemstone.Numeric.EE.Phasor)">
      <summary>
            Calculates active (or real) power P, i.e., total watts, from imaginary and real components of a voltage and current phasor.
            </summary>
      <param name="voltage">Voltage phasor.</param>
      <param name="current">Current phasor.</param>
      <returns>Calculated watts from imaginary and real components of specified <paramref name="voltage" /> and <paramref name="current" /> phasors.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="voltage" /> and <paramref name="current" /> must have proper <see cref="F:Gemstone.Numeric.EE.Phasor.Type" />.</exception>
    </member>
    <member name="M:Gemstone.Numeric.EE.Phasor.CalculateApparentPower(Gemstone.Numeric.EE.Phasor,Gemstone.Numeric.EE.Phasor)">
      <summary>
            Calculates apparent power |S|, i.e., magnitude of complex power, from a voltage and current phasor.
            </summary>
      <param name="voltage">Voltage phasor.</param>
      <param name="current">Current phasor.</param>
      <returns>Calculated complex volt-amperes magnitude from specified <paramref name="voltage" /> and <paramref name="current" /> phasors.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="voltage" /> and <paramref name="current" /> must have proper <see cref="F:Gemstone.Numeric.EE.Phasor.Type" />.</exception>
    </member>
    <member name="M:Gemstone.Numeric.EE.Phasor.CalculateComplexPower(Gemstone.Numeric.EE.Phasor,Gemstone.Numeric.EE.Phasor)">
      <summary>
            Calculates complex power S, i.e., total volt-amperes power vector, from a voltage and current phasor.
            </summary>
      <param name="voltage">Voltage phasor.</param>
      <param name="current">Current phasor.</param>
      <returns>Calculated complex volt-amperes from specified <paramref name="voltage" /> and <paramref name="current" /> phasors.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="voltage" /> and <paramref name="current" /> must have proper <see cref="F:Gemstone.Numeric.EE.Phasor.Type" />.</exception>
    </member>
    <member name="M:Gemstone.Numeric.EE.Phasor.CalculateReactivePower(Gemstone.Numeric.EE.Phasor,Gemstone.Numeric.EE.Phasor)">
      <summary>
            Calculates reactive power Q, i.e., total volt-amperes of reactive power, from imaginary and real components of a voltage and current phasor.
            </summary>
      <param name="voltage">Voltage phasor.</param>
      <param name="current">Current phasor.</param>
      <returns>Calculated vars from imaginary and real components of specified <paramref name="voltage" /> and <paramref name="current" /> phasors.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="voltage" /> and <paramref name="current" /> must have proper <see cref="F:Gemstone.Numeric.EE.Phasor.Type" />.</exception>
    </member>
    <member name="M:Gemstone.Numeric.EE.Phasor.CalculateRelativePhase(Gemstone.Numeric.EE.Phasor,Gemstone.Numeric.EE.Phasor)">
      <summary>
            Calculates phase φ of voltage relative to current, i.e., angle difference between current and voltage phasor.
            </summary>
      <param name="voltage">Voltage phasor.</param>
      <param name="current">Current phasor.</param>
      <returns>Calculated phase of specified <paramref name="voltage" /> phasor relative to specified <paramref name="current" /> phasor.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="voltage" /> and <paramref name="current" /> must have proper <see cref="F:Gemstone.Numeric.EE.Phasor.Type" />.</exception>
    </member>
    <member name="P:Gemstone.Numeric.EE.Phasor.Conjugate">
      <summary>
            Gets the complex conjugate of this <see cref="T:Gemstone.Numeric.EE.Phasor" />.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.EE.Phasor.Equals(Gemstone.Numeric.EE.Phasor)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified Phasor value.
            </summary>
      <param name="obj">A <see cref="T:Gemstone.Numeric.EE.Phasor" /> to compare to this instance.</param>
      <returns>
            True if <paramref name="obj" /> has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Numeric.EE.Phasor.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if <paramref name="obj" /> is an instance of Phasor and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Numeric.EE.Phasor.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:Gemstone.Numeric.EE.Phasor.op_Addition(Gemstone.Numeric.EE.Phasor,Gemstone.Numeric.EE.Phasor)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="phasor1">Left hand operand.</param>
      <param name="phasor2">Right hand operand.</param>
      <returns>ComplexNumber representing the result of the addition operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.EE.Phasor.op_Division(Gemstone.Numeric.EE.Phasor,Gemstone.Numeric.EE.Phasor)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="phasor1">Left hand operand.</param>
      <param name="phasor2">Right hand operand.</param>
      <returns>ComplexNumber representing the result of the division operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.EE.Phasor.op_Equality(Gemstone.Numeric.EE.Phasor,Gemstone.Numeric.EE.Phasor)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="phasor1">Left hand operand.</param>
      <param name="phasor2">Right hand operand.</param>
      <returns>Boolean representing the result of the addition operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.EE.Phasor.op_Exponent(Gemstone.Numeric.EE.Phasor,System.Double)">
      <summary>
             Returns result of first value raised to power of second value.
             </summary>
      <param name="z">Phasor to be raised to power <paramref name="y" />.</param>
      <param name="y">Power to raise <see cref="T:Gemstone.Numeric.EE.Phasor" /><paramref name="z" />.</param>
      <returns>Phasor representing the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.EE.Phasor.op_Implicit(Gemstone.Numeric.EE.Phasor)~Gemstone.Numeric.ComplexNumber">
      <summary>
            Implicitly converts a <see cref="T:Gemstone.Numeric.EE.Phasor" /> to a <see cref="T:Gemstone.Numeric.ComplexNumber" />.
            </summary>
      <param name="phasor">Operand.</param>
      <returns>ComplexNumber representing the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.EE.Phasor.op_Implicit(Gemstone.Numeric.EE.Phasor)~System.Numerics.Complex">
      <summary>
            Implicitly converts a <see cref="T:Gemstone.Numeric.EE.Phasor" /> to a .NET <see cref="T:System.Numerics.Complex" /> value.
            </summary>
      <param name="phasor">Operand.</param>
      <returns>ComplexNumber representing the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.EE.Phasor.op_Inequality(Gemstone.Numeric.EE.Phasor,Gemstone.Numeric.EE.Phasor)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="phasor1">Left hand operand.</param>
      <param name="phasor2">Right hand operand.</param>
      <returns>Boolean representing the result of the inequality operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.EE.Phasor.op_Multiply(Gemstone.Numeric.EE.Phasor,Gemstone.Numeric.EE.Phasor)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="phasor1">Left hand operand.</param>
      <param name="phasor2">Right hand operand.</param>
      <returns>ComplexNumber representing the result of the multiplication operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.EE.Phasor.op_Subtraction(Gemstone.Numeric.EE.Phasor,Gemstone.Numeric.EE.Phasor)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="phasor1">Left hand operand.</param>
      <param name="phasor2">Right hand operand.</param>
      <returns>ComplexNumber representing the result of the subtraction operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.EE.Phasor.op_UnaryNegation(Gemstone.Numeric.EE.Phasor)">
      <summary>
            Returns the negated value.
            </summary>
      <param name="z">Left hand operand.</param>
      <returns>Phasor representing the result of the unary negation operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.EE.Phasor.Pow(Gemstone.Numeric.EE.Phasor,System.Double)">
      <summary>
             Returns specified <see cref="T:Gemstone.Numeric.EE.Phasor" /> raised to the specified power.
            </summary>
      <param name="z">Phasor to be raised to power <paramref name="y" />.</param>
      <param name="y">Power to raise <see cref="T:Gemstone.Numeric.EE.Phasor" /><paramref name="z" />.</param>
      <returns>Phasor representing the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Numeric.EE.Phasor.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this <see cref="T:Gemstone.Numeric.ComplexNumber" /> instance.
            </returns>
    </member>
    <member name="F:Gemstone.Numeric.EE.Phasor.Type">
      <summary>
            Phasor type.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.Phasor.Value">
      <summary>
            Phasor value.
            </summary>
    </member>
    <member name="T:Gemstone.Numeric.EE.PhasorType">
      <summary>
            Phasor types enumeration.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.PhasorType.Voltage">
      <summary>
            Voltage phasor.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.PhasorType.Current">
      <summary>
            Current phasor.
            </summary>
    </member>
    <member name="T:Gemstone.Numeric.EE.SignalKind">
      <summary>
            Fundamental signal type enumeration for common EE measurements that represents a kind of signal, not an explicit type.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalKind.Angle">
      <summary>
            Phase angle.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalKind.Magnitude">
      <summary>
            Phase magnitude.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalKind.Frequency">
      <summary>
            Line frequency.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalKind.DfDt">
      <summary>
            Frequency delta over time (dF/dt).
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalKind.Status">
      <summary>
            Status flags.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalKind.Digital">
      <summary>
            Digital value.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalKind.Analog">
      <summary>
            Analog value.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalKind.Calculation">
      <summary>
            Calculated value.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalKind.Statistic">
      <summary>
            Statistical value.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalKind.Alarm">
      <summary>
            Alarm value.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalKind.Quality">
      <summary>
            Quality flags.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalKind.Unknown">
      <summary>
            Undetermined signal type.
            </summary>
    </member>
    <member name="T:Gemstone.Numeric.EE.SignalKindExtensions">
      <summary>
            Defines extension functions for the <see cref="T:Gemstone.Numeric.EE.SignalKind" /> enumeration.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.EE.SignalKindExtensions.GetAcronym(Gemstone.Numeric.EE.SignalKind)">
      <summary>
            Gets the acronym for the specified <see cref="T:Gemstone.Numeric.EE.SignalKind" />.
            </summary>
      <param name="signal">
        <see cref="T:Gemstone.Numeric.EE.SignalKind" /> to convert to an acronym.</param>
      <returns>The acronym for the specified <see cref="T:Gemstone.Numeric.EE.SignalKind" />.</returns>
    </member>
    <member name="M:Gemstone.Numeric.EE.SignalKindExtensions.ParseSignalKind(System.String)">
      <summary>
            Gets the <see cref="T:Gemstone.Numeric.EE.SignalKind" /> for the specified <paramref name="acronym" />.
            </summary>
      <param name="acronym">Acronym of the desired <see cref="T:Gemstone.Numeric.EE.SignalKind" />.</param>
      <returns>The <see cref="T:Gemstone.Numeric.EE.SignalKind" /> for the specified <paramref name="acronym" />.</returns>
    </member>
    <member name="T:Gemstone.Numeric.EE.SignalReference">
      <summary>
            Represents a signal that can be referenced by its constituent components.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.EE.SignalReference.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:Gemstone.Numeric.EE.SignalReference" />.
            </summary>
      <param name="signal">
        <see cref="T:System.String" /> representation of this <see cref="T:Gemstone.Numeric.EE.SignalReference" />.</param>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalReference.Acronym">
      <summary>
            Gets or sets the acronym of this <see cref="T:Gemstone.Numeric.EE.SignalReference" />.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalReference.CellIndex">
      <summary>
            Gets or sets the cell index, if applicable, of this <see cref="T:Gemstone.Numeric.EE.SignalReference" />.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.EE.SignalReference.CompareTo(Gemstone.Numeric.EE.SignalReference)">
      <summary>
            Compares the current object with another object of the same type.
            </summary>
      <param name="other">Another <see cref="T:Gemstone.Numeric.EE.SignalReference" /> to compare with this <see cref="T:Gemstone.Numeric.EE.SignalReference" />.</param>
      <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.</returns>
    </member>
    <member name="M:Gemstone.Numeric.EE.SignalReference.CompareTo(System.Object)">
      <summary>
            Compares the current object with another object of the same type.
            </summary>
      <param name="obj">An object to compare with this <see cref="T:Gemstone.Numeric.EE.SignalReference" />.</param>
      <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.</returns>
      <exception cref="T:System.ArgumentException">Object is not a <see cref="T:Gemstone.Numeric.EE.SignalReference" />.</exception>
    </member>
    <member name="M:Gemstone.Numeric.EE.SignalReference.Equals(Gemstone.Numeric.EE.SignalReference)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Numeric.EE.SignalReference.Equals(System.Object)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="obj">An object to compare with this object.</param>
      <returns>
        <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">Object is not a <see cref="T:Gemstone.Numeric.EE.SignalReference" />.</exception>
    </member>
    <member name="M:Gemstone.Numeric.EE.SignalReference.GetHashCode">
      <summary>
            Returns the hash code for this <see cref="T:Gemstone.Numeric.EE.SignalReference" />.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalReference.Index">
      <summary>
            Gets or sets the signal index of this <see cref="T:Gemstone.Numeric.EE.SignalReference" />.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalReference.Kind">
      <summary>
            Gets or sets the <see cref="T:Gemstone.Numeric.EE.SignalKind" /> of this <see cref="T:Gemstone.Numeric.EE.SignalReference" />.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.EE.SignalReference.op_Equality(Gemstone.Numeric.EE.SignalReference,Gemstone.Numeric.EE.SignalReference)">
      <summary>
            Compares two <see cref="T:Gemstone.Numeric.EE.SignalReference" /> values for equality.
            </summary>
      <param name="signal1">A <see cref="T:Gemstone.Numeric.EE.SignalReference" /> left hand operand.</param>
      <param name="signal2">A <see cref="T:Gemstone.Numeric.EE.SignalReference" /> right hand operand.</param>
      <returns>A boolean representing the result.</returns>
    </member>
    <member name="M:Gemstone.Numeric.EE.SignalReference.op_GreaterThan(Gemstone.Numeric.EE.SignalReference,Gemstone.Numeric.EE.SignalReference)">
      <summary>
            Returns true if left <see cref="T:Gemstone.Numeric.EE.SignalReference" /> value is greater than right <see cref="T:Gemstone.Numeric.EE.SignalReference" /> value.
            </summary>
      <param name="signal1">A <see cref="T:Gemstone.Numeric.EE.SignalReference" /> left hand operand.</param>
      <param name="signal2">A <see cref="T:Gemstone.Numeric.EE.SignalReference" /> right hand operand.</param>
      <returns>A boolean representing the result.</returns>
    </member>
    <member name="M:Gemstone.Numeric.EE.SignalReference.op_GreaterThanOrEqual(Gemstone.Numeric.EE.SignalReference,Gemstone.Numeric.EE.SignalReference)">
      <summary>
            Returns true if left <see cref="T:Gemstone.Numeric.EE.SignalReference" /> value is greater than or equal to right <see cref="T:Gemstone.Numeric.EE.SignalReference" /> value.
            </summary>
      <param name="signal1">A <see cref="T:Gemstone.Numeric.EE.SignalReference" /> left hand operand.</param>
      <param name="signal2">A <see cref="T:Gemstone.Numeric.EE.SignalReference" /> right hand operand.</param>
      <returns>A boolean representing the result.</returns>
    </member>
    <member name="M:Gemstone.Numeric.EE.SignalReference.op_Inequality(Gemstone.Numeric.EE.SignalReference,Gemstone.Numeric.EE.SignalReference)">
      <summary>
            Compares two <see cref="T:Gemstone.Numeric.EE.SignalReference" /> values for inequality.
            </summary>
      <param name="signal1">A <see cref="T:Gemstone.Numeric.EE.SignalReference" /> left hand operand.</param>
      <param name="signal2">A <see cref="T:Gemstone.Numeric.EE.SignalReference" /> right hand operand.</param>
      <returns>A boolean representing the result.</returns>
    </member>
    <member name="M:Gemstone.Numeric.EE.SignalReference.op_LessThan(Gemstone.Numeric.EE.SignalReference,Gemstone.Numeric.EE.SignalReference)">
      <summary>
            Returns true if left <see cref="T:Gemstone.Numeric.EE.SignalReference" /> value is less than right <see cref="T:Gemstone.Numeric.EE.SignalReference" /> value.
            </summary>
      <param name="signal1">A <see cref="T:Gemstone.Numeric.EE.SignalReference" /> left hand operand.</param>
      <param name="signal2">A <see cref="T:Gemstone.Numeric.EE.SignalReference" /> right hand operand.</param>
      <returns>A boolean representing the result.</returns>
    </member>
    <member name="M:Gemstone.Numeric.EE.SignalReference.op_LessThanOrEqual(Gemstone.Numeric.EE.SignalReference,Gemstone.Numeric.EE.SignalReference)">
      <summary>
            Returns true if left <see cref="T:Gemstone.Numeric.EE.SignalReference" /> value is less than or equal to right <see cref="T:Gemstone.Numeric.EE.SignalReference" /> value.
            </summary>
      <param name="signal1">A <see cref="T:Gemstone.Numeric.EE.SignalReference" /> left hand operand.</param>
      <param name="signal2">A <see cref="T:Gemstone.Numeric.EE.SignalReference" /> right hand operand.</param>
      <returns>A boolean representing the result.</returns>
    </member>
    <member name="M:Gemstone.Numeric.EE.SignalReference.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:Gemstone.Numeric.EE.SignalReference" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:Gemstone.Numeric.EE.SignalReference" />.</returns>
    </member>
    <member name="M:Gemstone.Numeric.EE.SignalReference.ToString(System.String,Gemstone.Numeric.EE.SignalKind)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the specified <paramref name="acronym" /> and <see cref="T:Gemstone.Numeric.EE.SignalKind" />.
            </summary>
      <param name="acronym">Acronym portion of the desired <see cref="T:System.String" /> representation.</param>
      <param name="type">
        <see cref="T:Gemstone.Numeric.EE.SignalKind" /> portion of the desired <see cref="T:System.String" /> representation.</param>
      <returns>A <see cref="T:System.String" /> that represents the specified <paramref name="acronym" /> and <see cref="T:Gemstone.Numeric.EE.SignalKind" />.</returns>
    </member>
    <member name="M:Gemstone.Numeric.EE.SignalReference.ToString(System.String,Gemstone.Numeric.EE.SignalKind,System.Int32)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the specified <paramref name="acronym" />, <see cref="T:Gemstone.Numeric.EE.SignalKind" /> and <paramref name="index" />.
            </summary>
      <param name="acronym">Acronym portion of the desired <see cref="T:System.String" /> representation.</param>
      <param name="type">
        <see cref="T:Gemstone.Numeric.EE.SignalKind" /> portion of the desired <see cref="T:System.String" /> representation.</param>
      <param name="index">Index of <see cref="T:Gemstone.Numeric.EE.SignalKind" /> portion of the desired <see cref="T:System.String" /> representation.</param>
      <returns>A <see cref="T:System.String" /> that represents the specified <paramref name="acronym" />, <see cref="T:Gemstone.Numeric.EE.SignalKind" /> and <paramref name="index" />.</returns>
    </member>
    <member name="T:Gemstone.Numeric.EE.SignalType">
      <summary>
            Fundamental signal type enumeration for common EE measurements that represents an explicit type of signal.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalType.IPHM">
      <summary>
            Current phase magnitude.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalType.IPHA">
      <summary>
            Current phase angle.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalType.VPHM">
      <summary>
            Voltage phase magnitude.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalType.VPHA">
      <summary>
            Voltage phase angle.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalType.FREQ">
      <summary>
            Frequency.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalType.DFDT">
      <summary>
            Frequency delta (dF/dt).
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalType.ALOG">
      <summary>
            Analog value.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalType.FLAG">
      <summary>
            Status flags.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalType.DIGI">
      <summary>
            Digital values.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalType.CALC">
      <summary>
            Calculated value.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalType.STAT">
      <summary>
            Statistical value.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalType.ALRM">
      <summary>
            Alarm value.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalType.QUAL">
      <summary>
            Quality flags.
            </summary>
    </member>
    <member name="F:Gemstone.Numeric.EE.SignalType.NONE">
      <summary>
            Undefined signal.
            </summary>
    </member>
    <member name="T:Gemstone.Numeric.EE.SignalTypeExtensions">
      <summary>
            Defines extension functions for the <see cref="T:Gemstone.Numeric.EE.SignalType" /> enumeration.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.EE.SignalTypeExtensions.GetFormattedName(Gemstone.Numeric.EE.SignalType)">
      <summary>
            Returns display friendly signal type name.
            </summary>
      <param name="signalType">
        <see cref="T:Gemstone.Numeric.EE.SignalType" /> to return display name for.</param>
      <returns>Friendly protocol display name for specified <paramref name="signalType" />.</returns>
    </member>
    <member name="T:Gemstone.Numeric.Int24Extensions.BigEndian">
      <summary>
            Defines methods related to <see cref="T:Gemstone.Numeric.Int24" /> big endian operations.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.BigEndian.CopyBytes(Gemstone.Numeric.Int24,System.Byte*)">
      <summary>
            Copies the specified 24-bit signed integer value as an array of 3 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.BigEndian.CopyBytes(Gemstone.Numeric.Int24,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 24-bit signed integer value as an array of 3 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.BigEndian.GetBytes(Gemstone.Numeric.Int24)">
      <summary>
            Returns the specified 24-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 3.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.BigEndian.ToInt24(System.Byte*)">
      <summary>
            Returns a 24-bit signed integer converted from three bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 24-bit signed integer formed by three bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.BigEndian.ToInt24(System.Byte[],System.Int32)">
      <summary>
            Returns a 24-bit signed integer converted from three bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 24-bit signed integer formed by three bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="T:Gemstone.Numeric.Int24Extensions.BitExtensions">
      <summary>
            Defines extension methods related to <see cref="T:Gemstone.Numeric.Int24" /> bit operations.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.BitExtensions.BitRotL(Gemstone.Numeric.Int24,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.BitExtensions.BitRotR(Gemstone.Numeric.Int24,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.BitExtensions.CheckBits(Gemstone.Numeric.Int24,Gemstone.Bits)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.BitExtensions.CheckBits(Gemstone.Numeric.Int24,Gemstone.Bits,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.BitExtensions.CheckBits(Gemstone.Numeric.Int24,Gemstone.Numeric.Int24)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.BitExtensions.CheckBits(Gemstone.Numeric.Int24,Gemstone.Numeric.Int24,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.BitExtensions.ClearBits(Gemstone.Numeric.Int24,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to clear.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.Int24" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.BitExtensions.ClearBits(Gemstone.Numeric.Int24,Gemstone.Numeric.Int24)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to clear.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.Int24" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.BitExtensions.GetMaskedValue(Gemstone.Numeric.Int24,Gemstone.Bits)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.Int24" /> value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.BitExtensions.GetMaskedValue(Gemstone.Numeric.Int24,Gemstone.Numeric.Int24)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.Int24" /> value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.BitExtensions.SetBits(Gemstone.Numeric.Int24,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to set.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.Int24" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.BitExtensions.SetBits(Gemstone.Numeric.Int24,Gemstone.Numeric.Int24)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to set.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.Int24" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.BitExtensions.SetMaskedValue(Gemstone.Numeric.Int24,Gemstone.Bits,Gemstone.Numeric.Int24)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.Int24" /> value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.BitExtensions.SetMaskedValue(Gemstone.Numeric.Int24,Gemstone.Numeric.Int24,Gemstone.Numeric.Int24)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.Int24" /> value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.BitExtensions.ToggleBits(Gemstone.Numeric.Int24,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to toggle.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.Int24" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.BitExtensions.ToggleBits(Gemstone.Numeric.Int24,Gemstone.Numeric.Int24)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to toggle.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.Int24" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="T:Gemstone.Numeric.Int24Extensions.LittleEndian">
      <summary>
            Defines methods related to <see cref="T:Gemstone.Numeric.Int24" /> little endian operations.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.LittleEndian.CopyBytes(Gemstone.Numeric.Int24,System.Byte*)">
      <summary>
            Copies the specified 24-bit signed integer value as an array of 3 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.LittleEndian.CopyBytes(Gemstone.Numeric.Int24,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 24-bit signed integer value as an array of 3 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.LittleEndian.GetBytes(Gemstone.Numeric.Int24)">
      <summary>
            Returns the specified 24-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 3.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.LittleEndian.ToInt24(System.Byte*)">
      <summary>
            Returns a 24-bit signed integer converted from three bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 24-bit signed integer formed by three bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.Numeric.Int24Extensions.LittleEndian.ToInt24(System.Byte[],System.Int32)">
      <summary>
            Returns a 24-bit signed integer converted from three bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 24-bit signed integer formed by three bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="T:Gemstone.Numeric.Interpolation.DistanceFunc">
      <summary>
            Function definition for calculating the distance between two points.
            </summary>
      <param name="x1">The x-coordinate of the first point.</param>
      <param name="y1">The y-coordinate of the first point.</param>
      <param name="x2">The x-coordinate of the second point.</param>
      <param name="y2">The y-coordinate of the second point.</param>
      <returns>The distance between the two given points.</returns>
    </member>
    <member name="T:Gemstone.Numeric.Interpolation.IDWFunc">
      <summary>
            Function definition for the inverse distance weighting algorithm.
            </summary>
      <param name="x">The x-coordinate of the point at which the value is to be calculated.</param>
      <param name="y">The y-coordinate of the point at which the value is to be calculated.</param>
      <returns>The calculated value at the given location.</returns>
    </member>
    <member name="T:Gemstone.Numeric.Interpolation.InverseDistanceWeightingFunction">
      <summary>
            Represents a function for calculating values
            at given coordinates based on sparse data sets.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.Interpolation.InverseDistanceWeightingFunction.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.Numeric.Interpolation.InverseDistanceWeightingFunction</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Gemstone.Numeric.Interpolation.InverseDistanceWeightingFunction.DefaultDistanceFunction(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Calculates the distance between two points.
            </summary>
      <param name="x1">The x-coordinate of the first point.</param>
      <param name="y1">The y-coordinate of the first point.</param>
      <param name="x2">The x-coordinate of the second point.</param>
      <param name="y2">The y-coordinate of the second point.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Numeric.Interpolation.InverseDistanceWeightingFunction.DefaultDistanceFunction(System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Gemstone.Numeric.Interpolation.InverseDistanceWeightingFunction.DistanceFunction">
      <summary>
            Gets the function to be used to calculate the distance between two points.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.Interpolation.InverseDistanceWeightingFunction.op_Implicit(Gemstone.Numeric.Interpolation.InverseDistanceWeightingFunction)~Gemstone.Numeric.Interpolation.IDWFunc">
      <summary>
            Converts the <see cref="T:Gemstone.Numeric.Interpolation.InverseDistanceWeightingFunction" />
            object to an <see cref="T:Gemstone.Numeric.Interpolation.IDWFunc" /> to start converting values.
            </summary>
      <param name="func">The inverse distance weighting function to be converted.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Numeric.Interpolation.InverseDistanceWeightingFunction.op_Implicit(Gemstone.Numeric.Interpolation.InverseDistanceWeightingFunction)~Gemstone.Numeric.Interpolation.IDWFunc</parameter>
          </include>
        </markup>
      </returns>
      <exception cref="T:System.InvalidOperationException">
        <para>the number of x-coordinates does not equal the number of y-coordinates</para>
        <para>- or -</para>
        <para>the number of coordinates does not equal the number of values</para>
      </exception>
    </member>
    <member name="P:Gemstone.Numeric.Interpolation.InverseDistanceWeightingFunction.Power">
      <summary>
            Gets the power applied to the inverse distance to control the speed of value's decay.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.Interpolation.InverseDistanceWeightingFunction.SetDistanceFunction(Gemstone.Numeric.Interpolation.DistanceFunc)">
      <summary>
            Sets the function to be used to calculate the distance between two points.
            </summary>
      <param name="distanceFunction">The function used to calculate distance between two points.</param>
      <returns>A reference to the inverse distance weighting function.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Interpolation.InverseDistanceWeightingFunction.SetPower(System.Double)">
      <summary>
            Sets the power applied to the inverse distance to control the speed of value's decay.
            </summary>
      <param name="power">The power applied to the inverse of the distance.</param>
      <returns>A reference to the inverse distance weighting function.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Interpolation.InverseDistanceWeightingFunction.SetValues(System.Double[])">
      <summary>
            Sets the collection of values of points at which the values are known.
            </summary>
      <param name="values">The values of points at which the values are known.</param>
      <returns>A reference to the inverse distance weighting function.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Interpolation.InverseDistanceWeightingFunction.SetXCoordinates(System.Double[])">
      <summary>
            Sets the collection of x-coordinates of points at which the values are known.
            </summary>
      <param name="xCoordinates">The x-coordinates of points at which the values are known.</param>
      <returns>A reference to the inverse distance weighting function.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Interpolation.InverseDistanceWeightingFunction.SetYCoordinates(System.Double[])">
      <summary>
            Sets the collection of y-coordinates of points at which the values are known.
            </summary>
      <param name="yCoordinates">The y-coordinates of points at which the values are known.</param>
      <returns>A reference to the inverse distance weighting function.</returns>
    </member>
    <member name="P:Gemstone.Numeric.Interpolation.InverseDistanceWeightingFunction.Values">
      <summary>
            Gets the collection of values of points at which the values are known.
            </summary>
    </member>
    <member name="P:Gemstone.Numeric.Interpolation.InverseDistanceWeightingFunction.XCoordinates">
      <summary>
            Gets the collection of x-coordinates of points at which the values are known.
            </summary>
    </member>
    <member name="P:Gemstone.Numeric.Interpolation.InverseDistanceWeightingFunction.YCoordinates">
      <summary>
            Gets the collection of y-coordinates of points at which the values are known.
            </summary>
    </member>
    <member name="T:Gemstone.Numeric.Interpolation.PiecewiseLinearFunction">
      <summary>
            Represents a piecewise linear function for
            calculating values between pivot points.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.Interpolation.PiecewiseLinearFunction.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.Numeric.Interpolation.PiecewiseLinearFunction</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Gemstone.Numeric.Interpolation.PiecewiseLinearFunction.Domain">
      <summary>
            Gets the x-values of the pivot points in the piecewise linear function.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.Interpolation.PiecewiseLinearFunction.op_Implicit(Gemstone.Numeric.Interpolation.PiecewiseLinearFunction)~System.Func{System.Double,System.Double}">
      <summary>
            Converts the <see cref="T:Gemstone.Numeric.Interpolation.PiecewiseLinearFunction" /> object to a
            <see cref="T:System.Func`2" /> to start converting values.
            </summary>
      <param name="func">The piecewise linear function to be converted.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Numeric.Interpolation.PiecewiseLinearFunction.op_Implicit(Gemstone.Numeric.Interpolation.PiecewiseLinearFunction)~System.Func{System.Double,System.Double}</parameter>
          </include>
        </markup>
      </returns>
      <exception cref="T:System.InvalidOperationException">
        <para>the size of the domain does not equal the size of the range</para>
        <para>- or -</para>
        <para>less than two pivot points are defined</para>
      </exception>
    </member>
    <member name="P:Gemstone.Numeric.Interpolation.PiecewiseLinearFunction.Range">
      <summary>
            Gets the y-values of the pivot points in the piecewise linear function.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.Interpolation.PiecewiseLinearFunction.SetDomain(System.Double[])">
      <summary>
            Sets the x-values of the pivot points in the piecewise linear function.
            </summary>
      <param name="domain">The x-values of the pivot points.</param>
      <returns>A reference to the piecewise linear function.</returns>
    </member>
    <member name="M:Gemstone.Numeric.Interpolation.PiecewiseLinearFunction.SetRange(System.Double[])">
      <summary>
            Sets the y-values of the pivot points in the piecewise linear function.
            </summary>
      <param name="range">The y-values of the pivot points.</param>
      <returns>A reference to the piecewise linear function.</returns>
    </member>
    <member name="T:Gemstone.Numeric.Random.DiscreteUniformRandomNumber">
      <summary>
             Discrete Pseudo-Random number distributed across Uniform(lower limit, upper limit)
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.Random.DiscreteUniformRandomNumber.#ctor(Gemstone.Numeric.Random.UniformRandomNumber,System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.Numeric.Random.DiscreteUniformRandomNumber</parameter>
          </include>
        </markup>
      </summary>
      <param name="uniform">
        <see cref="T:Gemstone.Numeric.Random.UniformRandomNumber" />Uniform(0,1)</param>
      <param name="upperLimit">Upper limit of distribution</param>
      <param name="lowerLimit">Lower limit of distribution</param>
    </member>
    <member name="P:Gemstone.Numeric.Random.DiscreteUniformRandomNumber.Value">
      <summary>
            Property holding the actual value of the Discrete Unif(lower limit, upper limit) random number.
            </summary>
    </member>
    <member name="T:Gemstone.Numeric.Random.DiscreteUniformRandomNumberGenerator">
      <summary>
            Generates Normal(mean,variance) distribution, full period cycle length &gt; 2 billion
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.Random.DiscreteUniformRandomNumberGenerator.#ctor(System.Int32,System.Double,System.Double)">
      <summary>
            Instantiates Normal distribution generator to Normal(mean,variance)
            </summary>
      <param name="seed">Seed value for Uniform generator</param>
      <param name="upperLimit">Upper limit of distribution</param>
      <param name="lowerLimit">Lower limit of distribution</param>
    </member>
    <member name="M:Gemstone.Numeric.Random.DiscreteUniformRandomNumberGenerator.Next">
      <summary>
            Gets next <see cref="T:Gemstone.Numeric.Random.DiscreteUniformRandomNumber" /> in the sequence
            </summary>
      <returns>
        <see cref="T:Gemstone.Numeric.Random.DiscreteUniformRandomNumber" />
      </returns>
    </member>
    <member name="M:Gemstone.Numeric.Random.DiscreteUniformRandomNumberGenerator.Next(System.Int32)">
      <summary>
            Gets the next n number of <see cref="T:Gemstone.Numeric.Random.DiscreteUniformRandomNumber" /></summary>
      <param name="number"></param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />
      </returns>
    </member>
    <member name="T:Gemstone.Numeric.Random.LogNormalRandomNumber">
      <summary>
            Pseudo-Random number distributed across LogNormal(mean,variance)
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.Random.LogNormalRandomNumber.#ctor(Gemstone.Numeric.Random.UniformRandomNumber,System.Double,System.Double,System.Double)">
      <summary>
            Transforms a Uniform(0,1) into a LogNormal(mean,variance)
            </summary>
      <param name="uniform">
        <see cref="T:Gemstone.Numeric.Random.UniformRandomNumber" />Uniform(0,1)</param>
      <param name="power">Power of the Log Normal distribution</param>
      <param name="mean">Mean of the Normal distribution</param>
      <param name="variance">Variance of the Normal distribution</param>
    </member>
    <member name="P:Gemstone.Numeric.Random.LogNormalRandomNumber.Value">
      <summary>
            Property holding the actual value of the LogNormal(mean,variance) random number.
            </summary>
    </member>
    <member name="T:Gemstone.Numeric.Random.LogNormalRandomNumberGenerator">
      <summary>
            Generates LogNormal(mean,variance) distribution, full period cycle length &gt; 2 billion
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.Random.LogNormalRandomNumberGenerator.#ctor(System.Int32,System.Double,System.Double,System.Double)">
      <summary>
            Instantiates Normal distribution generator to LogNormal(mean,variance)
            </summary>
      <param name="seed">Seed value for Uniform generator</param>
      <param name="power">Power of the Log Normal distribution</param>
      <param name="mean">Mean of the Normal distribution</param>
      <param name="variance">Variance of the Normal distribution</param>
    </member>
    <member name="M:Gemstone.Numeric.Random.LogNormalRandomNumberGenerator.Next">
      <summary>
            Gets next <see cref="T:Gemstone.Numeric.Random.LogNormalRandomNumber" /> in the sequence
            </summary>
      <returns>
        <see cref="T:Gemstone.Numeric.Random.LogNormalRandomNumber" />
      </returns>
    </member>
    <member name="M:Gemstone.Numeric.Random.LogNormalRandomNumberGenerator.Next(System.Int32)">
      <summary>
            Gets the next n number of <see cref="T:Gemstone.Numeric.Random.LogNormalRandomNumber" /></summary>
      <param name="number"></param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />
      </returns>
    </member>
    <member name="T:Gemstone.Numeric.Random.NormalRandomNumber">
      <summary>
            Pseudo-Random number distributed across Normal(mean,variance)
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.Random.NormalRandomNumber.#ctor(Gemstone.Numeric.Random.UniformRandomNumber,System.Double,System.Double)">
      <summary>
            Transforms a Uniform(0,1) into a Normal(mean,variance)
            </summary>
      <param name="uniform">
        <see cref="T:Gemstone.Numeric.Random.UniformRandomNumber" />Uniform(0,1)</param>
      <param name="mean">Mean of the Normal distribution</param>
      <param name="variance">Variance of the Normal distribution</param>
    </member>
    <member name="P:Gemstone.Numeric.Random.NormalRandomNumber.Value">
      <summary>
            Property holding the actual value of the Normal(mean,variance) random number.
            </summary>
    </member>
    <member name="T:Gemstone.Numeric.Random.NormalRandomNumberGenerator">
      <summary>
            Generates Normal(mean,variance) distribution, full period cycle length &gt; 2 billion
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.Random.NormalRandomNumberGenerator.#ctor(System.Int32,System.Double,System.Double)">
      <summary>
            Instantiates Normal distribution generator to Normal(mean,variance)
            </summary>
      <param name="seed">Seed value for Uniform generator</param>
      <param name="mean">Mean of the Normal distribution</param>
      <param name="variance">Variance of the Normal distribution</param>
    </member>
    <member name="M:Gemstone.Numeric.Random.NormalRandomNumberGenerator.Next">
      <summary>
            Gets next <see cref="T:Gemstone.Numeric.Random.NormalRandomNumber" /> in the sequence
            </summary>
      <returns>
        <see cref="T:Gemstone.Numeric.Random.NormalRandomNumber" />
      </returns>
    </member>
    <member name="M:Gemstone.Numeric.Random.NormalRandomNumberGenerator.Next(System.Int32)">
      <summary>
            Gets the next n number of <see cref="T:Gemstone.Numeric.Random.NormalRandomNumber" /></summary>
      <param name="number"></param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />
      </returns>
    </member>
    <member name="T:Gemstone.Numeric.Random.RandomNumberExtensions">
      <summary>
            Extension functions for Random number generation.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.Random.RandomNumberExtensions.ToDiscreteUniformDistribution(System.Collections.Generic.IEnumerable{Gemstone.Numeric.Random.UniformRandomNumber},System.Double,System.Double)">
      <summary>
            Linq extension function used to Transform an enumerable of <see cref="T:Gemstone.Numeric.Random.UniformRandomNumber" /> to an enumerable of <see cref="T:Gemstone.Numeric.Random.DiscreteUniformRandomNumber" /></summary>
      <param name="uniforms">enumerable of <see cref="T:Gemstone.Numeric.Random.UniformRandomNumber" /></param>
      <param name="upperLimit">Upper limit of distribution</param>
      <param name="lowerLimit">Lower limit of distribution</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Numeric.Random.RandomNumberExtensions.ToDiscreteUniformDistribution(System.Collections.Generic.IEnumerable{Gemstone.Numeric.Random.UniformRandomNumber},System.Double,System.Double)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.Numeric.Random.RandomNumberExtensions.ToLogNormalDistribution(System.Collections.Generic.IEnumerable{Gemstone.Numeric.Random.UniformRandomNumber},System.Double,System.Double,System.Double)">
      <summary>
            Linq extension function used to Transform an enumerable of <see cref="T:Gemstone.Numeric.Random.UniformRandomNumber" /> to an enumerable of <see cref="T:Gemstone.Numeric.Random.LogNormalRandomNumber" /></summary>
      <param name="uniforms">enumerable of <see cref="T:Gemstone.Numeric.Random.UniformRandomNumber" /></param>
      <param name="power">Power of the Log Normal distribution</param>
      <param name="mean">Mean of normal distribution</param>
      <param name="variance">Variance of normal distribution</param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />
      </returns>
    </member>
    <member name="M:Gemstone.Numeric.Random.RandomNumberExtensions.ToNormalDistribution(System.Collections.Generic.IEnumerable{Gemstone.Numeric.Random.UniformRandomNumber},System.Double,System.Double)">
      <summary>
            Linq extension function used to Transform an enumerable of <see cref="T:Gemstone.Numeric.Random.UniformRandomNumber" /> to an enumerable of <see cref="T:Gemstone.Numeric.Random.NormalRandomNumber" /></summary>
      <param name="uniforms">enumerable of <see cref="T:Gemstone.Numeric.Random.UniformRandomNumber" /></param>
      <param name="mean">Mean of normal distribution</param>
      <param name="variance">Variance of normal distribution</param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />
      </returns>
    </member>
    <member name="T:Gemstone.Numeric.Random.UniformRandomNumber">
      <summary>
            Pseudo-Random number distributed across the Uniform(0,1) distribution
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.Random.UniformRandomNumber.#ctor(System.Double)">
      <summary>
            Takes a <see cref="T:System.Double" /> between zero and 1 and sets the Value. 
            </summary>
      <param name="value">
        <see cref="T:System.Double" /> used to set Value.</param>
    </member>
    <member name="P:Gemstone.Numeric.Random.UniformRandomNumber.Value">
      <summary>
            Property holding the actual value of the Uniform random number.
            </summary>
    </member>
    <member name="T:Gemstone.Numeric.Random.UniformRandomNumberGenerator">
      <summary>
            Based on 16807 (BFS 1987) LCG implementation, full period cycle length &gt; 2 billion, generates Uniform(0,1) distribution
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.Random.UniformRandomNumberGenerator.#ctor(System.Int32)">
      <summary>
            Instantiates generator with given seed
            </summary>
      <param name="seed">
        <see cref="T:System.Int32" /> value used to set generator seed.</param>
    </member>
    <member name="M:Gemstone.Numeric.Random.UniformRandomNumberGenerator.Next">
      <summary>
            Gets next <see cref="T:Gemstone.Numeric.Random.UniformRandomNumber" /> in the sequence
            </summary>
      <returns>
        <see cref="T:Gemstone.Numeric.Random.UniformRandomNumber" />
      </returns>
    </member>
    <member name="M:Gemstone.Numeric.Random.UniformRandomNumberGenerator.Next(System.Int32)">
      <summary>
            Gets the next n number of <see cref="T:Gemstone.Numeric.Random.UniformRandomNumber" /></summary>
      <param name="number"></param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />
      </returns>
    </member>
    <member name="T:Gemstone.Numeric.UInt24Extensions.BigEndian">
      <summary>
            Defines methods related to <see cref="T:Gemstone.Numeric.UInt24" /> big endian operations.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.BigEndian.CopyBytes(Gemstone.Numeric.UInt24,System.Byte*)">
      <summary>
            Copies the specified 24-bit unsigned integer value as an array of 3 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.BigEndian.CopyBytes(Gemstone.Numeric.UInt24,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 24-bit unsigned integer value as an array of 3 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.BigEndian.GetBytes(Gemstone.Numeric.UInt24)">
      <summary>
            Returns the specified 24-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 3.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.BigEndian.ToUInt24(System.Byte*)">
      <summary>
            Returns a 24-bit unsigned integer converted from three bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 24-bit unsigned integer formed by three bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.BigEndian.ToUInt24(System.Byte[],System.Int32)">
      <summary>
            Returns a 24-bit unsigned integer converted from three bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 24-bit unsigned integer formed by three bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="T:Gemstone.Numeric.UInt24Extensions.BitExtensions">
      <summary>
            Defines extension methods related to <see cref="T:Gemstone.Numeric.UInt24" /> bit operations.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.BitExtensions.BitRotL(Gemstone.Numeric.UInt24,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.BitExtensions.BitRotR(Gemstone.Numeric.UInt24,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.BitExtensions.CheckBits(Gemstone.Numeric.UInt24,Gemstone.Bits)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.BitExtensions.CheckBits(Gemstone.Numeric.UInt24,Gemstone.Bits,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.BitExtensions.CheckBits(Gemstone.Numeric.UInt24,Gemstone.Numeric.UInt24)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.BitExtensions.CheckBits(Gemstone.Numeric.UInt24,Gemstone.Numeric.UInt24,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.BitExtensions.ClearBits(Gemstone.Numeric.UInt24,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to clear.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.BitExtensions.ClearBits(Gemstone.Numeric.UInt24,Gemstone.Numeric.UInt24)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to clear.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.BitExtensions.GetMaskedValue(Gemstone.Numeric.UInt24,Gemstone.Bits)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.BitExtensions.GetMaskedValue(Gemstone.Numeric.UInt24,Gemstone.Numeric.UInt24)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.BitExtensions.SetBits(Gemstone.Numeric.UInt24,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to set.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.BitExtensions.SetBits(Gemstone.Numeric.UInt24,Gemstone.Numeric.UInt24)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to set.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.BitExtensions.SetMaskedValue(Gemstone.Numeric.UInt24,Gemstone.Bits,Gemstone.Numeric.UInt24)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.BitExtensions.SetMaskedValue(Gemstone.Numeric.UInt24,Gemstone.Numeric.UInt24,Gemstone.Numeric.UInt24)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.BitExtensions.ToggleBits(Gemstone.Numeric.UInt24,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to toggle.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.BitExtensions.ToggleBits(Gemstone.Numeric.UInt24,Gemstone.Numeric.UInt24)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to toggle.</param>
      <returns>
        <see cref="T:Gemstone.Numeric.UInt24" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="T:Gemstone.Numeric.UInt24Extensions.LittleEndian">
      <summary>
            Defines methods related to <see cref="T:Gemstone.Numeric.UInt24" /> little endian operations.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.LittleEndian.CopyBytes(Gemstone.Numeric.UInt24,System.Byte*)">
      <summary>
            Copies the specified 24-bit unsigned integer value as an array of 3 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.LittleEndian.CopyBytes(Gemstone.Numeric.UInt24,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 24-bit unsigned integer value as an array of 3 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.LittleEndian.GetBytes(Gemstone.Numeric.UInt24)">
      <summary>
            Returns the specified 24-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 3.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.LittleEndian.ToUInt24(System.Byte*)">
      <summary>
            Returns a 24-bit unsigned integer converted from three bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 24-bit unsigned integer formed by three bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.Numeric.UInt24Extensions.LittleEndian.ToUInt24(System.Byte[],System.Int32)">
      <summary>
            Returns a 24-bit unsigned integer converted from three bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 24-bit unsigned integer formed by three bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="T:Gemstone.Numeric.UnitExtensions.UnitExtensions">
      <summary>
            Defines extension functions related to unit structures.
            </summary>
    </member>
    <member name="M:Gemstone.Numeric.UnitExtensions.UnitExtensions.Average(System.Collections.Generic.IEnumerable{Gemstone.Units.Angle})">
      <summary>
            Calculates an average of the specified sequence of <see cref="T:Gemstone.Units.Angle" /> values.
            </summary>
      <param name="source">Sequence of <see cref="T:Gemstone.Units.Angle" /> values over which to calculate average.</param>
      <returns>Average of the specified sequence of <see cref="T:Gemstone.Units.Angle" /> values.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UnitExtensions.UnitExtensions.ToRange(Gemstone.Units.Angle,Gemstone.Units.Angle,System.Boolean)">
      <summary>
            Gets the equivalent angle moved within the range of <paramref name="minValue" />
            and <paramref name="minValue" /> + 2.0 * <see cref="F:System.Math.PI" />.
            </summary>
      <param name="angle">Source angle.</param>
      <param name="minValue">The minimum value of the range.</param>
      <param name="inclusive">Indicates whether the range is inclusive of the minimum value.</param>
      <returns>The equivalent angle within the specified range.</returns>
    </member>
    <member name="M:Gemstone.Numeric.UnitExtensions.UnitExtensions.Unwrap(System.Collections.Generic.IEnumerable{Gemstone.Units.Angle})">
      <summary>
            Unwraps a set of <see cref="T:Gemstone.Units.Angle" /> values so a comparable mathematical operation can be applied.
            </summary>
      <param name="source">Sequence of <see cref="T:Gemstone.Units.Angle" /> values to unwrap.</param>
      <returns>Unwrapped set of <see cref="T:Gemstone.Units.Angle" /> values.</returns>
    </member>
  </members>
</doc>