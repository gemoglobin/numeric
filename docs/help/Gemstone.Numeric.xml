<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>gemstone.numeric</name>
  </assembly>
  <members>
    <member name="T:gemstone.numeric.BigEndian">
      <summary>
            Defines a set of big-endian byte order interoperability functions.
            </summary>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(gemstone.numeric.Int24,System.Byte*)">
      <summary>
            Copies the specified 24-bit signed integer value as an array of 3 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(gemstone.numeric.Int24,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 24-bit signed integer value as an array of 3 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(gemstone.numeric.UInt24,System.Byte*)">
      <summary>
            Copies the specified 24-bit unsigned integer value as an array of 3 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(gemstone.numeric.UInt24,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 24-bit unsigned integer value as an array of 3 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(System.Boolean,System.Byte*)">
      <summary>
            Copies the specified <see cref="T:System.Boolean" /> value as an array of 1 byte in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(System.Boolean,System.Byte[],System.Int32)">
      <summary>
            Copies the specified <see cref="T:System.Boolean" /> value as an array of 1 byte in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(System.Char,System.Byte*)">
      <summary>
            Copies the specified Unicode character value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The Unicode character value to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(System.Char,System.Byte[],System.Int32)">
      <summary>
            Copies the specified Unicode character value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The Unicode character value to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(System.Decimal,System.Byte*)">
      <summary>
            Copies the specified 128-bit decimal value as an array of 16 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(System.Decimal,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 128-bit decimal value as an array of 16 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(System.Double,System.Byte*)">
      <summary>
            Copies the specified double-precision floating point value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(System.Double,System.Byte[],System.Int32)">
      <summary>
            Copies the specified double-precision floating point value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(System.Int16,System.Byte*)">
      <summary>
            Copies the specified 16-bit signed integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(System.Int16,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 16-bit signed integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(System.Int32,System.Byte*)">
      <summary>
            Copies the specified 32-bit signed integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(System.Int32,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 32-bit signed integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(System.Int64,System.Byte*)">
      <summary>
            Copies the specified 64-bit signed integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(System.Int64,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 64-bit signed integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(System.Single,System.Byte*)">
      <summary>
            Copies the specified single-precision floating point value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(System.Single,System.Byte[],System.Int32)">
      <summary>
            Copies the specified single-precision floating point value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(System.UInt16,System.Byte*)">
      <summary>
            Copies the specified 16-bit unsigned integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(System.UInt16,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 16-bit unsigned integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(System.UInt32,System.Byte*)">
      <summary>
            Copies the specified 32-bit unsigned integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(System.UInt32,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 32-bit unsigned integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(System.UInt64,System.Byte*)">
      <summary>
            Copies the specified 64-bit unsigned integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes(System.UInt64,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 64-bit unsigned integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes``1(``0,System.Byte*)">
      <summary>
            Copies the specified primitive type value as an array of bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <typeparam name="T">Native value type to get bytes for.</typeparam>
      <returns>Length of bytes copied into array based on size of <typeparamref name="T" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> type is not primitive.</exception>
      <exception cref="T:System.InvalidOperationException">Cannot get bytes for <paramref name="value" /> type.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.CopyBytes``1(``0,System.Byte[],System.Int32)">
      <summary>
            Copies the specified primitive type value as an array of bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <typeparam name="T">Native value type to get bytes for.</typeparam>
      <returns>Length of bytes copied into array based on size of <typeparamref name="T" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> type is not primitive.</exception>
      <exception cref="T:System.InvalidOperationException">Cannot get bytes for <paramref name="value" /> type.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.GetBytes(gemstone.numeric.Int24)">
      <summary>
            Returns the specified 24-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 3.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.GetBytes(gemstone.numeric.UInt24)">
      <summary>
            Returns the specified 24-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 3.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.GetBytes(System.Boolean)">
      <summary>
            Returns the specified <see cref="T:System.Boolean" /> value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert.</param>
      <returns>An array of bytes with length 1.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.GetBytes(System.Char)">
      <summary>
            Returns the specified Unicode character value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The Unicode character value to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.GetBytes(System.Decimal)">
      <summary>
            Returns the specified 128-bit decimal value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 16.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.GetBytes(System.Double)">
      <summary>
            Returns the specified double-precision floating point value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.GetBytes(System.Int16)">
      <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.GetBytes(System.Int32)">
      <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.GetBytes(System.Int64)">
      <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.GetBytes(System.Single)">
      <summary>
            Returns the specified single-precision floating point value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.GetBytes(System.UInt16)">
      <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.GetBytes(System.UInt32)">
      <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.GetBytes(System.UInt64)">
      <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:gemstone.numeric.BigEndian.GetBytes``1(``0)">
      <summary>
            Returns the specified value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The value to convert.</param>
      <typeparam name="T">Native value type to get bytes for.</typeparam>
      <returns>An array of bytes with length 1.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> type is not primitive.</exception>
      <exception cref="T:System.InvalidOperationException">Cannot get bytes for <paramref name="value" /> type.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToBoolean(System.Byte*)">
      <summary>
            Returns a <see cref="T:System.Boolean" /> value converted from one byte at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes.</param>
      <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToBoolean(System.Byte[],System.Int32)">
      <summary>
            Returns a <see cref="T:System.Boolean" /> value converted from one byte at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToChar(System.Byte*)">
      <summary>
            Returns a Unicode character converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A character formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToChar(System.Byte[],System.Int32)">
      <summary>
            Returns a Unicode character converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A character formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToDecimal(System.Byte*)">
      <summary>
            Returns a 128-bit decimal converted from 16 bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 128-bit decimal formed by 16 bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToDecimal(System.Byte[],System.Int32)">
      <summary>
            Returns a 128-bit decimal converted from 16 bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 128-bit decimal formed by 16 bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToDouble(System.Byte*)">
      <summary>
            Returns a double-precision floating point number converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A double-precision floating point number formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToDouble(System.Byte[],System.Int32)">
      <summary>
            Returns a double-precision floating point number converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A double-precision floating point number formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToInt16(System.Byte*)">
      <summary>
            Returns a 16-bit signed integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToInt16(System.Byte[],System.Int32)">
      <summary>
            Returns a 16-bit signed integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToInt24(System.Byte*)">
      <summary>
            Returns a 24-bit signed integer converted from three bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 24-bit signed integer formed by three bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToInt24(System.Byte[],System.Int32)">
      <summary>
            Returns a 24-bit signed integer converted from three bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 24-bit signed integer formed by three bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToInt32(System.Byte*)">
      <summary>
            Returns a 32-bit signed integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToInt32(System.Byte[],System.Int32)">
      <summary>
            Returns a 32-bit signed integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToInt64(System.Byte*)">
      <summary>
            Returns a 64-bit signed integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToInt64(System.Byte[],System.Int32)">
      <summary>
            Returns a 64-bit signed integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToSingle(System.Byte*)">
      <summary>
            Returns a single-precision floating point number converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A single-precision floating point number formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToSingle(System.Byte[],System.Int32)">
      <summary>
            Returns a single-precision floating point number converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A single-precision floating point number formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToUInt16(System.Byte*)">
      <summary>
            Returns a 16-bit unsigned integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToUInt16(System.Byte[],System.Int32)">
      <summary>
            Returns a 16-bit unsigned integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToUInt24(System.Byte*)">
      <summary>
            Returns a 24-bit unsigned integer converted from three bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 24-bit unsigned integer formed by three bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToUInt24(System.Byte[],System.Int32)">
      <summary>
            Returns a 24-bit unsigned integer converted from three bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 24-bit unsigned integer formed by three bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToUInt32(System.Byte*)">
      <summary>
            Returns a 32-bit unsigned integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 32-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToUInt32(System.Byte[],System.Int32)">
      <summary>
            Returns a 32-bit unsigned integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 32-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToUInt64(System.Byte*)">
      <summary>
            Returns a 64-bit unsigned integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.BigEndian.ToUInt64(System.Byte[],System.Int32)">
      <summary>
            Returns a 64-bit unsigned integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="T:gemstone.numeric.ComplexNumber">
      <summary>
            Represents a complex number.
            </summary>
    </member>
    <member name="M:gemstone.numeric.ComplexNumber.#ctor(gemstone.numeric.ComplexNumber)">
      <summary>
            Creates a <see cref="T:gemstone.numeric.ComplexNumber" /> from the given <see cref="T:gemstone.numeric.ComplexNumber" />.
            </summary>
      <param name="z">
        <see cref="T:gemstone.numeric.ComplexNumber" /> to be copied.</param>
    </member>
    <member name="M:gemstone.numeric.ComplexNumber.#ctor(gemstone.numeric.units.Angle,System.Double)">
      <summary>
            Creates a <see cref="T:gemstone.numeric.ComplexNumber" /> from the given polar values.
            </summary>
      <param name="angle">The <see cref="P:gemstone.numeric.ComplexNumber.Angle" /> component, in radians, of the <see cref="T:gemstone.numeric.ComplexNumber" />.</param>
      <param name="magnitude">The magnitude (or absolute value) component of the <see cref="T:gemstone.numeric.ComplexNumber" />.</param>
    </member>
    <member name="M:gemstone.numeric.ComplexNumber.#ctor(System.Double,System.Double)">
      <summary>
            Creates a <see cref="T:gemstone.numeric.ComplexNumber" /> from the given rectangular values. 
            </summary>
      <param name="real">The real component of the <see cref="T:gemstone.numeric.ComplexNumber" />.</param>
      <param name="imaginary">The imaginary component of the <see cref="T:gemstone.numeric.ComplexNumber" />.</param>
    </member>
    <member name="P:gemstone.numeric.ComplexNumber.AllAssigned">
      <summary>
            Gets a boolean value indicating if each composite value of the <see cref="T:gemstone.numeric.ComplexNumber" /> (i.e., real and imaginary) has been assigned a value.
            </summary>
      <returns>True, if all composite values have been assigned a value; otherwise, false.</returns>
    </member>
    <member name="P:gemstone.numeric.ComplexNumber.Angle">
      <summary>
            Gets or sets the <see cref="P:gemstone.numeric.ComplexNumber.Angle" /> (a.k.a. the argument) in radians of this <see cref="T:gemstone.numeric.ComplexNumber" />.
            </summary>
    </member>
    <member name="P:gemstone.numeric.ComplexNumber.Conjugate">
      <summary>
            Gets the complex conjugate of this <see cref="T:gemstone.numeric.ComplexNumber" />.
            </summary>
    </member>
    <member name="M:gemstone.numeric.ComplexNumber.Equals(gemstone.numeric.ComplexNumber)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified ComplexNumber value.
            </summary>
      <param name="obj">A <see cref="T:gemstone.numeric.ComplexNumber" /> to compare to this instance.</param>
      <returns>
            True if <paramref name="obj" /> has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.ComplexNumber.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if <paramref name="obj" /> is an instance of ComplexNumber and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.ComplexNumber.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="P:gemstone.numeric.ComplexNumber.Imaginary">
      <summary>
            Gets or sets the imaginary component of this <see cref="T:gemstone.numeric.ComplexNumber" />.
            </summary>
    </member>
    <member name="P:gemstone.numeric.ComplexNumber.Magnitude">
      <summary>
            Gets or sets the magnitude (a.k.a. the modulus or absolute value) of this <see cref="T:gemstone.numeric.ComplexNumber" />.
            </summary>
    </member>
    <member name="P:gemstone.numeric.ComplexNumber.NoneAssigned">
      <summary>
            Gets a boolean value indicating if each composite value of the <see cref="T:gemstone.numeric.ComplexNumber" /> (i.e., real and imaginary) has not been assigned a value.
            </summary>
      <returns>True, if none of the composite values have been assigned a value; otherwise, false.</returns>
    </member>
    <member name="M:gemstone.numeric.ComplexNumber.op_Addition(gemstone.numeric.ComplexNumber,gemstone.numeric.ComplexNumber)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>ComplexNumber representing the result of the addition operation.</returns>
    </member>
    <member name="M:gemstone.numeric.ComplexNumber.op_Division(gemstone.numeric.ComplexNumber,gemstone.numeric.ComplexNumber)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>ComplexNumber representing the result of the division operation.</returns>
    </member>
    <member name="M:gemstone.numeric.ComplexNumber.op_Equality(gemstone.numeric.ComplexNumber,gemstone.numeric.ComplexNumber)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean representing the result of the addition operation.</returns>
    </member>
    <member name="M:gemstone.numeric.ComplexNumber.op_Exponent(gemstone.numeric.ComplexNumber,System.Double)">
      <summary>
             Returns result of first value raised to power of second value.
             </summary>
      <param name="z">Complex number to be raised to power <paramref name="y" />.</param>
      <param name="y">Power to raise <see cref="T:gemstone.numeric.ComplexNumber" /><paramref name="z" />.</param>
      <returns>ComplexNumber representing the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.ComplexNumber.op_Implicit(gemstone.numeric.ComplexNumber)~System.Numerics.Complex">
      <summary>
            Implicitly converts a <see cref="T:gemstone.numeric.ComplexNumber" /> to a .NET <see cref="T:System.Numerics.Complex" /> value.
            </summary>
      <param name="value">Operand.</param>
      <returns>Complex representing the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.ComplexNumber.op_Implicit(System.Double)~gemstone.numeric.ComplexNumber">
      <summary>
            Implicitly converts a <see cref="T:System.Double" /> to a <see cref="T:gemstone.numeric.ComplexNumber" />.
            </summary>
      <param name="value">Operand.</param>
      <returns>ComplexNumber representing the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.ComplexNumber.op_Implicit(System.Numerics.Complex)~gemstone.numeric.ComplexNumber">
      <summary>
            Implicitly converts a .NET <see cref="T:System.Numerics.Complex" /> value to a <see cref="T:gemstone.numeric.ComplexNumber" />.
            </summary>
      <param name="value">Operand.</param>
      <returns>Complex representing the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.ComplexNumber.op_Inequality(gemstone.numeric.ComplexNumber,gemstone.numeric.ComplexNumber)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean representing the result of the inequality operation.</returns>
    </member>
    <member name="M:gemstone.numeric.ComplexNumber.op_Multiply(gemstone.numeric.ComplexNumber,gemstone.numeric.ComplexNumber)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>ComplexNumber representing the result of the multiplication operation.</returns>
    </member>
    <member name="M:gemstone.numeric.ComplexNumber.op_Subtraction(gemstone.numeric.ComplexNumber,gemstone.numeric.ComplexNumber)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>ComplexNumber representing the result of the subtraction operation.</returns>
    </member>
    <member name="M:gemstone.numeric.ComplexNumber.op_UnaryNegation(gemstone.numeric.ComplexNumber)">
      <summary>
            Returns the negated value.
            </summary>
      <param name="z">Left hand operand.</param>
      <returns>ComplexNumber representing the result of the unary negation operation.</returns>
    </member>
    <member name="M:gemstone.numeric.ComplexNumber.Parse(System.String)">
      <summary>
            Converts the string representation of a complex number to its complex number equivalent.
            </summary>
      <param name="str">A string that contains a number to convert.</param>
      <returns>A complex number that is equivalent to the numeric value or symbols specified in <paramref name="str" />.</returns>
    </member>
    <member name="M:gemstone.numeric.ComplexNumber.Pow(gemstone.numeric.ComplexNumber,System.Double)">
      <summary>
             Returns specified <see cref="T:gemstone.numeric.ComplexNumber" /> raised to the specified power.
            </summary>
      <param name="z">Complex number to be raised to power <paramref name="y" />.</param>
      <param name="y">Power to raise <see cref="T:gemstone.numeric.ComplexNumber" /><paramref name="z" />.</param>
      <returns>ComplexNumber representing the result of the operation.</returns>
    </member>
    <member name="P:gemstone.numeric.ComplexNumber.Real">
      <summary>
            Gets or sets the real component of this <see cref="T:gemstone.numeric.ComplexNumber" />.
            </summary>
    </member>
    <member name="M:gemstone.numeric.ComplexNumber.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this <see cref="T:gemstone.numeric.ComplexNumber" /> instance.
            </returns>
    </member>
    <member name="T:gemstone.numeric.Int24">
      <summary>Represents a 3-byte, 24-bit signed integer.</summary>
    </member>
    <member name="M:gemstone.numeric.Int24.#ctor(gemstone.numeric.Int24)">
      <summary>Creates 24-bit signed integer from an existing 24-bit signed integer.</summary>
      <param name="value">24-but signed integer to create new Int24 from.</param>
    </member>
    <member name="M:gemstone.numeric.Int24.#ctor(System.Byte[],System.Int32)">
      <summary>Creates 24-bit signed integer from three bytes at a specified position in a byte array.</summary>
      <param name="value">An array of bytes.</param>
      <param name="startIndex">The starting position within <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> cannot be null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is greater than <paramref name="value" /> length.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> length from <paramref name="startIndex" /> is too small to represent a <see cref="T:gemstone.numeric.UInt24" />.</exception>
    </member>
    <member name="M:gemstone.numeric.Int24.#ctor(System.Int32)">
      <summary>Creates 24-bit signed integer from a 32-bit signed integer.</summary>
      <param name="value">32-bit signed integer to use as new 24-bit signed integer value.</param>
      <exception cref="T:System.OverflowException">Source values outside 24-bit min/max range will cause an overflow exception.</exception>
    </member>
    <member name="F:gemstone.numeric.Int24.BitMask">
      <summary>High byte bit-mask used when a 24-bit integer is stored within a 32-bit integer. This field is constant.</summary>
    </member>
    <member name="M:gemstone.numeric.Int24.CompareTo(gemstone.numeric.Int24)">
      <summary>
            Compares this instance to a specified 24-bit signed integer and returns an indication of their
            relative values.
            </summary>
      <param name="value">An integer to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.Int24.CompareTo(System.Int32)">
      <summary>
            Compares this instance to a specified 32-bit signed integer and returns an indication of their
            relative values.
            </summary>
      <param name="value">An integer to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.Int24.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not an Int32 or Int24.</exception>
    </member>
    <member name="M:gemstone.numeric.Int24.Equals(gemstone.numeric.Int24)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified Int24 value.
            </summary>
      <param name="obj">An Int24 value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.Int24.Equals(System.Int32)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified Int32 value.
            </summary>
      <param name="obj">An Int32 value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.Int24.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of Int32 or Int24 and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.Int24.GetBytes">
      <summary>Returns the Int24 value as an array of three bytes.</summary>
      <returns>An array of bytes with length 3.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.GetBytes(gemstone.numeric.Int24)">
      <summary>Returns the specified Int24 value as an array of three bytes.</summary>
      <param name="value">Int24 value to convert to bytes.</param>
      <returns>An array of bytes with length 3.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:gemstone.numeric.Int24.GetTypeCode">
      <summary>
            Returns the System.TypeCode for value type System.Int32 (there is no defined type code for an Int24).
            </summary>
      <returns>The enumerated constant, System.TypeCode.Int32.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.GetValue(System.Byte[],System.Int32)">
      <summary>Returns a 24-bit signed integer from three bytes at a specified position in a byte array.</summary>
      <param name="value">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 24-bit signed integer formed by three bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> cannot be null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is greater than <paramref name="value" /> length.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> length from <paramref name="startIndex" /> is too small to represent an <see cref="T:gemstone.numeric.Int24" />.</exception>
    </member>
    <member name="F:gemstone.numeric.Int24.MaxValue">
      <summary>
            Represents the largest possible value of an Int24. This field is constant.
            </summary>
    </member>
    <member name="F:gemstone.numeric.Int24.MinValue">
      <summary>
            Represents the smallest possible value of an Int24. This field is constant.
            </summary>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Addition(gemstone.numeric.Int24,gemstone.numeric.Int24)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Int24 result of addition.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Addition(gemstone.numeric.Int24,System.Int32)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer result of addition.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Addition(System.Int32,gemstone.numeric.Int24)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer result of addition.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_BitwiseAnd(gemstone.numeric.Int24,gemstone.numeric.Int24)">
      <summary>
            Returns logical bitwise AND of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Int24 as result of operation.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_BitwiseAnd(gemstone.numeric.Int24,System.Int32)">
      <summary>
            Returns logical bitwise AND of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer as result of operation.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_BitwiseAnd(System.Int32,gemstone.numeric.Int24)">
      <summary>
            Returns logical bitwise AND of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer as result of operation.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_BitwiseOr(gemstone.numeric.Int24,gemstone.numeric.Int24)">
      <summary>
            Returns logical bitwise OR of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Int24 as result of operation.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_BitwiseOr(gemstone.numeric.Int24,System.Int32)">
      <summary>
            Returns logical bitwise OR of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer as result of operation.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_BitwiseOr(System.Int32,gemstone.numeric.Int24)">
      <summary>
            Returns logical bitwise OR of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer as result of operation.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Decrement(gemstone.numeric.Int24)">
      <summary>
            Returns decremented value.
            </summary>
      <param name="value">The operand.</param>
      <returns>Int24 result of decrement.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Division(gemstone.numeric.Int24,gemstone.numeric.Int24)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Int24 result of operation.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Division(gemstone.numeric.Int24,System.Int32)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer result of operation.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Division(System.Int32,gemstone.numeric.Int24)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer result of operation.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Equality(gemstone.numeric.Int24,gemstone.numeric.Int24)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean value indicating equality.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Equality(gemstone.numeric.Int24,System.Int32)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean value indicating equality.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Equality(System.Int32,gemstone.numeric.Int24)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean value indicating equality.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_ExclusiveOr(gemstone.numeric.Int24,gemstone.numeric.Int24)">
      <summary>
            Returns logical bitwise exclusive-OR of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer value of the resulting exclusive-OR operation.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_ExclusiveOr(gemstone.numeric.Int24,System.Int32)">
      <summary>
            Returns logical bitwise exclusive-OR of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer value of the resulting exclusive-OR operation.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_ExclusiveOr(System.Int32,gemstone.numeric.Int24)">
      <summary>
            Returns logical bitwise exclusive-OR of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer value of the resulting exclusive-OR operation.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Explicit(gemstone.numeric.Int24)~System.Int16">
      <summary>
            Explicitly converts <see cref="T:gemstone.numeric.Int24" /> to <see cref="T:System.Int16" />.
            </summary>
      <param name="value">Int24 value that is converted.</param>
      <returns>Short</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Explicit(gemstone.numeric.Int24)~System.UInt16">
      <summary>
            Explicitly converts <see cref="T:gemstone.numeric.Int24" /> to <see cref="T:System.UInt16" />.
            </summary>
      <param name="value">Int24 value that is converted.</param>
      <returns>Unsigned Short</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Explicit(gemstone.numeric.Int24)~System.Byte">
      <summary>
            Explicitly converts <see cref="T:gemstone.numeric.Int24" /> to <see cref="T:System.Byte" />.
            </summary>
      <param name="value">Int24 value that is converted.</param>
      <returns>Byte</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Explicit(System.Decimal)~gemstone.numeric.Int24">
      <summary>
            Explicitly converts value to an <see cref="T:gemstone.numeric.Int24" />.
            </summary>
      <param name="value">Decimal value that is converted.</param>
      <returns>Int24</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Explicit(System.Double)~gemstone.numeric.Int24">
      <summary>
            Explicitly converts value to an <see cref="T:gemstone.numeric.Int24" />.
            </summary>
      <param name="value">Double value that is converted.</param>
      <returns>Int24</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Explicit(System.Enum)~gemstone.numeric.Int24">
      <summary>
            Explicitly converts value to an <see cref="T:gemstone.numeric.Int24" />.
            </summary>
      <param name="value">Enum value that is converted.</param>
      <returns>Int24</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Explicit(System.Int32)~gemstone.numeric.Int24">
      <summary>
            Explicitly converts value to an <see cref="T:gemstone.numeric.Int24" />.
            </summary>
      <param name="value">Integer value that is converted.</param>
      <returns>Int24</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Explicit(System.Int64)~gemstone.numeric.Int24">
      <summary>
            Explicitly converts value to an <see cref="T:gemstone.numeric.Int24" />.
            </summary>
      <param name="value">Long value that is converted.</param>
      <returns>Int24</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Explicit(System.Single)~gemstone.numeric.Int24">
      <summary>
            Explicitly converts value to an <see cref="T:gemstone.numeric.Int24" />.
            </summary>
      <param name="value">Float value that is converted.</param>
      <returns>Int24</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Explicit(System.String)~gemstone.numeric.Int24">
      <summary>
            Explicitly converts value to an <see cref="T:gemstone.numeric.Int24" />.
            </summary>
      <param name="value">String value that is converted.</param>
      <returns>Int24</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Exponent(gemstone.numeric.Int24,gemstone.numeric.Int24)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Double that is the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Exponent(gemstone.numeric.Int24,System.Int32)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Double that is the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Exponent(System.Int32,gemstone.numeric.Int24)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Double that is the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_False(gemstone.numeric.Int24)">
      <summary>
            Returns true if value is equal to zero.
            </summary>
      <param name="value">Int24 value to test.</param>
      <returns>Boolean to indicate whether the value was equal to zero.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_GreaterThan(gemstone.numeric.Int24,gemstone.numeric.Int24)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating whether the left value was greater than the right value.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_GreaterThan(gemstone.numeric.Int24,System.Int32)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating whether the left value was greater than the right value.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_GreaterThan(System.Int32,gemstone.numeric.Int24)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating whether the left value was greater than the right value.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_GreaterThanOrEqual(gemstone.numeric.Int24,gemstone.numeric.Int24)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating whether the left value was greater than or equal to the right value.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_GreaterThanOrEqual(gemstone.numeric.Int24,System.Int32)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating whether the left value was greater than or equal to the right value.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_GreaterThanOrEqual(System.Int32,gemstone.numeric.Int24)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating whether the left value was greater than or equal to the right value.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Implicit(gemstone.numeric.Int24)~System.Int32">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.Int24" /> to <see cref="T:System.Int32" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.Int24" /> value that is converted to an <see cref="T:System.Int32" />.</param>
      <returns>An <see cref="T:System.Int32" /> value.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Implicit(gemstone.numeric.Int24)~System.UInt32">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.Int24" /> to <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.Int24" /> value that is converted to an unsigned integer.</param>
      <returns>Unsigned integer</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Implicit(gemstone.numeric.Int24)~System.Int64">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.Int24" /> to <see cref="T:System.Int64" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.Int24" /> value that is converted to an <see cref="T:System.Int64" />.</param>
      <returns>An <see cref="T:System.Int64" /> value.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Implicit(gemstone.numeric.Int24)~System.UInt64">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.Int24" /> to <see cref="T:System.UInt64" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.Int24" /> value that is converted to an <see cref="T:System.UInt64" />.</param>
      <returns>An <see cref="T:System.UInt64" /> value.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Implicit(gemstone.numeric.Int24)~System.Double">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.Int24" /> to <see cref="T:System.Double" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.Int24" /> value that is converted to an <see cref="T:System.Double" />.</param>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Implicit(gemstone.numeric.Int24)~System.Single">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.Int24" /> to <see cref="T:System.Single" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.Int24" /> value that is converted to an <see cref="T:System.Single" />.</param>
      <returns>A <see cref="T:System.Single" /> value.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Implicit(gemstone.numeric.Int24)~System.Decimal">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.Int24" /> to <see cref="T:System.Decimal" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.Int24" /> value that is converted to an <see cref="T:System.Decimal" />.</param>
      <returns>A <see cref="T:System.Decimal" /> value.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Implicit(gemstone.numeric.Int24)~System.String">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.Int24" /> to <see cref="T:System.String" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.Int24" /> value that is converted to an <see cref="T:System.String" />.</param>
      <returns>A <see cref="T:System.String" /> value.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Implicit(System.Byte)~gemstone.numeric.Int24">
      <summary>
            Implicitly converts value to an <see cref="T:gemstone.numeric.Int24" />.
            </summary>
      <param name="value">Byte value that is converted to an <see cref="T:gemstone.numeric.Int24" />.</param>
      <returns>An <see cref="T:gemstone.numeric.Int24" /> value.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Implicit(System.Char)~gemstone.numeric.Int24">
      <summary>
            Implicitly converts value to an <see cref="T:gemstone.numeric.Int24" />.
            </summary>
      <param name="value">Char value that is converted to an <see cref="T:gemstone.numeric.Int24" />.</param>
      <returns>An <see cref="T:gemstone.numeric.Int24" /> value.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Implicit(System.Int16)~gemstone.numeric.Int24">
      <summary>
            Implicitly converts value to an <see cref="T:gemstone.numeric.Int24" />.
            </summary>
      <param name="value">Short value that is converted to an <see cref="T:gemstone.numeric.Int24" />.</param>
      <returns>An <see cref="T:gemstone.numeric.Int24" /> value.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Increment(gemstone.numeric.Int24)">
      <summary>
            Returns incremented value.
            </summary>
      <param name="value">The operand.</param>
      <returns>Int24 result of increment.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Inequality(gemstone.numeric.Int24,gemstone.numeric.Int24)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating the result of the inequality.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Inequality(gemstone.numeric.Int24,System.Int32)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating the result of the inequality.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Inequality(System.Int32,gemstone.numeric.Int24)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating the result of the inequality.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_LeftShift(gemstone.numeric.Int24,System.Int32)">
      <summary>
            Returns value after left shifts of first value by the number of bits specified by second value.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.Int24" /> value to shift.</param>
      <param name="shifts">
        <see cref="T:System.Int32" /> shifts indicates how many places to shift.</param>
      <returns>An <see cref="T:gemstone.numeric.Int24" /> value.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_LessThan(gemstone.numeric.Int24,gemstone.numeric.Int24)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating whether the left value was less than the right value.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_LessThan(gemstone.numeric.Int24,System.Int32)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating whether the left value was less than the right value.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_LessThan(System.Int32,gemstone.numeric.Int24)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating whether the left value was less than the right value.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_LessThanOrEqual(gemstone.numeric.Int24,gemstone.numeric.Int24)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating whether the left value was less than the right value.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_LessThanOrEqual(gemstone.numeric.Int24,System.Int32)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating whether the left value was less than the right value.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_LessThanOrEqual(System.Int32,gemstone.numeric.Int24)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Boolean indicating whether the left value was less than the right value.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Modulus(gemstone.numeric.Int24,gemstone.numeric.Int24)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.Int24" /> value as numerator.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.Int24" /> value as denominator.</param>
      <returns>
        <see cref="T:gemstone.numeric.Int24" /> as remainder</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Modulus(gemstone.numeric.Int24,System.Int32)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.Int24" /> value as numerator.</param>
      <param name="value2">
        <see cref="T:System.Int32" /> value as denominator.</param>
      <returns>
        <see cref="T:System.Int32" /> as remainder</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Modulus(System.Int32,gemstone.numeric.Int24)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">
        <see cref="T:System.Int32" /> value as numerator.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.Int24" /> value as denominator.</param>
      <returns>
        <see cref="T:System.Int32" /> as remainder</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Multiply(gemstone.numeric.Int24,gemstone.numeric.Int24)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.Int24" /> value as left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.Int24" /> value as right hand operand.</param>
      <returns>
        <see cref="T:gemstone.numeric.Int24" /> as result</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Multiply(gemstone.numeric.Int24,System.Int32)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.Int24" /> value as left hand operand.</param>
      <param name="value2">
        <see cref="T:System.Int32" /> value as right hand operand.</param>
      <returns>
        <see cref="T:System.Int32" /> as result</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Multiply(System.Int32,gemstone.numeric.Int24)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">
        <see cref="T:System.Int32" /> value as left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.Int24" /> value as right hand operand.</param>
      <returns>
        <see cref="T:System.Int32" /> as result</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_OnesComplement(gemstone.numeric.Int24)">
      <summary>
            Returns bitwise complement of value.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.Int24" /> value as operand.</param>
      <returns>
        <see cref="T:gemstone.numeric.Int24" /> as result.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_RightShift(gemstone.numeric.Int24,System.Int32)">
      <summary>
            Returns value after right shifts of first value by the number of bits specified by second value.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.Int24" /> value to shift.</param>
      <param name="shifts">
        <see cref="T:System.Int32" /> shifts indicates how many places to shift.</param>
      <returns>An <see cref="T:gemstone.numeric.Int24" /> value.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Subtraction(gemstone.numeric.Int24,gemstone.numeric.Int24)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Int24 result of subtraction.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Subtraction(gemstone.numeric.Int24,System.Int32)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer result of subtraction.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_Subtraction(System.Int32,gemstone.numeric.Int24)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">Left hand operand.</param>
      <param name="value2">Right hand operand.</param>
      <returns>Integer result of subtraction.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.op_True(gemstone.numeric.Int24)">
      <summary>
            Returns true if value is not zero.
            </summary>
      <param name="value">Int24 value to test.</param>
      <returns>Boolean to indicate whether the value was not equal to zero.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its 24-bit signed integer equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A 24-bit signed integer equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than Int24.MinValue or greater than Int24.MaxValue.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.Int24.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its 24-bit signed integer equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            A typical value to specify is System.Globalization.NumberStyles.Integer.
            </param>
      <returns>
            A 24-bit signed integer equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than Int24.MinValue or greater than Int24.MaxValue.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.Int24.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its 24-bit
            signed integer equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            A typical value to specify is System.Globalization.NumberStyles.Integer.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A 24-bit signed integer equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than Int24.MinValue or greater than Int24.MaxValue.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.Int24.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its 24-bit
            signed integer equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A 24-bit signed integer equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than Int24.MinValue or greater than Int24.MaxValue.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.Int24.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.
            </returns>
    </member>
    <member name="M:gemstone.numeric.Int24.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.Int24.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:gemstone.numeric.Int24.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.Int24.TryParse(System.String,gemstone.numeric.Int24@)">
      <summary>
            Converts the string representation of a number to its 24-bit signed integer equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the 24-bit signed integer value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than Int24.MinValue or greater than Int24.MaxValue.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:gemstone.numeric.Int24.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,gemstone.numeric.Int24@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            24-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            A typical value to specify is System.Globalization.NumberStyles.Integer.
            </param>
      <param name="result">
            When this method returns, contains the 24-bit signed integer value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than Int24.MinValue or greater than
            Int24.MaxValue. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:gemstone.numeric.LittleEndian">
      <summary>
            Defines a set of little-endian byte order interoperability functions.
            </summary>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(gemstone.numeric.Int24,System.Byte*)">
      <summary>
            Copies the specified 24-bit signed integer value as an array of 3 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(gemstone.numeric.Int24,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 24-bit signed integer value as an array of 3 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(gemstone.numeric.UInt24,System.Byte*)">
      <summary>
            Copies the specified 24-bit unsigned integer value as an array of 3 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(gemstone.numeric.UInt24,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 24-bit unsigned integer value as an array of 3 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(System.Boolean,System.Byte*)">
      <summary>
            Copies the specified <see cref="T:System.Boolean" /> value as an array of 1 byte in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(System.Boolean,System.Byte[],System.Int32)">
      <summary>
            Copies the specified <see cref="T:System.Boolean" /> value as an array of 1 byte in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(System.Char,System.Byte*)">
      <summary>
            Copies the specified Unicode character value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The Unicode character value to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(System.Char,System.Byte[],System.Int32)">
      <summary>
            Copies the specified Unicode character value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The Unicode character value to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(System.Decimal,System.Byte*)">
      <summary>
            Copies the specified 128-bit decimal value as an array of 16 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(System.Decimal,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 128-bit decimal value as an array of 16 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(System.Double,System.Byte*)">
      <summary>
            Copies the specified double-precision floating point value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(System.Double,System.Byte[],System.Int32)">
      <summary>
            Copies the specified double-precision floating point value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(System.Int16,System.Byte*)">
      <summary>
            Copies the specified 16-bit signed integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(System.Int16,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 16-bit signed integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(System.Int32,System.Byte*)">
      <summary>
            Copies the specified 32-bit signed integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(System.Int32,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 32-bit signed integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(System.Int64,System.Byte*)">
      <summary>
            Copies the specified 64-bit signed integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(System.Int64,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 64-bit signed integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(System.Single,System.Byte*)">
      <summary>
            Copies the specified single-precision floating point value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(System.Single,System.Byte[],System.Int32)">
      <summary>
            Copies the specified single-precision floating point value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(System.UInt16,System.Byte*)">
      <summary>
            Copies the specified 16-bit unsigned integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(System.UInt16,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 16-bit unsigned integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(System.UInt32,System.Byte*)">
      <summary>
            Copies the specified 32-bit unsigned integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(System.UInt32,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 32-bit unsigned integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(System.UInt64,System.Byte*)">
      <summary>
            Copies the specified 64-bit unsigned integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes(System.UInt64,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 64-bit unsigned integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes``1(``0,System.Byte*)">
      <summary>
            Copies the specified primitive type value as an array of bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <typeparam name="T">Native value type to get bytes for.</typeparam>
      <returns>Length of bytes copied into array based on size of <typeparamref name="T" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> type is not primitive.</exception>
      <exception cref="T:System.InvalidOperationException">Cannot get bytes for <paramref name="value" /> type.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.CopyBytes``1(``0,System.Byte[],System.Int32)">
      <summary>
            Copies the specified primitive type value as an array of bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <typeparam name="T">Native value type to get bytes for.</typeparam>
      <returns>Length of bytes copied into array based on size of <typeparamref name="T" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> type is not primitive.</exception>
      <exception cref="T:System.InvalidOperationException">Cannot get bytes for <paramref name="value" /> type.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.GetBytes(gemstone.numeric.Int24)">
      <summary>
            Returns the specified 24-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 3.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.GetBytes(gemstone.numeric.UInt24)">
      <summary>
            Returns the specified 24-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 3.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.GetBytes(System.Boolean)">
      <summary>
            Returns the specified <see cref="T:System.Boolean" /> value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert.</param>
      <returns>An array of bytes with length 1.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.GetBytes(System.Char)">
      <summary>
            Returns the specified Unicode character value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The Unicode character value to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.GetBytes(System.Decimal)">
      <summary>
            Returns the specified 128-bit decimal value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 16.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.GetBytes(System.Double)">
      <summary>
            Returns the specified double-precision floating point value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.GetBytes(System.Int16)">
      <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.GetBytes(System.Int32)">
      <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.GetBytes(System.Int64)">
      <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.GetBytes(System.Single)">
      <summary>
            Returns the specified single-precision floating point value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.GetBytes(System.UInt16)">
      <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.GetBytes(System.UInt32)">
      <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.GetBytes(System.UInt64)">
      <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.GetBytes``1(``0)">
      <summary>
            Returns the specified value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The value to convert.</param>
      <typeparam name="T">Native value type to get bytes for.</typeparam>
      <returns>An array of bytes with length 1.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> type is not primitive.</exception>
      <exception cref="T:System.InvalidOperationException">Cannot get bytes for <paramref name="value" /> type.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToBoolean(System.Byte*)">
      <summary>
            Returns a <see cref="T:System.Boolean" /> value converted from one byte at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes.</param>
      <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToBoolean(System.Byte[],System.Int32)">
      <summary>
            Returns a <see cref="T:System.Boolean" /> value converted from one byte at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToChar(System.Byte*)">
      <summary>
            Returns a Unicode character converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A character formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToChar(System.Byte[],System.Int32)">
      <summary>
            Returns a Unicode character converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A character formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToDecimal(System.Byte*)">
      <summary>
            Returns a 128-bit decimal converted from 16 bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 128-bit decimal formed by 16 bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToDecimal(System.Byte[],System.Int32)">
      <summary>
            Returns a 128-bit decimal converted from 16 bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 128-bit decimal formed by 16 bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToDouble(System.Byte*)">
      <summary>
            Returns a double-precision floating point number converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A double-precision floating point number formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToDouble(System.Byte[],System.Int32)">
      <summary>
            Returns a double-precision floating point number converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A double-precision floating point number formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToInt16(System.Byte*)">
      <summary>
            Returns a 16-bit signed integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToInt16(System.Byte[],System.Int32)">
      <summary>
            Returns a 16-bit signed integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToInt24(System.Byte*)">
      <summary>
            Returns a 24-bit signed integer converted from three bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 24-bit signed integer formed by three bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToInt24(System.Byte[],System.Int32)">
      <summary>
            Returns a 24-bit signed integer converted from three bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 24-bit signed integer formed by three bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToInt32(System.Byte*)">
      <summary>
            Returns a 32-bit signed integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToInt32(System.Byte[],System.Int32)">
      <summary>
            Returns a 32-bit signed integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToInt64(System.Byte*)">
      <summary>
            Returns a 64-bit signed integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToInt64(System.Byte[],System.Int32)">
      <summary>
            Returns a 64-bit signed integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToSingle(System.Byte*)">
      <summary>
            Returns a single-precision floating point number converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A single-precision floating point number formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToSingle(System.Byte[],System.Int32)">
      <summary>
            Returns a single-precision floating point number converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A single-precision floating point number formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToUInt16(System.Byte*)">
      <summary>
            Returns a 16-bit unsigned integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToUInt16(System.Byte[],System.Int32)">
      <summary>
            Returns a 16-bit unsigned integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToUInt24(System.Byte*)">
      <summary>
            Returns a 24-bit unsigned integer converted from three bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 24-bit unsigned integer formed by three bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToUInt24(System.Byte[],System.Int32)">
      <summary>
            Returns a 24-bit unsigned integer converted from three bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 24-bit unsigned integer formed by three bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToUInt32(System.Byte*)">
      <summary>
            Returns a 32-bit unsigned integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 32-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToUInt32(System.Byte[],System.Int32)">
      <summary>
            Returns a 32-bit unsigned integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 32-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToUInt64(System.Byte*)">
      <summary>
            Returns a 64-bit unsigned integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:gemstone.numeric.LittleEndian.ToUInt64(System.Byte[],System.Int32)">
      <summary>
            Returns a 64-bit unsigned integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="T:gemstone.numeric.RadixCodec">
      <summary>
            Represents a radix value codec for conversion of base-10 integer values to and from other base values.
            </summary>
    </member>
    <member name="M:gemstone.numeric.RadixCodec.#ctor(System.String,System.Boolean)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.RadixCodec" />.
            </summary>
      <param name="digits">Digits to use for radix values.</param>
      <param name="caseSensitive">Determines if alphabetic radix characters are case sensitive.</param>
    </member>
    <member name="M:gemstone.numeric.RadixCodec.Decode``1(System.String)">
      <summary>
            Converts a radix value to an integer value.
            </summary>
      <param name="radixValue">Radix value to convert.</param>
      <typeparam name="T">Integer type to convert</typeparam>
      <returns>Decoded integer value.</returns>
      <exception cref="T:System.ArgumentNullException">Radix value is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentException">Invalid radix value character.</exception>
      <exception cref="T:System.OverflowException">Decoded radix value overflowed integer type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Only integer types Int16, UInt16, Int24, UInt24, Int32, UInt32, Int64 and UInt64 are supported.</exception>
    </member>
    <member name="M:gemstone.numeric.RadixCodec.Decode(System.Type,System.String)">
      <summary>
            Converts a radix value to an integer value.
            </summary>
      <param name="type">Integer type to convert.</param>
      <param name="radixValue">Radix value to convert.</param>
      <returns>Decoded integer value.</returns>
      <exception cref="T:System.ArgumentNullException">Radix value is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentException">Invalid radix value character.</exception>
      <exception cref="T:System.OverflowException">Decoded radix value overflowed integer type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Only integer types Int16, UInt16, Int24, UInt24, Int32, UInt32, Int64 and UInt64 are supported.</exception>
    </member>
    <member name="F:gemstone.numeric.RadixCodec.Digits">
      <summary>
            Defines the available digits for a radix value codec.
            </summary>
    </member>
    <member name="M:gemstone.numeric.RadixCodec.Encode(gemstone.numeric.Int24)">
      <summary>
            Converts integer value to a radix value.
            </summary>
      <param name="value">Integer value to convert.</param>
      <returns>Radix value string.</returns>
    </member>
    <member name="M:gemstone.numeric.RadixCodec.Encode(gemstone.numeric.UInt24)">
      <summary>
            Converts integer value to a radix value.
            </summary>
      <param name="value">Integer value to convert.</param>
      <returns>Radix value string.</returns>
    </member>
    <member name="M:gemstone.numeric.RadixCodec.Encode(System.Int16)">
      <summary>
            Converts integer value to a radix value.
            </summary>
      <param name="value">Integer value to convert.</param>
      <returns>Radix value string.</returns>
    </member>
    <member name="M:gemstone.numeric.RadixCodec.Encode(System.Int32)">
      <summary>
            Converts integer value to a radix value.
            </summary>
      <param name="value">Integer value to convert.</param>
      <returns>Radix value string.</returns>
    </member>
    <member name="M:gemstone.numeric.RadixCodec.Encode(System.Int64)">
      <summary>
            Converts integer value to a radix value.
            </summary>
      <param name="value">Integer value to convert.</param>
      <returns>Radix value string.</returns>
    </member>
    <member name="M:gemstone.numeric.RadixCodec.Encode(System.UInt16)">
      <summary>
            Converts integer value to a radix value.
            </summary>
      <param name="value">Integer value to convert.</param>
      <returns>Radix value string.</returns>
    </member>
    <member name="M:gemstone.numeric.RadixCodec.Encode(System.UInt32)">
      <summary>
            Converts integer value to a radix value.
            </summary>
      <param name="value">Integer value to convert.</param>
      <returns>Radix value string.</returns>
    </member>
    <member name="M:gemstone.numeric.RadixCodec.Encode(System.UInt64)">
      <summary>
            Converts integer value to a radix value.
            </summary>
      <param name="value">Integer value to convert.</param>
      <returns>Radix value string.</returns>
    </member>
    <member name="F:gemstone.numeric.RadixCodec.Radix16">
      <summary>
            Gets a radix-16 value (hex) encoding.
            </summary>
    </member>
    <member name="F:gemstone.numeric.RadixCodec.Radix2">
      <summary>
            Gets a radix-2 value (binary) encoding.
            </summary>
    </member>
    <member name="F:gemstone.numeric.RadixCodec.Radix32">
      <summary>
            Gets a radix-32 value encoding.
            </summary>
    </member>
    <member name="F:gemstone.numeric.RadixCodec.Radix36">
      <summary>
            Gets a radix-36 value encoding.
            </summary>
    </member>
    <member name="F:gemstone.numeric.RadixCodec.Radix64">
      <summary>
            Gets a radix-64 value encoding.
            </summary>
    </member>
    <member name="F:gemstone.numeric.RadixCodec.Radix8">
      <summary>
            Gets a radix-8 value (octal) encoding.
            </summary>
    </member>
    <member name="F:gemstone.numeric.RadixCodec.Radix86">
      <summary>
            Gets a radix-86 value encoding.
            </summary>
    </member>
    <member name="M:gemstone.numeric.RadixCodec.TryDecode(System.String,gemstone.numeric.Int24@)">
      <summary>
            Attempts to convert a radix value to an integer value.
            </summary>
      <param name="radixValue">Radix value to convert.</param>
      <param name="value">Decoded integer value.</param>
      <returns>
        <c>true</c> if decode succeeds; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:gemstone.numeric.RadixCodec.TryDecode(System.String,gemstone.numeric.UInt24@)">
      <summary>
            Attempts to convert a radix value to an integer value.
            </summary>
      <param name="radixValue">Radix value to convert.</param>
      <param name="value">Decoded integer value.</param>
      <returns>
        <c>true</c> if decode succeeds; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:gemstone.numeric.RadixCodec.TryDecode(System.String,System.Int16@)">
      <summary>
            Attempts to convert a radix value to an integer value.
            </summary>
      <param name="radixValue">Radix value to convert.</param>
      <param name="value">Decoded integer value.</param>
      <returns>
        <c>true</c> if decode succeeds; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:gemstone.numeric.RadixCodec.TryDecode(System.String,System.Int32@)">
      <summary>
            Attempts to convert a radix value to an integer value.
            </summary>
      <param name="radixValue">Radix value to convert.</param>
      <param name="value">Decoded integer value.</param>
      <returns>
        <c>true</c> if decode succeeds; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:gemstone.numeric.RadixCodec.TryDecode(System.String,System.Int64@)">
      <summary>
            Attempts to convert a radix value to an integer value.
            </summary>
      <param name="radixValue">Radix value to convert.</param>
      <param name="value">Decoded integer value.</param>
      <returns>
        <c>true</c> if decode succeeds; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:gemstone.numeric.RadixCodec.TryDecode(System.String,System.UInt16@)">
      <summary>
            Attempts to convert a radix value to an integer value.
            </summary>
      <param name="radixValue">Radix value to convert.</param>
      <param name="value">Decoded integer value.</param>
      <returns>
        <c>true</c> if decode succeeds; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:gemstone.numeric.RadixCodec.TryDecode(System.String,System.UInt32@)">
      <summary>
            Attempts to convert a radix value to an integer value.
            </summary>
      <param name="radixValue">Radix value to convert.</param>
      <param name="value">Decoded integer value.</param>
      <returns>
        <c>true</c> if decode succeeds; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:gemstone.numeric.RadixCodec.TryDecode(System.String,System.UInt64@)">
      <summary>
            Attempts to convert a radix value to an integer value.
            </summary>
      <param name="radixValue">Radix value to convert.</param>
      <param name="value">Decoded integer value.</param>
      <returns>
        <c>true</c> if decode succeeds; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:gemstone.numeric.UInt24">
      <summary>Represents a 3-byte, 24-bit unsigned integer.</summary>
    </member>
    <member name="M:gemstone.numeric.UInt24.#ctor(gemstone.numeric.UInt24)">
      <summary>Creates 24-bit unsigned integer from an existing 24-bit unsigned integer.</summary>
      <param name="value">A <see cref="T:gemstone.numeric.UInt24" /> to create the new value from. </param>
    </member>
    <member name="M:gemstone.numeric.UInt24.#ctor(System.Byte[],System.Int32)">
      <summary>Creates 24-bit unsigned integer from three bytes at a specified position in a byte array.</summary>
      <param name="value">An array of bytes.</param>
      <param name="startIndex">The starting position within <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> cannot be null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is greater than <paramref name="value" /> length.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> length from <paramref name="startIndex" /> is too small to represent a <see cref="T:gemstone.numeric.UInt24" />.</exception>
    </member>
    <member name="M:gemstone.numeric.UInt24.#ctor(System.UInt32)">
      <summary>Creates 24-bit unsigned integer from a 32-bit unsigned integer.</summary>
      <param name="value">32-bit unsigned integer to use as new 24-bit unsigned integer value.</param>
      <exception cref="T:System.OverflowException">Source values over 24-bit max range will cause an overflow exception.</exception>
    </member>
    <member name="F:gemstone.numeric.UInt24.BitMask">
      <summary>High byte bit-mask used when a 24-bit integer is stored within a 32-bit integer. This field is constant.</summary>
    </member>
    <member name="M:gemstone.numeric.UInt24.CompareTo(gemstone.numeric.UInt24)">
      <summary>
            Compares this instance to a specified 24-bit unsigned integer and returns an indication of their
            relative values.
            </summary>
      <param name="value">An integer to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not an UInt32 or UInt24.</exception>
    </member>
    <member name="M:gemstone.numeric.UInt24.CompareTo(System.UInt32)">
      <summary>
            Compares this instance to a specified 32-bit unsigned integer and returns an indication of their
            relative values.
            </summary>
      <param name="value">An integer to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.Equals(gemstone.numeric.UInt24)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified UInt24 value.
            </summary>
      <param name="obj">An UInt24 value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of UInt32 or UInt24 and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.Equals(System.UInt32)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified uint value.
            </summary>
      <param name="obj">An UInt32 value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.GetBytes">
      <summary>Returns the UInt24 value as an array of three bytes.</summary>
      <returns>An array of bytes with length 3.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.GetBytes(gemstone.numeric.UInt24)">
      <summary>Returns the specified UInt24 value as an array of three bytes.</summary>
      <param name="value">UInt24 value to convert to bytes.</param>
      <returns>An array of bytes with length 3.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit unsigned integer hash code.
            </returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.GetTypeCode">
      <summary>
            Returns the System.TypeCode for value type System.UInt32 (there is no defined type code for an UInt24).
            </summary>
      <returns>The enumerated constant, System.TypeCode.UInt32.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.GetValue(System.Byte[],System.Int32)">
      <summary>Returns a 24-bit unsigned integer from three bytes at a specified position in a byte array.</summary>
      <param name="value">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 24-bit unsigned integer formed by three bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> cannot be null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is greater than <paramref name="value" /> length.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> length from <paramref name="startIndex" /> is too small to represent an <see cref="T:gemstone.numeric.UInt24" />.</exception>
    </member>
    <member name="F:gemstone.numeric.UInt24.MaxValue">
      <summary>
            Represents the largest possible value of an Int24. This field is constant.
            </summary>
    </member>
    <member name="F:gemstone.numeric.UInt24.MinValue">
      <summary>
            Represents the smallest possible value of an Int24. This field is constant.
            </summary>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Addition(gemstone.numeric.UInt24,gemstone.numeric.UInt24)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:gemstone.numeric.UInt24" /> value as result of addition operation.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Addition(gemstone.numeric.UInt24,System.UInt32)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value as result of addition operation.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Addition(System.UInt32,gemstone.numeric.UInt24)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value as result of addition operation.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_BitwiseAnd(gemstone.numeric.UInt24,gemstone.numeric.UInt24)">
      <summary>
            Returns logical bitwise AND of values.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:gemstone.numeric.UInt24" /> value representing the logical bitwise AND of the values.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_BitwiseAnd(gemstone.numeric.UInt24,System.UInt32)">
      <summary>
            Returns logical bitwise AND of values.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value representing the logical bitwise AND of the values.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_BitwiseAnd(System.UInt32,gemstone.numeric.UInt24)">
      <summary>
            Returns logical bitwise AND of values.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value representing the logical bitwise AND of the values.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_BitwiseOr(gemstone.numeric.UInt24,gemstone.numeric.UInt24)">
      <summary>
            Returns logical bitwise OR of values.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:gemstone.numeric.UInt24" /> value representing the logical bitwise OR of the values.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_BitwiseOr(gemstone.numeric.UInt24,System.UInt32)">
      <summary>
            Returns logical bitwise OR of values.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value representing the logical bitwise OR of the values.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_BitwiseOr(System.UInt32,gemstone.numeric.UInt24)">
      <summary>
            Returns logical bitwise OR of values.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value representing the logical bitwise OR of the values.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Decrement(gemstone.numeric.UInt24)">
      <summary>
            Returns decremented value.
            </summary>
      <param name="value">The operand.</param>
      <returns>
        <see cref="T:gemstone.numeric.UInt24" /> result of decrement.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Division(gemstone.numeric.UInt24,gemstone.numeric.UInt24)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:gemstone.numeric.UInt24" /> value as result of division operation.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Division(gemstone.numeric.UInt24,System.UInt32)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value as result of division operation.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Division(System.UInt32,gemstone.numeric.UInt24)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value as result of division operation.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Equality(gemstone.numeric.UInt24,gemstone.numeric.UInt24)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Equality(gemstone.numeric.UInt24,System.UInt32)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Equality(System.UInt32,gemstone.numeric.UInt24)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_ExclusiveOr(gemstone.numeric.UInt24,gemstone.numeric.UInt24)">
      <summary>
            Returns logical bitwise exclusive-OR of values.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:gemstone.numeric.UInt24" /> value representing the logical bitwise exclusive-OR of the values.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_ExclusiveOr(gemstone.numeric.UInt24,System.UInt32)">
      <summary>
            Returns logical bitwise exclusive-OR of values.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value representing the logical bitwise exclusive-OR of the values.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_ExclusiveOr(System.UInt32,gemstone.numeric.UInt24)">
      <summary>
            Returns logical bitwise exclusive-OR of values.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value representing the logical bitwise exclusive-OR of the values.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Explicit(gemstone.numeric.Int24)~gemstone.numeric.UInt24">
      <summary>
            Explicitly converts value to an <see cref="T:gemstone.numeric.UInt24" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.Int24" /> value to be converted.</param>
      <returns>
        <see cref="T:gemstone.numeric.UInt24" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Explicit(gemstone.numeric.UInt24)~gemstone.numeric.Int24">
      <summary>
            Explicitly converts value to an <see cref="T:gemstone.numeric.Int24" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.UInt24" /> value to be converted.</param>
      <returns>
        <see cref="T:gemstone.numeric.Int24" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Explicit(gemstone.numeric.UInt24)~System.Int16">
      <summary>
            Explicitly converts <see cref="T:gemstone.numeric.UInt24" /> to <see cref="T:System.Int16" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.UInt24" /> value to be converted.</param>
      <returns>
        <see cref="T:System.Int16" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Explicit(gemstone.numeric.UInt24)~System.UInt16">
      <summary>
            Explicitly converts <see cref="T:gemstone.numeric.UInt24" /> to <see cref="T:System.UInt16" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.UInt24" /> value to be converted.</param>
      <returns>
        <see cref="T:System.UInt16" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Explicit(gemstone.numeric.UInt24)~System.Byte">
      <summary>
            Explicitly converts <see cref="T:gemstone.numeric.UInt24" /> to <see cref="T:System.Byte" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.UInt24" /> value to be converted.</param>
      <returns>
        <see cref="T:System.Byte" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Explicit(System.Decimal)~gemstone.numeric.UInt24">
      <summary>
            Explicitly converts value to an <see cref="T:gemstone.numeric.UInt24" />.
            </summary>
      <param name="value">
        <see cref="T:System.Decimal" /> value to be converted.</param>
      <returns>
        <see cref="T:gemstone.numeric.UInt24" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Explicit(System.Double)~gemstone.numeric.UInt24">
      <summary>
            Explicitly converts value to an <see cref="T:gemstone.numeric.UInt24" />.
            </summary>
      <param name="value">
        <see cref="T:System.Double" /> value to be converted.</param>
      <returns>
        <see cref="T:gemstone.numeric.UInt24" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Explicit(System.Enum)~gemstone.numeric.UInt24">
      <summary>
            Explicitly converts value to an <see cref="T:gemstone.numeric.UInt24" />.
            </summary>
      <param name="value">
        <see cref="T:System.Enum" /> value to be converted.</param>
      <returns>
        <see cref="T:gemstone.numeric.UInt24" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Explicit(System.Single)~gemstone.numeric.UInt24">
      <summary>
            Explicitly converts value to an <see cref="T:gemstone.numeric.UInt24" />.
            </summary>
      <param name="value">
        <see cref="T:System.Single" /> value to be converted.</param>
      <returns>
        <see cref="T:gemstone.numeric.UInt24" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Explicit(System.String)~gemstone.numeric.UInt24">
      <summary>
            Explicitly converts value to an <see cref="T:gemstone.numeric.UInt24" />.
            </summary>
      <param name="value">
        <see cref="T:System.String" /> value to be converted.</param>
      <returns>
        <see cref="T:gemstone.numeric.UInt24" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Explicit(System.UInt32)~gemstone.numeric.UInt24">
      <summary>
            Explicitly converts value to an <see cref="T:gemstone.numeric.UInt24" />.
            </summary>
      <param name="value">
        <see cref="T:System.UInt32" /> value to be converted.</param>
      <returns>
        <see cref="T:gemstone.numeric.UInt24" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Explicit(System.UInt64)~gemstone.numeric.UInt24">
      <summary>
            Explicitly converts value to an <see cref="T:gemstone.numeric.UInt24" />.
            </summary>
      <param name="value">
        <see cref="T:System.UInt64" /> value to be converted.</param>
      <returns>
        <see cref="T:gemstone.numeric.UInt24" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Exponent(gemstone.numeric.UInt24,gemstone.numeric.UInt24)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Double" /> value as result of operation.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Exponent(gemstone.numeric.UInt24,System.Int32)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Double" /> value as result of operation.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Exponent(System.Int32,gemstone.numeric.UInt24)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Double" /> value as result of operation.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_False(gemstone.numeric.UInt24)">
      <summary>
            Returns true if value is equal to zero.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.UInt24" /> value to evaluate.</param>
      <returns>
        <see cref="T:System.Boolean" /> value indicating whether the value is equal than zero.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_GreaterThan(gemstone.numeric.UInt24,gemstone.numeric.UInt24)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_GreaterThan(gemstone.numeric.UInt24,System.UInt32)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_GreaterThan(System.UInt32,gemstone.numeric.UInt24)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_GreaterThanOrEqual(gemstone.numeric.UInt24,gemstone.numeric.UInt24)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_GreaterThanOrEqual(gemstone.numeric.UInt24,System.UInt32)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_GreaterThanOrEqual(System.UInt32,gemstone.numeric.UInt24)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Implicit(gemstone.numeric.UInt24)~System.Int32">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.UInt24" /> to <see cref="T:System.Int32" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.UInt24" /> value to be converted.</param>
      <returns>
        <see cref="T:System.Int32" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Implicit(gemstone.numeric.UInt24)~System.UInt32">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.UInt24" /> to <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.UInt24" /> value to be converted.</param>
      <returns>
        <see cref="T:System.UInt32" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Implicit(gemstone.numeric.UInt24)~System.Int64">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.UInt24" /> to <see cref="T:System.Int64" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.UInt24" /> value to be converted.</param>
      <returns>
        <see cref="T:System.Int64" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Implicit(gemstone.numeric.UInt24)~System.UInt64">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.UInt24" /> to <see cref="T:System.UInt64" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.UInt24" /> value to be converted.</param>
      <returns>
        <see cref="T:System.UInt64" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Implicit(gemstone.numeric.UInt24)~System.Double">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.UInt24" /> to <see cref="T:System.Double" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.UInt24" /> value to be converted.</param>
      <returns>
        <see cref="T:System.Double" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Implicit(gemstone.numeric.UInt24)~System.Single">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.UInt24" /> to <see cref="T:System.Single" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.UInt24" /> value to be converted.</param>
      <returns>
        <see cref="T:System.Single" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Implicit(gemstone.numeric.UInt24)~System.Decimal">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.UInt24" /> to <see cref="T:System.Decimal" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.UInt24" /> value to be converted.</param>
      <returns>
        <see cref="T:System.Decimal" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Implicit(gemstone.numeric.UInt24)~System.String">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.UInt24" /> to <see cref="T:System.String" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.UInt24" /> value to be converted.</param>
      <returns>
        <see cref="T:System.String" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Implicit(System.Byte)~gemstone.numeric.UInt24">
      <summary>
            Implicitly converts value to an <see cref="T:gemstone.numeric.UInt24" />.
            </summary>
      <param name="value">
        <see cref="T:System.Byte" /> value to be converted.</param>
      <returns>
        <see cref="T:gemstone.numeric.UInt24" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Implicit(System.Char)~gemstone.numeric.UInt24">
      <summary>
            Implicitly converts value to an <see cref="T:gemstone.numeric.UInt24" />.
            </summary>
      <param name="value">
        <see cref="T:System.Char" /> value to be converted.</param>
      <returns>
        <see cref="T:gemstone.numeric.UInt24" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Implicit(System.UInt16)~gemstone.numeric.UInt24">
      <summary>
            Implicitly converts value to an <see cref="T:gemstone.numeric.UInt24" />.
            </summary>
      <param name="value">
        <see cref="T:System.UInt16" /> value to be converted.</param>
      <returns>
        <see cref="T:gemstone.numeric.UInt24" /> value that is the result of the conversion.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Increment(gemstone.numeric.UInt24)">
      <summary>
            Returns incremented value.
            </summary>
      <param name="value">The operand.</param>
      <returns>
        <see cref="T:gemstone.numeric.UInt24" /> result of increment.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Inequality(gemstone.numeric.UInt24,gemstone.numeric.UInt24)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Inequality(gemstone.numeric.UInt24,System.UInt32)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Inequality(System.UInt32,gemstone.numeric.UInt24)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_LeftShift(gemstone.numeric.UInt24,System.Int32)">
      <summary>
            Returns value after left shifts of first value by the number of bits specified by second value.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.UInt24" /> value to left shift.</param>
      <param name="shifts">
        <see cref="T:System.Int32" /> value indicating the number of bits to left shift by.</param>
      <returns>
        <see cref="T:gemstone.numeric.UInt24" /> value as result of left shift operation.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_LessThan(gemstone.numeric.UInt24,gemstone.numeric.UInt24)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_LessThan(gemstone.numeric.UInt24,System.UInt32)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_LessThan(System.UInt32,gemstone.numeric.UInt24)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_LessThanOrEqual(gemstone.numeric.UInt24,gemstone.numeric.UInt24)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_LessThanOrEqual(gemstone.numeric.UInt24,System.UInt32)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_LessThanOrEqual(System.UInt32,gemstone.numeric.UInt24)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Modulus(gemstone.numeric.UInt24,gemstone.numeric.UInt24)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:gemstone.numeric.UInt24" /> value as result of modulus operation.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Modulus(gemstone.numeric.UInt24,System.UInt32)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value as result of modulus operation.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Modulus(System.UInt32,gemstone.numeric.UInt24)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value as result of modulus operation.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Multiply(gemstone.numeric.UInt24,gemstone.numeric.UInt24)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:gemstone.numeric.UInt24" /> value as result of multiplication operation.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Multiply(gemstone.numeric.UInt24,System.UInt32)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value as result of multiplication operation.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Multiply(System.UInt32,gemstone.numeric.UInt24)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value as result of multiplication operation.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_OnesComplement(gemstone.numeric.UInt24)">
      <summary>
            Returns bitwise complement of value.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.UInt24" /> value to evaluate.</param>
      <returns>
        <see cref="T:gemstone.numeric.UInt24" /> value representing the complement of the input value.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_RightShift(gemstone.numeric.UInt24,System.Int32)">
      <summary>
            Returns value after right shifts of first value by the number of bits specified by second value.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.UInt24" /> value to right shift.</param>
      <param name="shifts">
        <see cref="T:System.Int32" /> value indicating the number of bits to right shift by.</param>
      <returns>
        <see cref="T:gemstone.numeric.UInt24" /> value as result of right shift operation.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Subtraction(gemstone.numeric.UInt24,gemstone.numeric.UInt24)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:gemstone.numeric.UInt24" /> value as result of subtraction operation.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Subtraction(gemstone.numeric.UInt24,System.UInt32)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.UInt24" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:System.UInt32" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value as result of subtraction operation.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_Subtraction(System.UInt32,gemstone.numeric.UInt24)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">
        <see cref="T:System.UInt32" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.UInt24" /> right hand operand.</param>
      <returns>
        <see cref="T:System.UInt32" /> value as result of subtraction operation.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.op_True(gemstone.numeric.UInt24)">
      <summary>
            Returns true if value is greater than zero.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.UInt24" /> value to evaluate.</param>
      <returns>
        <see cref="T:System.Boolean" /> value indicating whether the value is greater than zero.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its 24-bit unsigned integer equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A 24-bit unsigned integer equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than UInt24.MinValue or greater than UInt24.MaxValue.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.UInt24.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its 24-bit unsigned integer equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            A typical value to specify is System.Globalization.NumberStyles.Integer.
            </param>
      <returns>
            A 24-bit unsigned integer equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than UInt24.MinValue or greater than UInt24.MaxValue.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.UInt24.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its 24-bit
            unsigned integer equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            A typical value to specify is System.Globalization.NumberStyles.Integer.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A 24-bit unsigned integer equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than UInt24.MinValue or greater than UInt24.MaxValue.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.UInt24.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its 24-bit
            unsigned integer equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A 24-bit unsigned integer equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than UInt24.MinValue or greater than UInt24.MaxValue.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.UInt24.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.
            </returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.TryParse(System.String,gemstone.numeric.UInt24@)">
      <summary>
            Converts the string representation of a number to its 24-bit unsigned integer equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the 24-bit unsigned integer value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than UInt24.MinValue or greater than UInt24.MaxValue.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:gemstone.numeric.UInt24.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,gemstone.numeric.UInt24@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            24-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            A typical value to specify is System.Globalization.NumberStyles.Integer.
            </param>
      <param name="result">
            When this method returns, contains the 24-bit unsigned integer value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than UInt24.MinValue or greater than
            UInt24.MaxValue. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:gemstone.numeric.analysis.Euclidean">
      <summary>
            Contains an implementation of greatest common denominator
            and least common multiple using the Euclidean algorithm.
            </summary>
    </member>
    <member name="M:gemstone.numeric.analysis.Euclidean.GreatestCommonDenominator(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Gets the greatest common denominator of all the integers in the source collection.
            </summary>
      <param name="source">The collection of integers.</param>
      <returns>The greatest common denominator.</returns>
    </member>
    <member name="M:gemstone.numeric.analysis.Euclidean.GreatestCommonDenominator(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            Gets the greatest common denominator of all the integers in the source collection.
            </summary>
      <param name="source">The collection of integers.</param>
      <returns>The greatest common denominator.</returns>
    </member>
    <member name="M:gemstone.numeric.analysis.Euclidean.GreatestCommonDenominator(System.Int32,System.Int32)">
      <summary>
            Gets the greatest common denominator of the given integers.
            </summary>
      <param name="a">The first of the given integers.</param>
      <param name="b">The second of the given integers.</param>
      <returns>The greatest common denominator.</returns>
    </member>
    <member name="M:gemstone.numeric.analysis.Euclidean.GreatestCommonDenominator(System.Int32[])">
      <summary>
            Gets the greatest common denominator of all the integers in the source collection.
            </summary>
      <param name="source">The collection of integers.</param>
      <returns>The greatest common denominator.</returns>
    </member>
    <member name="M:gemstone.numeric.analysis.Euclidean.GreatestCommonDenominator(System.Int64,System.Int64)">
      <summary>
            Gets the greatest common denominator of the given integers.
            </summary>
      <param name="a">The first of the given integers.</param>
      <param name="b">The second of the given integers.</param>
      <returns>The greatest common denominator.</returns>
    </member>
    <member name="M:gemstone.numeric.analysis.Euclidean.GreatestCommonDenominator(System.Int64[])">
      <summary>
            Gets the greatest common denominator of all the integers in the source collection.
            </summary>
      <param name="source">The collection of integers.</param>
      <returns>The greatest common denominator.</returns>
    </member>
    <member name="M:gemstone.numeric.analysis.Euclidean.LeastCommonMultiple(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Gets the least common multiple of all the integers in the source collection.
            </summary>
      <param name="source">The collection of integers.</param>
      <returns>The least common multiple.</returns>
    </member>
    <member name="M:gemstone.numeric.analysis.Euclidean.LeastCommonMultiple(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            Gets the least common multiple of all the integers in the source collection.
            </summary>
      <param name="source">The collection of integers.</param>
      <returns>The least common multiple.</returns>
    </member>
    <member name="M:gemstone.numeric.analysis.Euclidean.LeastCommonMultiple(System.Int32,System.Int32)">
      <summary>
            Gets the least common multiple of the given integers.
            </summary>
      <param name="a">The first of the given integers.</param>
      <param name="b">The second of the given integers.</param>
      <returns>The least common multiple.</returns>
    </member>
    <member name="M:gemstone.numeric.analysis.Euclidean.LeastCommonMultiple(System.Int32[])">
      <summary>
            Gets the least common multiple of all the integers in the source collection.
            </summary>
      <param name="source">The collection of integers.</param>
      <returns>The least common multiple.</returns>
    </member>
    <member name="M:gemstone.numeric.analysis.Euclidean.LeastCommonMultiple(System.Int64,System.Int64)">
      <summary>
            Gets the least common multiple of the given integers.
            </summary>
      <param name="a">The first of the given integers.</param>
      <param name="b">The second of the given integers.</param>
      <returns>The least common multiple.</returns>
    </member>
    <member name="M:gemstone.numeric.analysis.Euclidean.LeastCommonMultiple(System.Int64[])">
      <summary>
            Gets the least common multiple of all the integers in the source collection.
            </summary>
      <param name="source">The collection of integers.</param>
      <returns>The least common multiple.</returns>
    </member>
    <member name="M:gemstone.numeric.analysis.Euclidean.Mod(System.Double,System.Double)">
      <summary>
            Implementation of the modulo operator using Euclidean division.
            </summary>
      <param name="numerator">The number to be divided.</param>
      <param name="denominator">The number to divide by.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:gemstone.numeric.analysis.Euclidean.Mod(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:gemstone.numeric.analysis.Euclidean.Wrap(System.Double,System.Double,System.Double)">
      <summary>
            Wraps a value to a range of values defined
            by the given minimum value and range.
            </summary>
      <param name="value">The value to be wrapped.</param>
      <param name="minimum">The minimum value of the range.</param>
      <param name="range">The size of the range.</param>
      <returns>The given value wrapped to the given range.</returns>
    </member>
    <member name="T:gemstone.numeric.analysis.GaussianDistribution">
      <summary>
            Implements a BoxMuller method for generating statistically normal random numbers.
            </summary>
    </member>
    <member name="M:gemstone.numeric.analysis.GaussianDistribution.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a <see cref="T:gemstone.numeric.analysis.GaussianDistribution" /></summary>
      <param name="mean">the mean of the distribution</param>
      <param name="standardDeviation">the standard deviation</param>
      <param name="min">a clipping boundary</param>
      <param name="max">a clipping boundary</param>
    </member>
    <member name="M:gemstone.numeric.analysis.GaussianDistribution.Next">
      <summary>
            Gets the next random value.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:gemstone.numeric.analysis.GaussianDistribution.Next</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:gemstone.numeric.analysis.NumericAnalysisExtensions">
      <summary>
            Defines extension functions related to numerical analysis over a sequence of data.
            </summary>
    </member>
    <member name="M:gemstone.numeric.analysis.NumericAnalysisExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal},System.Boolean)">
      <summary>
            Computes the standard deviation over a sequence of <see cref="T:System.Decimal" /> values.
            </summary>
      <param name="source">Source data sample.</param>
      <param name="calculateForSample">Set to <c>true</c> to calculate for estimated population size, or <c>false</c> for full population.</param>
      <returns>The standard deviation of the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" /> does not contain enough values to produce a result.</exception>
    </member>
    <member name="M:gemstone.numeric.analysis.NumericAnalysisExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double},System.Boolean)">
      <summary>
            Computes the standard deviation over a sequence of <see cref="T:System.Double" /> values.
            </summary>
      <param name="source">Source data sample.</param>
      <param name="calculateForSample">Set to <c>true</c> to calculate for estimated population size, or <c>false</c> for full population.</param>
      <returns>The standard deviation of the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" /> does not contain enough values to produce a result.</exception>
    </member>
    <member name="M:gemstone.numeric.analysis.NumericAnalysisExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Single},System.Boolean)">
      <summary>
            Computes the standard deviation over a sequence of <see cref="T:System.Single" /> values.
            </summary>
      <param name="source">Source data sample.</param>
      <param name="calculateForSample">Set to <c>true</c> to calculate for estimated population size, or <c>false</c> for full population.</param>
      <returns>The standard deviation of the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" /> does not contain enough values to produce a result.</exception>
    </member>
    <member name="M:gemstone.numeric.analysis.NumericAnalysisExtensions.StandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal},System.Boolean)">
      <summary>
            Computes the standard deviation over a sequence of <see cref="T:System.Decimal" /> values.
            </summary>
      <param name="source">Source data sample.</param>
      <param name="selector">Used to map value from enumerable of <typeparamref name="T" /> to enumerable of <see cref="T:System.Decimal" />.</param>
      <param name="calculateForSample">Set to <c>true</c> to calculate for estimated population size, or <c>false</c> for full population.</param>
      <typeparam name="T">Type of source used to extract decimal.</typeparam>
      <returns>The standard deviation of the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" /> does not contain enough values to produce a result.</exception>
    </member>
    <member name="M:gemstone.numeric.analysis.NumericAnalysisExtensions.StandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Boolean)">
      <summary>
            Computes the standard deviation over a sequence of <see cref="T:System.Double" /> values.
            </summary>
      <param name="source">Source data sample.</param>
      <param name="selector">Used to map value from enumerable of <typeparamref name="T" /> to enumerable of <see cref="T:System.Double" />.</param>
      <param name="calculateForSample">Set to <c>true</c> to calculate for estimated population size, or <c>false</c> for full population.</param>
      <typeparam name="T">Type of source used to extract double.</typeparam>
      <returns>The standard deviation of the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" /> does not contain enough values to produce a result.</exception>
    </member>
    <member name="M:gemstone.numeric.analysis.NumericAnalysisExtensions.StandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},System.Boolean)">
      <summary>
            Computes the standard deviation over a sequence of <see cref="T:System.Single" /> values.
            </summary>
      <param name="source">Source data sample.</param>
      <param name="selector">Used to map value from enumerable of <typeparamref name="T" /> to enumerable of <see cref="T:System.Single" />.</param>
      <param name="calculateForSample">Set to <c>true</c> to calculate for estimated population size, or <c>false</c> for full population.</param>
      <typeparam name="T">Type of source used to extract float.</typeparam>
      <returns>The standard deviation of the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" /> does not contain enough values to produce a result.</exception>
    </member>
    <member name="T:gemstone.numeric.interpolation.DistanceFunc">
      <summary>
            Function definition for calculating the distance between two points.
            </summary>
      <param name="x1">The x-coordinate of the first point.</param>
      <param name="y1">The y-coordinate of the first point.</param>
      <param name="x2">The x-coordinate of the second point.</param>
      <param name="y2">The y-coordinate of the second point.</param>
      <returns>The distance between the two given points.</returns>
    </member>
    <member name="T:gemstone.numeric.interpolation.IDWFunc">
      <summary>
            Function definition for the inverse distance weighting algorithm.
            </summary>
      <param name="x">The x-coordinate of the point at which the value is to be calculated.</param>
      <param name="y">The y-coordinate of the point at which the value is to be calculated.</param>
      <returns>The calculated value at the given location.</returns>
    </member>
    <member name="T:gemstone.numeric.interpolation.InverseDistanceWeightingFunction">
      <summary>
            Represents a function for calculating values
            at given coordinates based on sparse data sets.
            </summary>
    </member>
    <member name="M:gemstone.numeric.interpolation.InverseDistanceWeightingFunction.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.numeric.interpolation.InverseDistanceWeightingFunction" /> class.
            </summary>
    </member>
    <member name="M:gemstone.numeric.interpolation.InverseDistanceWeightingFunction.DefaultDistanceFunction(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Calculates the distance between two points.
            </summary>
      <param name="x1">The x-coordinate of the first point.</param>
      <param name="y1">The y-coordinate of the first point.</param>
      <param name="x2">The x-coordinate of the second point.</param>
      <param name="y2">The y-coordinate of the second point.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:gemstone.numeric.interpolation.InverseDistanceWeightingFunction.DefaultDistanceFunction(System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:gemstone.numeric.interpolation.InverseDistanceWeightingFunction.DistanceFunction">
      <summary>
            Gets the function to be used to calculate the distance between two points.
            </summary>
    </member>
    <member name="M:gemstone.numeric.interpolation.InverseDistanceWeightingFunction.op_Implicit(gemstone.numeric.interpolation.InverseDistanceWeightingFunction)~gemstone.numeric.interpolation.IDWFunc">
      <summary>
            Converts the <see cref="T:gemstone.numeric.interpolation.InverseDistanceWeightingFunction" />
            object to an <see cref="T:gemstone.numeric.interpolation.IDWFunc" /> to start converting values.
            </summary>
      <param name="idwFunction">The inverse distance weighting function to be converted.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:gemstone.numeric.interpolation.InverseDistanceWeightingFunction.op_Implicit(gemstone.numeric.interpolation.InverseDistanceWeightingFunction)~gemstone.numeric.interpolation.IDWFunc</parameter>
          </include>
        </markup>
      </returns>
      <exception cref="T:System.InvalidOperationException">
        <para>the number of x-coordinates does not equal the number of y-coordinates</para>
        <para>- or -</para>
        <para>the number of coordinates does not equal the number of values</para>
      </exception>
    </member>
    <member name="P:gemstone.numeric.interpolation.InverseDistanceWeightingFunction.Power">
      <summary>
            Gets the power applied to the inverse distance to control the speed of value's decay.
            </summary>
    </member>
    <member name="M:gemstone.numeric.interpolation.InverseDistanceWeightingFunction.SetDistanceFunction(gemstone.numeric.interpolation.DistanceFunc)">
      <summary>
            Sets the function to be used to calculate the distance between two points.
            </summary>
      <param name="distanceFunction">The function used to calculate distance between two points.</param>
      <returns>A reference to the inverse distance weighting function.</returns>
    </member>
    <member name="M:gemstone.numeric.interpolation.InverseDistanceWeightingFunction.SetPower(System.Double)">
      <summary>
            Sets the power applied to the inverse distance to control the speed of value's decay.
            </summary>
      <param name="power">The power applied to the inverse of the distance.</param>
      <returns>A reference to the inverse distance weighting function.</returns>
    </member>
    <member name="M:gemstone.numeric.interpolation.InverseDistanceWeightingFunction.SetValues(System.Double[])">
      <summary>
            Sets the collection of values of points at which the values are known.
            </summary>
      <param name="values">The values of points at which the values are known.</param>
      <returns>A reference to the inverse distance weighting function.</returns>
    </member>
    <member name="M:gemstone.numeric.interpolation.InverseDistanceWeightingFunction.SetXCoordinates(System.Double[])">
      <summary>
            Sets the collection of x-coordinates of points at which the values are known.
            </summary>
      <param name="xCoordinates">The x-coordinates of points at which the values are known.</param>
      <returns>A reference to the inverse distance weighting function.</returns>
    </member>
    <member name="M:gemstone.numeric.interpolation.InverseDistanceWeightingFunction.SetYCoordinates(System.Double[])">
      <summary>
            Sets the collection of y-coordinates of points at which the values are known.
            </summary>
      <param name="yCoordinates">The y-coordinates of points at which the values are known.</param>
      <returns>A reference to the inverse distance weighting function.</returns>
    </member>
    <member name="P:gemstone.numeric.interpolation.InverseDistanceWeightingFunction.Values">
      <summary>
            Gets the collection of values of points at which the values are known.
            </summary>
    </member>
    <member name="P:gemstone.numeric.interpolation.InverseDistanceWeightingFunction.XCoordinates">
      <summary>
            Gets the collection of x-coordinates of points at which the values are known.
            </summary>
    </member>
    <member name="P:gemstone.numeric.interpolation.InverseDistanceWeightingFunction.YCoordinates">
      <summary>
            Gets the collection of y-coordinates of points at which the values are known.
            </summary>
    </member>
    <member name="T:gemstone.numeric.interpolation.PiecewiseLinearFunction">
      <summary>
            Represents a piecewise linear function for
            calculating values between pivot points.
            </summary>
    </member>
    <member name="M:gemstone.numeric.interpolation.PiecewiseLinearFunction.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>gemstone.numeric.interpolation.PiecewiseLinearFunction</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:gemstone.numeric.interpolation.PiecewiseLinearFunction.Domain">
      <summary>
            Gets the x-values of the pivot points in the piecewise linear function.
            </summary>
    </member>
    <member name="M:gemstone.numeric.interpolation.PiecewiseLinearFunction.op_Implicit(gemstone.numeric.interpolation.PiecewiseLinearFunction)~System.Func{System.Double,System.Double}">
      <summary>
            Converts the <see cref="T:gemstone.numeric.interpolation.PiecewiseLinearFunction" /> object to a
            <see cref="T:System.Func`2" /> to start converting values.
            </summary>
      <param name="func">The piecewise linear function to be converted.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:gemstone.numeric.interpolation.PiecewiseLinearFunction.op_Implicit(gemstone.numeric.interpolation.PiecewiseLinearFunction)~System.Func{System.Double,System.Double}</parameter>
          </include>
        </markup>
      </returns>
      <exception cref="T:System.InvalidOperationException">
        <para>the size of the domain does not equal the size of the range</para>
        <para>- or -</para>
        <para>less than two pivot points are defined</para>
      </exception>
    </member>
    <member name="P:gemstone.numeric.interpolation.PiecewiseLinearFunction.Range">
      <summary>
            Gets the y-values of the pivot points in the piecewise linear function.
            </summary>
    </member>
    <member name="M:gemstone.numeric.interpolation.PiecewiseLinearFunction.SetDomain(System.Double[])">
      <summary>
            Sets the x-values of the pivot points in the piecewise linear function.
            </summary>
      <param name="domain">The x-values of the pivot points.</param>
      <returns>A reference to the piecewise linear function.</returns>
    </member>
    <member name="M:gemstone.numeric.interpolation.PiecewiseLinearFunction.SetRange(System.Double[])">
      <summary>
            Sets the y-values of the pivot points in the piecewise linear function.
            </summary>
      <param name="range">The y-values of the pivot points.</param>
      <returns>A reference to the piecewise linear function.</returns>
    </member>
    <member name="T:gemstone.numeric.units.Angle">
      <summary>
            Represents an angle, in radians, as a double-precision floating-point number.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.Angle.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Angle" />.
            </summary>
      <param name="value">New angle value in radians.</param>
    </member>
    <member name="M:gemstone.numeric.units.Angle.Average(System.Collections.Generic.IEnumerable{gemstone.numeric.units.Angle})">
      <summary>
            Calculates an average of the specified sequence of <see cref="T:gemstone.numeric.units.Angle" /> values.
            </summary>
      <param name="source">Sequence of <see cref="T:gemstone.numeric.units.Angle" /> values over which to calculate average.</param>
      <returns>Average of the specified sequence of <see cref="T:gemstone.numeric.units.Angle" /> values.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.CompareTo(gemstone.numeric.units.Angle)">
      <summary>
            Compares this instance to a specified <see cref="T:gemstone.numeric.units.Angle" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">An <see cref="T:gemstone.numeric.units.Angle" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.CompareTo(System.Double)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Double" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double" /> or <see cref="T:gemstone.numeric.units.Angle" />.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Angle.ConvertFrom(System.Double,gemstone.numeric.units.AngleUnit)">
      <summary>
            Converts the <paramref name="value" /> in the specified <paramref name="sourceUnit" /> to a new <see cref="T:gemstone.numeric.units.Angle" /> in radians.
            </summary>
      <param name="value">Source value.</param>
      <param name="sourceUnit">Source value units.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Angle" /> from the specified <paramref name="value" /> in <paramref name="sourceUnit" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.ConvertTo(gemstone.numeric.units.AngleUnit)">
      <summary>
            Converts the <see cref="T:gemstone.numeric.units.Angle" /> to the specified <paramref name="targetUnit" />.
            </summary>
      <param name="targetUnit">Target units.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Angle" /> converted to <paramref name="targetUnit" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.Equals(gemstone.numeric.units.Angle)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:gemstone.numeric.units.Angle" /> value.
            </summary>
      <param name="obj">An <see cref="T:gemstone.numeric.units.Angle" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.Equals(System.Double)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.Double" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Double" /> or <see cref="T:gemstone.numeric.units.Angle" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.FromAngularMil(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Angle" /> value from the specified <paramref name="value" /> in angular mil.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Angle" /> value in angular mil.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Angle" /> object from the specified <paramref name="value" /> in angular mil.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.FromArcMinutes(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Angle" /> value from the specified <paramref name="value" /> in arcminutes.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Angle" /> value in arcminutes.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Angle" /> object from the specified <paramref name="value" /> in arcminutes.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.FromArcSeconds(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Angle" /> value from the specified <paramref name="value" /> in arcseconds.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Angle" /> value in arcseconds.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Angle" /> object from the specified <paramref name="value" /> in arcseconds.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.FromDegrees(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Angle" /> value from the specified <paramref name="value" /> in degrees.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Angle" /> value in degrees.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Angle" /> object from the specified <paramref name="value" /> in degrees.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.FromGrads(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Angle" /> value from the specified <paramref name="value" /> in grads.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Angle" /> value in grads.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Angle" /> object from the specified <paramref name="value" /> in grads.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="F:gemstone.numeric.units.Angle.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:gemstone.numeric.units.Angle" />. This field is constant.</summary>
    </member>
    <member name="F:gemstone.numeric.units.Angle.MinValue">
      <summary>Represents the smallest possible value of an <see cref="T:gemstone.numeric.units.Angle" />. This field is constant.</summary>
    </member>
    <member name="M:gemstone.numeric.units.Angle.op_Addition(gemstone.numeric.units.Angle,gemstone.numeric.units.Angle)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">An <see cref="T:gemstone.numeric.units.Angle" /> as the left hand operand.</param>
      <param name="value2">An <see cref="T:gemstone.numeric.units.Angle" /> as the right hand operand.</param>
      <returns>An <see cref="T:gemstone.numeric.units.Angle" /> as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.op_Division(gemstone.numeric.units.Angle,gemstone.numeric.units.Angle)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">An <see cref="T:gemstone.numeric.units.Angle" /> as the left hand operand.</param>
      <param name="value2">An <see cref="T:gemstone.numeric.units.Angle" /> as the right hand operand.</param>
      <returns>An <see cref="T:gemstone.numeric.units.Angle" /> as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.op_Equality(gemstone.numeric.units.Angle,gemstone.numeric.units.Angle)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">An <see cref="T:gemstone.numeric.units.Angle" /> as the left hand operand.</param>
      <param name="value2">An <see cref="T:gemstone.numeric.units.Angle" /> as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the operation result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.op_Exponent(gemstone.numeric.units.Angle,gemstone.numeric.units.Angle)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">An <see cref="T:gemstone.numeric.units.Angle" /> as the left hand operand.</param>
      <param name="value2">An <see cref="T:gemstone.numeric.units.Angle" /> as the right hand operand.</param>
      <returns>A <see cref="T:System.Double" /> as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.op_GreaterThan(gemstone.numeric.units.Angle,gemstone.numeric.units.Angle)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">An <see cref="T:gemstone.numeric.units.Angle" /> as the left hand operand.</param>
      <param name="value2">An <see cref="T:gemstone.numeric.units.Angle" /> as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the operation result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.op_GreaterThanOrEqual(gemstone.numeric.units.Angle,gemstone.numeric.units.Angle)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">An <see cref="T:gemstone.numeric.units.Angle" /> as the left hand operand.</param>
      <param name="value2">An <see cref="T:gemstone.numeric.units.Angle" /> as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the operation result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.op_Implicit(gemstone.numeric.units.Angle)~System.Double">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.units.Angle" />, represented in radians, to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">An <see cref="T:gemstone.numeric.units.Angle" /> object.</param>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.op_Implicit(System.Double)~gemstone.numeric.units.Angle">
      <summary>
            Implicitly converts value, represented in radians, to an <see cref="T:gemstone.numeric.units.Angle" />.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
      <returns>An <see cref="T:gemstone.numeric.units.Angle" /> object.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.op_Inequality(gemstone.numeric.units.Angle,gemstone.numeric.units.Angle)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">An <see cref="T:gemstone.numeric.units.Angle" /> as the left hand operand.</param>
      <param name="value2">An <see cref="T:gemstone.numeric.units.Angle" /> as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the operation result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.op_LessThan(gemstone.numeric.units.Angle,gemstone.numeric.units.Angle)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">An <see cref="T:gemstone.numeric.units.Angle" /> as the left hand operand.</param>
      <param name="value2">An <see cref="T:gemstone.numeric.units.Angle" /> as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the operation result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.op_LessThanOrEqual(gemstone.numeric.units.Angle,gemstone.numeric.units.Angle)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">An <see cref="T:gemstone.numeric.units.Angle" /> as the left hand operand.</param>
      <param name="value2">An <see cref="T:gemstone.numeric.units.Angle" /> as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the operation result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.op_Modulus(gemstone.numeric.units.Angle,gemstone.numeric.units.Angle)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">An <see cref="T:gemstone.numeric.units.Angle" /> as the left hand operand.</param>
      <param name="value2">An <see cref="T:gemstone.numeric.units.Angle" /> as the right hand operand.</param>
      <returns>An <see cref="T:gemstone.numeric.units.Angle" /> as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.op_Multiply(gemstone.numeric.units.Angle,gemstone.numeric.units.Angle)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">An <see cref="T:gemstone.numeric.units.Angle" /> as the left hand operand.</param>
      <param name="value2">An <see cref="T:gemstone.numeric.units.Angle" /> as the right hand operand.</param>
      <returns>An <see cref="T:gemstone.numeric.units.Angle" /> as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.op_Subtraction(gemstone.numeric.units.Angle,gemstone.numeric.units.Angle)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">An <see cref="T:gemstone.numeric.units.Angle" /> as the left hand operand.</param>
      <param name="value2">An <see cref="T:gemstone.numeric.units.Angle" /> as the right hand operand.</param>
      <returns>An <see cref="T:gemstone.numeric.units.Angle" /> as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Angle" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            An <see cref="T:gemstone.numeric.units.Angle" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Angle.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Angle.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Angle.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:gemstone.numeric.units.Angle" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            An <see cref="T:gemstone.numeric.units.Angle" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Angle.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Angle.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Angle.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:gemstone.numeric.units.Angle" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            An <see cref="T:gemstone.numeric.units.Angle" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Angle.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Angle.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Angle.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:gemstone.numeric.units.Angle" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            An <see cref="T:gemstone.numeric.units.Angle" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Angle.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Angle.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Angle.ToAngularMil">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Angle" /> value in angular mil.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Angle" /> in angular mil.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.ToArcMinutes">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Angle" /> value in arcminutes.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Angle" /> in arcminutes.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.ToArcSeconds">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Angle" /> value in arcseconds.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Angle" /> in arcseconds.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.ToDegrees">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Angle" /> value in degrees.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Angle" /> in degrees.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.ToGrads">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Angle" /> value in grads.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Angle" /> in grads.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.ToRange(gemstone.numeric.units.Angle,System.Boolean)">
      <summary>
            Gets the equivalent angle moved within the range of <paramref name="minValue" />
            and <paramref name="minValue" /> + 2.0 * <see cref="F:System.Math.PI" />.
            </summary>
      <param name="minValue">The minimum value of the range.</param>
      <param name="inclusive">Indicates whether the range is inclusive of the minimum value.</param>
      <returns>The equivalent angle within the specified range.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeros.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.TryParse(System.String,gemstone.numeric.units.Angle@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Angle" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Angle" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:gemstone.numeric.units.Angle.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Angle.MaxValue" />.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Angle.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,gemstone.numeric.units.Angle@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:gemstone.numeric.units.Angle" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Angle" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:gemstone.numeric.units.Angle.MinValue" /> or
            greater than <see cref="F:gemstone.numeric.units.Angle.MaxValue" />. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="M:gemstone.numeric.units.Angle.Unwrap(System.Collections.Generic.IEnumerable{gemstone.numeric.units.Angle})">
      <summary>
            Unwraps a set of <see cref="T:gemstone.numeric.units.Angle" /> values so a comparable mathematical operation can be applied.
            </summary>
      <param name="source">Sequence of <see cref="T:gemstone.numeric.units.Angle" /> values to unwrap.</param>
      <returns>Unwrapped set of <see cref="T:gemstone.numeric.units.Angle" /> values.</returns>
    </member>
    <member name="T:gemstone.numeric.units.AngleUnit">
      <summary>
            Represents the units available for an <see cref="T:gemstone.numeric.units.Angle" /> value.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.AngleUnit.Radians">
      <summary>
            Radian angle units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.AngleUnit.Degrees">
      <summary>
            Degree angle units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.AngleUnit.Grads">
      <summary>
            Grad angle units, a.k.a., grade, gradian and gon.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.AngleUnit.ArcMinutes">
      <summary>
            ArcMinute angle units, a.k.a., minute of arc or MOA.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.AngleUnit.ArcSeconds">
      <summary>
            ArcSecond angle units, a.k.a., second of arc.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.AngleUnit.AngularMil">
      <summary>
            AngularMil angle units, a.k.a., mil.
            </summary>
    </member>
    <member name="T:gemstone.numeric.units.BaselineTimeInterval">
      <summary>
            Time intervals enumeration used by <see cref="M:gemstone.numeric.units.Ticks.BaselinedTimestamp(gemstone.numeric.units.BaselineTimeInterval)" /> method.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.BaselineTimeInterval.Second">
      <summary>
            Baseline timestamp to the second (i.e., starting at zero milliseconds).
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.BaselineTimeInterval.Minute">
      <summary>
            Baseline timestamp to the minute (i.e., starting at zero seconds and milliseconds).
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.BaselineTimeInterval.Hour">
      <summary>
            Baseline timestamp to the hour (i.e., starting at zero minutes, seconds and milliseconds).
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.BaselineTimeInterval.Day">
      <summary>
            Baseline timestamp to the day (i.e., starting at zero hours, minutes, seconds and milliseconds).
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.BaselineTimeInterval.Month">
      <summary>
            Baseline timestamp to the month (i.e., starting at day one, zero hours, minutes, seconds and milliseconds).
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.BaselineTimeInterval.Year">
      <summary>
            Baseline timestamp to the year (i.e., starting at month one, day one, zero hours, minutes, seconds and milliseconds).
            </summary>
    </member>
    <member name="T:gemstone.numeric.units.Charge">
      <summary>
            Represents an electric charge measurement, in coulombs (i.e., ampere-seconds), as a double-precision floating-point number.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.Charge.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Charge" />.
            </summary>
      <param name="value">New charge value in coulombs.</param>
    </member>
    <member name="M:gemstone.numeric.units.Charge.CompareTo(gemstone.numeric.units.Charge)">
      <summary>
            Compares this instance to a specified <see cref="T:gemstone.numeric.units.Charge" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:gemstone.numeric.units.Charge" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.CompareTo(System.Double)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Double" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double" /> or <see cref="T:gemstone.numeric.units.Charge" />.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Charge.ConvertFrom(System.Double,gemstone.numeric.units.ChargeUnit)">
      <summary>
            Converts the <paramref name="value" /> in the specified <paramref name="sourceUnit" /> to a new <see cref="T:gemstone.numeric.units.Charge" /> in coulombs.
            </summary>
      <param name="value">Source value.</param>
      <param name="sourceUnit">Source value units.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Charge" /> from the specified <paramref name="value" /> in <paramref name="sourceUnit" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.ConvertTo(gemstone.numeric.units.ChargeUnit)">
      <summary>
            Converts the <see cref="T:gemstone.numeric.units.Charge" /> to the specified <paramref name="targetUnit" />.
            </summary>
      <param name="targetUnit">Target units.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Charge" /> converted to <paramref name="targetUnit" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.Equals(gemstone.numeric.units.Charge)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:gemstone.numeric.units.Charge" /> value.
            </summary>
      <param name="obj">A <see cref="T:gemstone.numeric.units.Charge" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.Equals(System.Double)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.Double" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Double" /> or <see cref="T:gemstone.numeric.units.Charge" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.FromAbcoulombs(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Charge" /> value from the specified <paramref name="value" /> in abcoulombs.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Charge" /> value in abcoulombs.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Charge" /> object from the specified <paramref name="value" /> in abcoulombs.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.FromAmpereHours(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Charge" /> value from the specified <paramref name="value" /> in ampere-hours.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Charge" /> value in ampere-hours.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Charge" /> object from the specified <paramref name="value" /> in ampere-hours.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.FromAtomicUnitsOfCharge(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Charge" /> value from the specified <paramref name="value" /> in atomic units of charge.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Charge" /> value in atomic units of charge.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Charge" /> object from the specified <paramref name="value" /> in atomic units of charge.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.FromFaraday(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Charge" /> value from the specified <paramref name="value" /> in faraday.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Charge" /> value in faraday.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Charge" /> object from the specified <paramref name="value" /> in faraday.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.FromStatcoulombs(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Charge" /> value from the specified <paramref name="value" /> in statcoulombs.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Charge" /> value in statcoulombs.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Charge" /> object from the specified <paramref name="value" /> in statcoulombs.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="F:gemstone.numeric.units.Charge.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:gemstone.numeric.units.Charge" />. This field is constant.</summary>
    </member>
    <member name="F:gemstone.numeric.units.Charge.MinValue">
      <summary>Represents the smallest possible value of an <see cref="T:gemstone.numeric.units.Charge" />. This field is constant.</summary>
    </member>
    <member name="M:gemstone.numeric.units.Charge.op_Addition(gemstone.numeric.units.Charge,gemstone.numeric.units.Charge)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Charge" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Charge" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Charge" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.op_Division(gemstone.numeric.units.Charge,gemstone.numeric.units.Charge)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Charge" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Charge" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Charge" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.op_Equality(gemstone.numeric.units.Charge,gemstone.numeric.units.Charge)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Charge" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Charge" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.op_Exponent(gemstone.numeric.units.Charge,gemstone.numeric.units.Charge)">
      <summary>
            Returns result of first value raised to charge of second value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Charge" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Charge" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Double" /> as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.op_GreaterThan(gemstone.numeric.units.Charge,gemstone.numeric.units.Charge)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Charge" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Charge" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.op_GreaterThanOrEqual(gemstone.numeric.units.Charge,gemstone.numeric.units.Charge)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Charge" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Charge" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.op_Implicit(gemstone.numeric.units.Charge)~System.Double">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.units.Charge" />, represented in coulombs, to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">A <see cref="T:gemstone.numeric.units.Charge" /> value.</param>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.op_Implicit(System.Double)~gemstone.numeric.units.Charge">
      <summary>
            Implicitly converts value, represented in coulombs, to a <see cref="T:gemstone.numeric.units.Charge" />.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Charge" /> value.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.op_Inequality(gemstone.numeric.units.Charge,gemstone.numeric.units.Charge)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Charge" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Charge" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.op_LessThan(gemstone.numeric.units.Charge,gemstone.numeric.units.Charge)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Charge" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Charge" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.op_LessThanOrEqual(gemstone.numeric.units.Charge,gemstone.numeric.units.Charge)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Charge" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Charge" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.op_Modulus(gemstone.numeric.units.Charge,gemstone.numeric.units.Charge)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Charge" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Charge" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Charge" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.op_Multiply(gemstone.numeric.units.Charge,gemstone.numeric.units.Charge)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Charge" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Charge" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Charge" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.op_Subtraction(gemstone.numeric.units.Charge,gemstone.numeric.units.Charge)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Charge" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Charge" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Charge" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Charge" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Charge" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Charge.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Charge.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Charge.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:gemstone.numeric.units.Charge" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Charge" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Charge.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Charge.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Charge.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:gemstone.numeric.units.Charge" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Charge" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Charge.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Charge.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Charge.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:gemstone.numeric.units.Charge" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Charge" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Charge.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Charge.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Charge.ToAbcoulombs">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Charge" /> value in abcoulombs.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Charge" /> in abcoulombs.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.ToAmpereHours">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Energy" /> value in ampere-hours.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Energy" /> in ampere-hours.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.ToAtomicUnitsOfCharge">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Charge" /> value in atomic units of charge.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Charge" /> in atomic units of charge.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.ToFaraday">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Charge" /> value in faraday.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Charge" /> in faraday.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.ToStatcoulombs">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Charge" /> value in statcoulombs.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Charge" /> in statcoulombs.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeros.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.TryParse(System.String,gemstone.numeric.units.Charge@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Charge" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Charge" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:gemstone.numeric.units.Charge.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Charge.MaxValue" />.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Charge.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,gemstone.numeric.units.Charge@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:gemstone.numeric.units.Charge" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Charge" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:gemstone.numeric.units.Charge.MinValue" /> or
            greater than <see cref="F:gemstone.numeric.units.Charge.MaxValue" />. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:gemstone.numeric.units.ChargeUnit">
      <summary>
            Represents the units available for a <see cref="T:gemstone.numeric.units.Charge" /> value.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ChargeUnit.Coulombs">
      <summary>
            Coulomb charge units, i.e., ampere-seconds.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ChargeUnit.AmpereHours">
      <summary>
            AmpereHour charge units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ChargeUnit.Abcoulombs">
      <summary>
            Abcoulomb charge units, a.k.a., an electromagnetic unit.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ChargeUnit.Statcoulombs">
      <summary>
            Statcoulomb charge units, a.k.a., electrostatic unit or franklin.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ChargeUnit.AtomicUnitsOfCharge">
      <summary>
            Atomic charge units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ChargeUnit.Faraday">
      <summary>
            Faraday charge units.
            </summary>
    </member>
    <member name="T:gemstone.numeric.units.Class">
      <summary>
            Sample class for new Units library.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.Class.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>gemstone.numeric.units.Class</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:gemstone.numeric.units.Current">
      <summary>
            Represents an electric current measurement, in amperes, as a double-precision floating-point number.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.Current.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Current" />.
            </summary>
      <param name="value">New current value in amperes.</param>
    </member>
    <member name="M:gemstone.numeric.units.Current.CompareTo(gemstone.numeric.units.Current)">
      <summary>
            Compares this instance to a specified <see cref="T:gemstone.numeric.units.Current" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:gemstone.numeric.units.Current" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.CompareTo(System.Double)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Double" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double" /> or <see cref="T:gemstone.numeric.units.Current" />.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Current.ConvertFrom(System.Double,gemstone.numeric.units.CurrentUnit)">
      <summary>
            Converts the <paramref name="value" /> in the specified <paramref name="sourceUnit" /> to a new <see cref="T:gemstone.numeric.units.Current" /> in amperes.
            </summary>
      <param name="value">Source value.</param>
      <param name="sourceUnit">Source value units.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Current" /> from the specified <paramref name="value" /> in <paramref name="sourceUnit" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.ConvertTo(gemstone.numeric.units.CurrentUnit)">
      <summary>
            Converts the <see cref="T:gemstone.numeric.units.Current" /> to the specified <paramref name="targetUnit" />.
            </summary>
      <param name="targetUnit">Target units.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Current" /> converted to <paramref name="targetUnit" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.Equals(gemstone.numeric.units.Current)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:gemstone.numeric.units.Current" /> value.
            </summary>
      <param name="obj">A <see cref="T:gemstone.numeric.units.Current" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.Equals(System.Double)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.Double" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Double" /> or <see cref="T:gemstone.numeric.units.Current" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.FromAbamperes(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Current" /> value from the specified <paramref name="value" /> in abamperes.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Current" /> value in abamperes.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Current" /> object from the specified <paramref name="value" /> in abamperes.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.FromStatamperes(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Current" /> value from the specified <paramref name="value" /> in statamperes.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Current" /> value in statamperes.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Current" /> object from the specified <paramref name="value" /> in statamperes.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="F:gemstone.numeric.units.Current.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:gemstone.numeric.units.Current" />. This field is constant.</summary>
    </member>
    <member name="F:gemstone.numeric.units.Current.MinValue">
      <summary>Represents the smallest possible value of an <see cref="T:gemstone.numeric.units.Current" />. This field is constant.</summary>
    </member>
    <member name="M:gemstone.numeric.units.Current.op_Addition(gemstone.numeric.units.Current,gemstone.numeric.units.Current)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Current" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Current" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Current" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.op_Division(gemstone.numeric.units.Current,gemstone.numeric.units.Current)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Current" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Current" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Current" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.op_Equality(gemstone.numeric.units.Current,gemstone.numeric.units.Current)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Current" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Current" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.op_Exponent(gemstone.numeric.units.Current,gemstone.numeric.units.Current)">
      <summary>
            Returns result of first value raised to current of second value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Current" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Current" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Double" /> value as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.op_GreaterThan(gemstone.numeric.units.Current,gemstone.numeric.units.Current)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Current" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Current" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.op_GreaterThanOrEqual(gemstone.numeric.units.Current,gemstone.numeric.units.Current)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Current" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Current" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.op_Implicit(gemstone.numeric.units.Current)~System.Double">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.units.Current" />, represented in amperes, to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">A <see cref="T:gemstone.numeric.units.Current" /> object.</param>
      <returns>A <see cref="T:System.Double" /> value as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.op_Implicit(System.Double)~gemstone.numeric.units.Current">
      <summary>
            Implicitly converts value, represented in amperes, to a <see cref="T:gemstone.numeric.units.Current" />.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Current" /> object as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.op_Inequality(gemstone.numeric.units.Current,gemstone.numeric.units.Current)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Current" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Current" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.op_LessThan(gemstone.numeric.units.Current,gemstone.numeric.units.Current)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Current" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Current" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.op_LessThanOrEqual(gemstone.numeric.units.Current,gemstone.numeric.units.Current)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Current" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Current" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.op_Modulus(gemstone.numeric.units.Current,gemstone.numeric.units.Current)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Current" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Current" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Current" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.op_Multiply(gemstone.numeric.units.Current,gemstone.numeric.units.Current)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Current" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Current" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Current" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.op_Subtraction(gemstone.numeric.units.Current,gemstone.numeric.units.Current)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Current" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Current" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Current" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Current" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Current" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Current.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Current.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Current.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:gemstone.numeric.units.Current" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Current" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Current.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Current.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Current.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:gemstone.numeric.units.Current" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Current" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Current.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Current.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Current.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:gemstone.numeric.units.Current" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Current" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Current.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Current.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Current.ToAbamperes">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Current" /> value in abamperes.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Current" /> in abamperes.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.ToStatamperes">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Current" /> value in statamperes.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Current" /> in statamperes.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeros.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.TryParse(System.String,gemstone.numeric.units.Current@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Current" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Current" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:gemstone.numeric.units.Current.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Current.MaxValue" />.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Current.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,gemstone.numeric.units.Current@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:gemstone.numeric.units.Current" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Current" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:gemstone.numeric.units.Current.MinValue" /> or
            greater than <see cref="F:gemstone.numeric.units.Current.MaxValue" />. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:gemstone.numeric.units.CurrentUnit">
      <summary>
            Represents the units available for a <see cref="T:gemstone.numeric.units.Current" /> value.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.CurrentUnit.Amperes">
      <summary>
            Ampere current units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.CurrentUnit.Abamperes">
      <summary>
            Abampere current units, a.k.a., an electromagnetic unit.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.CurrentUnit.Statamperes">
      <summary>
            Statampere current units, a.k.a., esu per second.
            </summary>
    </member>
    <member name="T:gemstone.numeric.units.DateTimeExtensions">
      <summary>
            Defines extension functions related to Date/Time manipulation.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.DateTimeExtensions.BaselinedTimestamp(System.DateTime,gemstone.numeric.units.BaselineTimeInterval)">
      <summary>Creates a baselined timestamp which begins at the specified time interval.</summary>
      <param name="timestamp">Timestamp to baseline.</param>
      <param name="interval">
        <see cref="T:gemstone.numeric.units.BaselineTimeInterval" /> to which <paramref name="timestamp" /> should be baselined.
            </param>
      <returns>
            A new <see cref="T:System.DateTime" /> value that represents a baselined timestamp that begins at the
            specified <see cref="T:gemstone.numeric.units.BaselineTimeInterval" />.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.DateTimeExtensions.DistanceBeyondSecond(System.DateTime)">
      <summary>Gets the distance, in <see cref="T:gemstone.numeric.units.Ticks" />, beyond the top of the <paramref name="timestamp" /> second.</summary>
      <param name="timestamp">Timestamp to evaluate.</param>
      <returns>Timestamp's tick distance from the top of the second.</returns>
    </member>
    <member name="M:gemstone.numeric.units.DateTimeExtensions.LocalTimeIsValid(System.DateTime,System.Double,System.Double)">
      <summary>Determines if the specified local time is valid, by comparing it to the system clock.</summary>
      <param name="localTime">Time to test for validity.</param>
      <param name="lagTime">The allowed lag time, in seconds, before assuming time is too old to be valid.</param>
      <param name="leadTime">The allowed lead time, in seconds, before assuming time is too advanced to be
            valid.</param>
      <returns>True, if time is within the specified range.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">LagTime and LeadTime must be greater than zero, but can
            be less than one.</exception>
    </member>
    <member name="M:gemstone.numeric.units.DateTimeExtensions.TimeIsValid(System.DateTime,System.DateTime,System.Double,System.Double)">
      <summary>Determines if time is valid, by comparing it to the specified current time.</summary>
      <param name="testTime">Time to test for validity.</param>
      <param name="currentTime">Specified current time (e.g., could be Date.Now or Date.UtcNow).</param>
      <param name="lagTime">The allowed lag time, in seconds, before assuming time is too old to be valid.</param>
      <param name="leadTime">The allowed lead time, in seconds, before assuming time is too advanced to be
            valid.</param>
      <returns>True, if time is within the specified range.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">LagTime and LeadTime must be greater than zero, but can
            be less than one.</exception>
    </member>
    <member name="M:gemstone.numeric.units.DateTimeExtensions.UtcTimeIsValid(System.DateTime,System.Double,System.Double)">
      <summary>Determines if the specified UTC time is valid, by comparing it to the system clock.</summary>
      <param name="utcTime">UTC time to test for validity.</param>
      <param name="lagTime">The allowed lag time, in seconds, before assuming time is too old to be valid.</param>
      <param name="leadTime">The allowed lead time, in seconds, before assuming time is too advanced to be
            valid.</param>
      <returns>True, if time is within the specified range.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">LagTime and LeadTime must be greater than zero, but can
            be less than one.</exception>
    </member>
    <member name="T:gemstone.numeric.units.Energy">
      <summary>
            Represents an energy measurement, in joules (i.e., watt-seconds), as a double-precision floating-point number.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.Energy.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Energy" />.
            </summary>
      <param name="value">New energy value in joules.</param>
    </member>
    <member name="M:gemstone.numeric.units.Energy.CompareTo(gemstone.numeric.units.Energy)">
      <summary>
            Compares this instance to a specified <see cref="T:gemstone.numeric.units.Energy" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">An <see cref="T:gemstone.numeric.units.Energy" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.CompareTo(System.Double)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Double" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double" /> or <see cref="T:gemstone.numeric.units.Energy" />.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Energy.ConvertFrom(System.Double,gemstone.numeric.units.EnergyUnit)">
      <summary>
            Converts the <paramref name="value" /> in the specified <paramref name="sourceUnit" /> to a new <see cref="T:gemstone.numeric.units.Energy" /> in joules.
            </summary>
      <param name="value">Source value.</param>
      <param name="sourceUnit">Source value units.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Energy" /> from the specified <paramref name="value" /> in <paramref name="sourceUnit" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.ConvertTo(gemstone.numeric.units.EnergyUnit)">
      <summary>
            Converts the <see cref="T:gemstone.numeric.units.Energy" /> to the specified <paramref name="targetUnit" />.
            </summary>
      <param name="targetUnit">Target units.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Energy" /> converted to <paramref name="targetUnit" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.Equals(gemstone.numeric.units.Energy)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:gemstone.numeric.units.Energy" /> value.
            </summary>
      <param name="obj">An <see cref="T:gemstone.numeric.units.Energy" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.Equals(System.Double)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.Double" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Double" /> or <see cref="T:gemstone.numeric.units.Energy" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.FromBarrelsOfOil(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Energy" /> value from the specified <paramref name="value" /> in equivalent barrels of oil.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Energy" /> value in equivalent barrels of oil.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Energy" /> object from the specified <paramref name="value" /> in equivalent barrels of oil.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.FromBTU(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Energy" /> value from the specified <paramref name="value" /> in BTU (International Table).
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Energy" /> value in BTU.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Energy" /> object from the specified <paramref name="value" /> in BTU.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.FromCalories(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Energy" /> value from the specified <paramref name="value" /> in calories (International Table).
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Energy" /> value in calories.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Energy" /> object from the specified <paramref name="value" /> in calories.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.FromCelsiusHeatUnits(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Energy" /> value from the specified <paramref name="value" /> in Celsius heat units (International Table).
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Energy" /> value in Celsius heat units.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Energy" /> object from the specified <paramref name="value" /> in Celsius heat units.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.FromHorsepowerHours(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Energy" /> value from the specified <paramref name="value" /> in horsepower-hours.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Energy" /> value in horsepower-hours.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Energy" /> object from the specified <paramref name="value" /> in horsepower-hours.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.FromLitersAtmosphere(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Energy" /> value from the specified <paramref name="value" /> in liters-atmosphere.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Energy" /> value in liters-atmosphere.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Energy" /> object from the specified <paramref name="value" /> in liters-atmosphere.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.FromTonOfCoal(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Energy" /> value from the specified <paramref name="value" /> in equivalent tons of coal.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Energy" /> value in equivalent tons of coal.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Energy" /> object from the specified <paramref name="value" /> in equivalent tons of coal.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.FromWattHours(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Energy" /> value from the specified <paramref name="value" /> in watt-hours.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Energy" /> value in watt-hours.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Energy" /> object from the specified <paramref name="value" /> in watt-hours.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="F:gemstone.numeric.units.Energy.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:gemstone.numeric.units.Energy" />. This field is constant.</summary>
    </member>
    <member name="F:gemstone.numeric.units.Energy.MinValue">
      <summary>Represents the smallest possible value of an <see cref="T:gemstone.numeric.units.Energy" />. This field is constant.</summary>
    </member>
    <member name="M:gemstone.numeric.units.Energy.op_Addition(gemstone.numeric.units.Energy,gemstone.numeric.units.Energy)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">An <see cref="T:gemstone.numeric.units.Energy" /> object as the left hand operand.</param>
      <param name="value2">An <see cref="T:gemstone.numeric.units.Energy" /> object as the right hand operand.</param>
      <returns>An <see cref="T:gemstone.numeric.units.Energy" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.op_Division(gemstone.numeric.units.Energy,gemstone.numeric.units.Energy)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">An <see cref="T:gemstone.numeric.units.Energy" /> object as the left hand operand.</param>
      <param name="value2">An <see cref="T:gemstone.numeric.units.Energy" /> object as the right hand operand.</param>
      <returns>An <see cref="T:gemstone.numeric.units.Energy" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.op_Equality(gemstone.numeric.units.Energy,gemstone.numeric.units.Energy)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">An <see cref="T:gemstone.numeric.units.Energy" /> object as the left hand operand.</param>
      <param name="value2">An <see cref="T:gemstone.numeric.units.Energy" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.op_Exponent(gemstone.numeric.units.Energy,gemstone.numeric.units.Energy)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">An <see cref="T:gemstone.numeric.units.Energy" /> object as the left hand operand.</param>
      <param name="value2">An <see cref="T:gemstone.numeric.units.Energy" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Double" /> value as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.op_GreaterThan(gemstone.numeric.units.Energy,gemstone.numeric.units.Energy)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">An <see cref="T:gemstone.numeric.units.Energy" /> object as the left hand operand.</param>
      <param name="value2">An <see cref="T:gemstone.numeric.units.Energy" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.op_GreaterThanOrEqual(gemstone.numeric.units.Energy,gemstone.numeric.units.Energy)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">An <see cref="T:gemstone.numeric.units.Energy" /> object as the left hand operand.</param>
      <param name="value2">An <see cref="T:gemstone.numeric.units.Energy" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.op_Implicit(gemstone.numeric.units.Energy)~System.Double">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.units.Energy" />, represented in joules, to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">An <see cref="T:gemstone.numeric.units.Energy" /> object.</param>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.op_Implicit(System.Double)~gemstone.numeric.units.Energy">
      <summary>
            Implicitly converts value, represented in joules, to an <see cref="T:gemstone.numeric.units.Energy" />.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
      <returns>An <see cref="T:gemstone.numeric.units.Energy" /> object.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.op_Inequality(gemstone.numeric.units.Energy,gemstone.numeric.units.Energy)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">An <see cref="T:gemstone.numeric.units.Energy" /> object as the left hand operand.</param>
      <param name="value2">An <see cref="T:gemstone.numeric.units.Energy" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.op_LessThan(gemstone.numeric.units.Energy,gemstone.numeric.units.Energy)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">An <see cref="T:gemstone.numeric.units.Energy" /> object as the left hand operand.</param>
      <param name="value2">An <see cref="T:gemstone.numeric.units.Energy" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.op_LessThanOrEqual(gemstone.numeric.units.Energy,gemstone.numeric.units.Energy)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">An <see cref="T:gemstone.numeric.units.Energy" /> object as the left hand operand.</param>
      <param name="value2">An <see cref="T:gemstone.numeric.units.Energy" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.op_Modulus(gemstone.numeric.units.Energy,gemstone.numeric.units.Energy)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">An <see cref="T:gemstone.numeric.units.Energy" /> object as the left hand operand.</param>
      <param name="value2">An <see cref="T:gemstone.numeric.units.Energy" /> object as the right hand operand.</param>
      <returns>An <see cref="T:gemstone.numeric.units.Energy" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.op_Multiply(gemstone.numeric.units.Energy,gemstone.numeric.units.Energy)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">An <see cref="T:gemstone.numeric.units.Energy" /> object as the left hand operand.</param>
      <param name="value2">An <see cref="T:gemstone.numeric.units.Energy" /> object as the right hand operand.</param>
      <returns>An <see cref="T:gemstone.numeric.units.Energy" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.op_Subtraction(gemstone.numeric.units.Energy,gemstone.numeric.units.Energy)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">An <see cref="T:gemstone.numeric.units.Energy" /> object as the left hand operand.</param>
      <param name="value2">An <see cref="T:gemstone.numeric.units.Energy" /> object as the right hand operand.</param>
      <returns>An <see cref="T:gemstone.numeric.units.Energy" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Energy" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            An <see cref="T:gemstone.numeric.units.Energy" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Energy.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Energy.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Energy.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:gemstone.numeric.units.Energy" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            An <see cref="T:gemstone.numeric.units.Energy" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Energy.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Energy.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Energy.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:gemstone.numeric.units.Energy" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            An <see cref="T:gemstone.numeric.units.Energy" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Energy.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Energy.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Energy.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:gemstone.numeric.units.Energy" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            An <see cref="T:gemstone.numeric.units.Energy" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Energy.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Energy.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Energy.ToBarrelsOfOil">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Energy" /> value in equivalent barrels of oil.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Energy" /> in equivalent barrels of oil.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.ToBTU">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Energy" /> value in BTU (International Table).
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Energy" /> in BTU.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.ToCalories">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Energy" /> value in calories (International Table).
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Energy" /> in calories.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.ToCelsiusHeatUnits">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Energy" /> value in Celsius heat units (International Table).
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Energy" /> in Celsius heat units.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.ToCoulombs(gemstone.numeric.units.Voltage)">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Charge" /> value in coulombs given the specified <paramref name="volts" />.
            </summary>
      <param name="volts">Source <see cref="T:gemstone.numeric.units.Voltage" /> used to calculate <see cref="T:gemstone.numeric.units.Charge" /> value.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Charge" /> value in coulombs given the specified <paramref name="volts" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.ToHorsepowerHours">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Energy" /> value in horsepower-hours.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Energy" /> in horsepower-hours.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.ToLitersAtmosphere">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Energy" /> value in liters-atmosphere.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Energy" /> in liters-atmosphere.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeros.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.ToTonsOfCoal">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Energy" /> value in equivalent tons of coal.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Energy" /> in equivalent tons of coal.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.ToWattHours">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Energy" /> value in watt-hours.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Energy" /> in watt-hours.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.TryParse(System.String,gemstone.numeric.units.Energy@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Energy" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Energy" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:gemstone.numeric.units.Energy.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Energy.MaxValue" />.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Energy.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,gemstone.numeric.units.Energy@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:gemstone.numeric.units.Energy" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Energy" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:gemstone.numeric.units.Energy.MinValue" /> or
            greater than <see cref="F:gemstone.numeric.units.Energy.MaxValue" />. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:gemstone.numeric.units.EnergyUnit">
      <summary>
            Represents the units available for an <see cref="T:gemstone.numeric.units.Energy" /> value.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.EnergyUnit.Joules">
      <summary>
            Joule energy units, i.e., watt-seconds.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.EnergyUnit.WattHours">
      <summary>
            WattHour energy units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.EnergyUnit.BTU">
      <summary>
            BTU energy units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.EnergyUnit.CelsiusHeatUnits">
      <summary>
            Celsius heat energy units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.EnergyUnit.LitersAtmosphere">
      <summary>
            Liters atmosphere energy units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.EnergyUnit.Calories">
      <summary>
            Calorie energy units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.EnergyUnit.HorsepowerHours">
      <summary>
            Horsepower-hour energy units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.EnergyUnit.BarrelsOfOil">
      <summary>
            Barrels of oil energy units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.EnergyUnit.TonsOfCoal">
      <summary>
            Tons of coal energy units.
            </summary>
    </member>
    <member name="T:gemstone.numeric.units.Length">
      <summary>
            Represents a length measurement, in meters, as a double-precision floating-point number.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.Length.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Length" />.
            </summary>
      <param name="value">New length value in meters.</param>
    </member>
    <member name="M:gemstone.numeric.units.Length.CompareTo(gemstone.numeric.units.Length)">
      <summary>
            Compares this instance to a specified <see cref="T:gemstone.numeric.units.Length" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:gemstone.numeric.units.Length" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.CompareTo(System.Double)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Double" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double" /> or <see cref="T:gemstone.numeric.units.Length" />.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Length.ConvertFrom(System.Double,gemstone.numeric.units.LengthUnit)">
      <summary>
            Converts the <paramref name="value" /> in the specified <paramref name="sourceUnit" /> to a new <see cref="T:gemstone.numeric.units.Length" /> in meters.
            </summary>
      <param name="value">Source value.</param>
      <param name="sourceUnit">Source value units.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Length" /> from the specified <paramref name="value" /> in <paramref name="sourceUnit" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.ConvertTo(gemstone.numeric.units.LengthUnit)">
      <summary>
            Converts the <see cref="T:gemstone.numeric.units.Length" /> to the specified <paramref name="targetUnit" />.
            </summary>
      <param name="targetUnit">Target units.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Length" /> converted to <paramref name="targetUnit" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.Equals(gemstone.numeric.units.Length)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:gemstone.numeric.units.Length" /> value.
            </summary>
      <param name="obj">A <see cref="T:gemstone.numeric.units.Length" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.Equals(System.Double)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.Double" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Double" /> or <see cref="T:gemstone.numeric.units.Length" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.FromFeet(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Length" /> value from the specified <paramref name="value" /> in feet.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Length" /> value in feet.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Length" /> object from the specified <paramref name="value" /> in feet.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.FromInches(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Length" /> value from the specified <paramref name="value" /> in inches.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Length" /> value in inches.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Length" /> object from the specified <paramref name="value" /> in inches.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.FromLightSeconds(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Length" /> value from the specified <paramref name="value" /> in light-seconds.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Length" /> value in light-seconds.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Length" /> object from the specified <paramref name="value" /> in light-seconds.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.FromMiles(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Length" /> value from the specified <paramref name="value" /> in miles.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Length" /> value in miles.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Length" /> object from the specified <paramref name="value" /> in miles.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.FromNauticalMiles(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Length" /> value from the specified <paramref name="value" /> in nautical miles.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Length" /> value in nautical miles.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Length" /> object from the specified <paramref name="value" /> in nautical miles.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.FromUSSurveyFeet(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Length" /> value from the specified <paramref name="value" /> in US survey feet.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Length" /> value in US survey feet.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Length" /> object from the specified <paramref name="value" /> in US survey feet.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.FromUSSurveyMiles(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Length" /> value from the specified <paramref name="value" /> in US survey miles.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Length" /> value in US survey miles.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Length" /> object from the specified <paramref name="value" /> in US survey miles.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.FromYards(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Length" /> value from the specified <paramref name="value" /> in yards.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Length" /> value in yards.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Length" /> object from the specified <paramref name="value" /> in yards.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="F:gemstone.numeric.units.Length.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:gemstone.numeric.units.Length" />. This field is constant.</summary>
    </member>
    <member name="F:gemstone.numeric.units.Length.MinValue">
      <summary>Represents the smallest possible value of an <see cref="T:gemstone.numeric.units.Length" />. This field is constant.</summary>
    </member>
    <member name="M:gemstone.numeric.units.Length.op_Addition(gemstone.numeric.units.Length,gemstone.numeric.units.Length)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Length" /> object left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Length" /> object right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Length" /> object as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.op_Division(gemstone.numeric.units.Length,gemstone.numeric.units.Length)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Length" /> object left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Length" /> object right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Length" /> object as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.op_Equality(gemstone.numeric.units.Length,gemstone.numeric.units.Length)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Length" /> object left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Length" /> object right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.op_Exponent(gemstone.numeric.units.Length,gemstone.numeric.units.Length)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Length" /> object left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Length" /> object right hand operand.</param>
      <returns>A <see cref="T:System.Double" /> value as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.op_GreaterThan(gemstone.numeric.units.Length,gemstone.numeric.units.Length)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Length" /> object left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Length" /> object right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.op_GreaterThanOrEqual(gemstone.numeric.units.Length,gemstone.numeric.units.Length)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Length" /> object left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Length" /> object right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.op_Implicit(gemstone.numeric.units.Length)~System.Double">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.units.Length" />, represented in meters, to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">A <see cref="T:gemstone.numeric.units.Length" /> object.</param>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.op_Implicit(System.Double)~gemstone.numeric.units.Length">
      <summary>
            Implicitly converts value, represented in meters, to a <see cref="T:gemstone.numeric.units.Length" />.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Length" /> object.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.op_Inequality(gemstone.numeric.units.Length,gemstone.numeric.units.Length)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Length" /> object left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Length" /> object right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.op_LessThan(gemstone.numeric.units.Length,gemstone.numeric.units.Length)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Length" /> object left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Length" /> object right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.op_LessThanOrEqual(gemstone.numeric.units.Length,gemstone.numeric.units.Length)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Length" /> object left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Length" /> object right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.op_Modulus(gemstone.numeric.units.Length,gemstone.numeric.units.Length)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Length" /> object left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Length" /> object right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Length" /> object as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.op_Multiply(gemstone.numeric.units.Length,gemstone.numeric.units.Length)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Length" /> object left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Length" /> object right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Length" /> object as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.op_Subtraction(gemstone.numeric.units.Length,gemstone.numeric.units.Length)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Length" /> object left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Length" /> object right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Length" /> object as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Length" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Length" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Length.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Length.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Length.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:gemstone.numeric.units.Length" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Length" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Length.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Length.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Length.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:gemstone.numeric.units.Length" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Length" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Length.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Length.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Length.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:gemstone.numeric.units.Length" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Length" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Length.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Length.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Length.ToFeet">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Length" /> value in feet.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Length" /> in feet.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.ToInches">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Length" /> value in inches.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Length" /> in inches.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.ToLightSeconds">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Length" /> value in light-seconds.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Length" /> in light-seconds.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.ToMiles">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Length" /> value in miles.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Length" /> in miles.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.ToNauticalMiles">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Length" /> value in nautical miles.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Length" /> in nautical miles.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeros.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.ToUSSurveyFeet">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Length" /> value in US survey feet.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Length" /> in US survey feet.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.ToUSSurveyMiles">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Length" /> value in US survey miles.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Length" /> in US survey miles.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.ToYards">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Length" /> value in yards.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Length" /> in yards.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.TryParse(System.String,gemstone.numeric.units.Length@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Length" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Length" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:gemstone.numeric.units.Length.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Length.MaxValue" />.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Length.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,gemstone.numeric.units.Length@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:gemstone.numeric.units.Length" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Length" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:gemstone.numeric.units.Length.MinValue" /> or
            greater than <see cref="F:gemstone.numeric.units.Length.MaxValue" />. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:gemstone.numeric.units.LengthUnit">
      <summary>
            Represents the units available for a <see cref="T:gemstone.numeric.units.Length" /> value.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.LengthUnit.Meters">
      <summary>
            Meter length units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.LengthUnit.Feet">
      <summary>
            Foot length units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.LengthUnit.Inches">
      <summary>
            Inch length units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.LengthUnit.Miles">
      <summary>
            Mile length units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.LengthUnit.LightSeconds">
      <summary>
            Light-second length units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.LengthUnit.USSurveyFeet">
      <summary>
            U.S. survey foot length units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.LengthUnit.USSurveyMiles">
      <summary>
            U.S. survey mile length units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.LengthUnit.NauticalMiles">
      <summary>
            Nautical mile length units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.LengthUnit.Yards">
      <summary>
            Yard length units.
            </summary>
    </member>
    <member name="T:gemstone.numeric.units.Mass">
      <summary>
            Represents a mass measurement, in kilograms, as a double-precision floating-point number.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.Mass.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Mass" />.
            </summary>
      <param name="value">New mass value in kilograms.</param>
    </member>
    <member name="M:gemstone.numeric.units.Mass.CompareTo(gemstone.numeric.units.Mass)">
      <summary>
            Compares this instance to a specified <see cref="T:gemstone.numeric.units.Mass" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:gemstone.numeric.units.Mass" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.CompareTo(System.Double)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Double" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double" /> or <see cref="T:gemstone.numeric.units.Mass" />.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Mass.ConvertFrom(System.Double,gemstone.numeric.units.MassUnit)">
      <summary>
            Converts the <paramref name="value" /> in the specified <paramref name="sourceUnit" /> to a new <see cref="T:gemstone.numeric.units.Mass" /> in kilograms.
            </summary>
      <param name="value">Source value.</param>
      <param name="sourceUnit">Source value units.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Mass" /> from the specified <paramref name="value" /> in <paramref name="sourceUnit" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.ConvertTo(gemstone.numeric.units.MassUnit)">
      <summary>
            Converts the <see cref="T:gemstone.numeric.units.Mass" /> to the specified <paramref name="targetUnit" />.
            </summary>
      <param name="targetUnit">Target units.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Mass" /> converted to <paramref name="targetUnit" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.Equals(gemstone.numeric.units.Mass)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:gemstone.numeric.units.Mass" /> value.
            </summary>
      <param name="obj">A <see cref="T:gemstone.numeric.units.Mass" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.Equals(System.Double)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.Double" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Double" /> or <see cref="T:gemstone.numeric.units.Mass" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.FromLongTons(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Mass" /> value from the specified <paramref name="value" /> in long tons.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Mass" /> value in long tons.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Mass" /> object from the specified <paramref name="value" /> in long tons.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.FromMetricPounds(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Mass" /> value from the specified <paramref name="value" /> in metric pounds.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Mass" /> value in metric pounds.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Mass" /> object from the specified <paramref name="value" /> in metric pounds.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.FromMetricTons(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Mass" /> value from the specified <paramref name="value" /> in metric tons.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Mass" /> value in metric tons.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Mass" /> object from the specified <paramref name="value" /> in metric tons.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.FromOunces(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Mass" /> value from the specified <paramref name="value" /> in ounces (avoirdupois).
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Mass" /> value in ounces.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Mass" /> object from the specified <paramref name="value" /> in ounces.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.FromPounds(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Mass" /> value from the specified <paramref name="value" /> in pounds (avoirdupois).
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Mass" /> value in pounds.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Mass" /> object from the specified <paramref name="value" /> in pounds.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.FromTons(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Mass" /> value from the specified <paramref name="value" /> in short tons.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Mass" /> value in short tons.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Mass" /> object from the specified <paramref name="value" /> in short tons.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="F:gemstone.numeric.units.Mass.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:gemstone.numeric.units.Mass" />. This field is constant.</summary>
    </member>
    <member name="F:gemstone.numeric.units.Mass.MinValue">
      <summary>Represents the smallest possible value of an <see cref="T:gemstone.numeric.units.Mass" />. This field is constant.</summary>
    </member>
    <member name="M:gemstone.numeric.units.Mass.op_Addition(gemstone.numeric.units.Mass,gemstone.numeric.units.Mass)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Mass" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Mass" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Mass" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.op_Division(gemstone.numeric.units.Mass,gemstone.numeric.units.Mass)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Mass" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Mass" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Mass" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.op_Equality(gemstone.numeric.units.Mass,gemstone.numeric.units.Mass)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Mass" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Mass" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.op_Exponent(gemstone.numeric.units.Mass,gemstone.numeric.units.Mass)">
      <summary>
            Returns result of first value raised to mass of second value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Mass" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Mass" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Double" /> value as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.op_GreaterThan(gemstone.numeric.units.Mass,gemstone.numeric.units.Mass)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Mass" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Mass" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.op_GreaterThanOrEqual(gemstone.numeric.units.Mass,gemstone.numeric.units.Mass)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Mass" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Mass" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.op_Implicit(gemstone.numeric.units.Mass)~System.Double">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.units.Mass" />, represented in kilograms, to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">A <see cref="T:gemstone.numeric.units.Mass" /> object.</param>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.op_Implicit(System.Double)~gemstone.numeric.units.Mass">
      <summary>
            Implicitly converts value, represented in kilograms, to a <see cref="T:gemstone.numeric.units.Mass" />.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Mass" /> object.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.op_Inequality(gemstone.numeric.units.Mass,gemstone.numeric.units.Mass)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Mass" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Mass" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.op_LessThan(gemstone.numeric.units.Mass,gemstone.numeric.units.Mass)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Mass" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Mass" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.op_LessThanOrEqual(gemstone.numeric.units.Mass,gemstone.numeric.units.Mass)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Mass" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Mass" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.op_Modulus(gemstone.numeric.units.Mass,gemstone.numeric.units.Mass)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Mass" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Mass" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Mass" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.op_Multiply(gemstone.numeric.units.Mass,gemstone.numeric.units.Mass)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Mass" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Mass" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Mass" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.op_Subtraction(gemstone.numeric.units.Mass,gemstone.numeric.units.Mass)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Mass" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Mass" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Mass" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Mass" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Mass" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Mass.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Mass.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Mass.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:gemstone.numeric.units.Mass" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Mass" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Mass.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Mass.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Mass.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:gemstone.numeric.units.Mass" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Mass" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Mass.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Mass.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Mass.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:gemstone.numeric.units.Mass" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Mass" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Mass.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Mass.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Mass.ToLongTons">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Mass" /> value in long tons.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Mass" /> in long tons.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.ToMetricPounds">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Mass" /> value in metric pounds.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Mass" /> in metric pounds.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.ToMetricTons">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Mass" /> value in metric tons.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Mass" /> in metric tons.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.ToOunces">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Mass" /> value in ounces (avoirdupois).
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Mass" /> in ounces.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.ToPounds">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Mass" /> value in pounds (avoirdupois).
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Mass" /> in pounds.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeros.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.ToTons">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Mass" /> value in short tons.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Mass" /> in short tons.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.TryParse(System.String,gemstone.numeric.units.Mass@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Mass" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Mass" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:gemstone.numeric.units.Mass.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Mass.MaxValue" />.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Mass.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,gemstone.numeric.units.Mass@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:gemstone.numeric.units.Mass" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Mass" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:gemstone.numeric.units.Mass.MinValue" /> or
            greater than <see cref="F:gemstone.numeric.units.Mass.MaxValue" />. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:gemstone.numeric.units.MassUnit">
      <summary>
            Represents the units available for a <see cref="T:gemstone.numeric.units.Mass" /> value.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.MassUnit.Kilograms">
      <summary>
            Kilogram mass units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.MassUnit.Ounces">
      <summary>
            Ounce mass units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.MassUnit.Pounds">
      <summary>
            Pound mass units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.MassUnit.MetricPounds">
      <summary>
            Metric pound mass units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.MassUnit.Tons">
      <summary>
            Ton mass units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.MassUnit.MectricTons">
      <summary>
            Metric ton mass units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.MassUnit.LongTons">
      <summary>
            Long ton mass units.
            </summary>
    </member>
    <member name="T:gemstone.numeric.units.NtpTimeTag">
      <summary>
            Represents a standard Network Time Protocol (NTP) timetag.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.NtpTimeTag.#ctor(gemstone.numeric.units.Ticks)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.NtpTimeTag" />, given specified <see cref="T:gemstone.numeric.units.Ticks" />.
            </summary>
      <param name="timestamp">Timestamp in <see cref="T:gemstone.numeric.units.Ticks" /> to create Unix timetag from (minimum valid date is 1/1/1900).</param>
    </member>
    <member name="M:gemstone.numeric.units.NtpTimeTag.#ctor(System.Decimal)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.NtpTimeTag" />, given number of seconds since 1/1/1900.
            </summary>
      <param name="seconds">Number of seconds since 1/1/1900.</param>
    </member>
    <member name="M:gemstone.numeric.units.NtpTimeTag.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.NtpTimeTag" /> from serialization parameters.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with populated with data.</param>
      <param name="context">The source <see cref="T:System.Runtime.Serialization.StreamingContext" /> for this deserialization.</param>
    </member>
    <member name="M:gemstone.numeric.units.NtpTimeTag.#ctor(System.UInt32,System.UInt32)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.NtpTimeTag" />, given number of seconds and fractional seconds since 1/1/1900.
            </summary>
      <param name="seconds">Number of seconds since 1/1/1900.</param>
      <param name="fraction">Number of fractional seconds, in whole picoseconds.</param>
    </member>
    <member name="M:gemstone.numeric.units.NtpTimeTag.#ctor(System.UInt64)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.NtpTimeTag" />, given 64-bit NTP timestamp.
            </summary>
      <param name="timestamp">NTP timestamp containing number of seconds since 1/1/1900 in high-word and fractional seconds in low-word.</param>
    </member>
    <member name="F:gemstone.numeric.units.NtpTimeTag.AlternateBaseTicks">
      <summary>
            Number of ticks since since 2/7/2036 at 6h 28m 16s UTC when MSB is set.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.NtpTimeTag.BaseTicks">
      <summary>
            Number of ticks since 1/1/1900.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.NtpTimeTag.FromTicks(gemstone.numeric.units.Ticks)">
      <summary>
            Gets 64-bit NTP timestamp given <paramref name="timestamp" /> in <see cref="T:gemstone.numeric.units.Ticks" />.
            </summary>
      <param name="timestamp">Timestamp in <see cref="T:gemstone.numeric.units.Ticks" />.</param>
      <returns>Seconds in NTP from given <paramref name="timestamp" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.NtpTimeTag.GetBaseDateOffsetTicks(gemstone.numeric.units.Ticks)">
      <summary>
            Gets proper NTP offset based on <paramref name="timestamp" /> value, see RFC-2030.
            </summary>
      <param name="timestamp">
        <see cref="T:gemstone.numeric.units.Ticks" /> timestamp value.</param>
      <returns>Proper NTP offset.</returns>
    </member>
    <member name="M:gemstone.numeric.units.NtpTimeTag.GetBaseDateOffsetTicks(System.Decimal)">
      <summary>
            Gets proper NTP offset based on <paramref name="seconds" /> value, see RFC-2030.
            </summary>
      <param name="seconds">Seconds value.</param>
      <returns>Proper NTP offset.</returns>
    </member>
    <member name="M:gemstone.numeric.units.NtpTimeTag.GetBaseDateOffsetTicks(System.UInt32)">
      <summary>
            Gets proper NTP offset based on most significant byte on <paramref name="seconds" /> value, see RFC-2030.
            </summary>
      <param name="seconds">NTP seconds timestamp value.</param>
      <returns>Proper NTP offset.</returns>
    </member>
    <member name="P:gemstone.numeric.units.NtpTimeTag.Timestamp">
      <summary>
            Gets 64-bit NTP timestamp.
            </summary>
    </member>
    <member name="T:gemstone.numeric.units.Power">
      <summary>
            Represents a power measurement, in watts, as a double-precision floating-point number.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.Power.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Power" />.
            </summary>
      <param name="value">New power value in watts.</param>
    </member>
    <member name="M:gemstone.numeric.units.Power.CompareTo(gemstone.numeric.units.Power)">
      <summary>
            Compares this instance to a specified <see cref="T:gemstone.numeric.units.Power" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:gemstone.numeric.units.Power" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.CompareTo(System.Double)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Double" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double" /> or <see cref="T:gemstone.numeric.units.Power" />.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Power.ConvertFrom(System.Double,gemstone.numeric.units.PowerUnit)">
      <summary>
            Converts the <paramref name="value" /> in the specified <paramref name="sourceUnit" /> to a new <see cref="T:gemstone.numeric.units.Power" /> in watts.
            </summary>
      <param name="value">Source value.</param>
      <param name="sourceUnit">Source value units.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Power" /> from the specified <paramref name="value" /> in <paramref name="sourceUnit" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.ConvertTo(gemstone.numeric.units.PowerUnit)">
      <summary>
            Converts the <see cref="T:gemstone.numeric.units.Power" /> to the specified <paramref name="targetUnit" />.
            </summary>
      <param name="targetUnit">Target units.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Power" /> converted to <paramref name="targetUnit" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.Equals(gemstone.numeric.units.Power)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:gemstone.numeric.units.Power" /> value.
            </summary>
      <param name="obj">A <see cref="T:gemstone.numeric.units.Power" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.Equals(System.Double)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.Double" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Double" /> or <see cref="T:gemstone.numeric.units.Power" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.FromBoilerHorsepower(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Power" /> value from the specified <paramref name="value" /> in boiler horsepower.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Power" /> value in boiler horsepower.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Power" /> object from the specified <paramref name="value" /> in boiler horsepower.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.FromBTUPerSecond(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Power" /> value from the specified <paramref name="value" /> in BTU (International Table) per second.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Power" /> value in BTU per second.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Power" /> object from the specified <paramref name="value" /> in BTU per second.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.FromCaloriesPerSecond(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Power" /> value from the specified <paramref name="value" /> in calories (International Table) per second.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Power" /> value in calories per second.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Power" /> object from the specified <paramref name="value" /> in calories per second.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.FromHorsepower(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Power" /> value from the specified <paramref name="value" /> in mechanical horsepower (Imperial).
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Power" /> value in mechanical horsepower.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Power" /> object from the specified <paramref name="value" /> in mechanical horsepower.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.FromLitersAtmospherePerSecond(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Power" /> value from the specified <paramref name="value" /> in liters-atmosphere per second.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Power" /> value in liters-atmosphere per second.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Power" /> object from the specified <paramref name="value" /> in liters-atmosphere per second.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.FromMetricHorsepower(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Power" /> value from the specified <paramref name="value" /> in metric horsepower.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Power" /> value in metric horsepower.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Power" /> object from the specified <paramref name="value" /> in metric horsepower.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="F:gemstone.numeric.units.Power.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:gemstone.numeric.units.Power" />. This field is constant.</summary>
    </member>
    <member name="F:gemstone.numeric.units.Power.MinValue">
      <summary>Represents the smallest possible value of an <see cref="T:gemstone.numeric.units.Power" />. This field is constant.</summary>
    </member>
    <member name="M:gemstone.numeric.units.Power.op_Addition(gemstone.numeric.units.Power,gemstone.numeric.units.Power)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Power" /> left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Power" /> right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Power" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.op_Division(gemstone.numeric.units.Power,gemstone.numeric.units.Power)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Power" /> left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Power" /> right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Power" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.op_Equality(gemstone.numeric.units.Power,gemstone.numeric.units.Power)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Power" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Power" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.op_Exponent(gemstone.numeric.units.Power,gemstone.numeric.units.Power)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Power" /> left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Power" /> right hand operand.</param>
      <returns>A <see cref="T:System.Double" /> value as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.op_GreaterThan(gemstone.numeric.units.Power,gemstone.numeric.units.Power)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Power" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Power" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.op_GreaterThanOrEqual(gemstone.numeric.units.Power,gemstone.numeric.units.Power)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Power" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Power" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.op_Implicit(gemstone.numeric.units.Power)~System.Double">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.units.Power" />, represented in watts, to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">A <see cref="T:gemstone.numeric.units.Power" /> object.</param>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.op_Implicit(System.Double)~gemstone.numeric.units.Power">
      <summary>
            Implicitly converts value, represented in watts, to a <see cref="T:gemstone.numeric.units.Power" />.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Power" /> object.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.op_Inequality(gemstone.numeric.units.Power,gemstone.numeric.units.Power)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Power" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Power" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.op_LessThan(gemstone.numeric.units.Power,gemstone.numeric.units.Power)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Power" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Power" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.op_LessThanOrEqual(gemstone.numeric.units.Power,gemstone.numeric.units.Power)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Power" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Power" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.op_Modulus(gemstone.numeric.units.Power,gemstone.numeric.units.Power)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Power" /> left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Power" /> right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Power" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.op_Multiply(gemstone.numeric.units.Power,gemstone.numeric.units.Power)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Power" /> left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Power" /> right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Power" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.op_Subtraction(gemstone.numeric.units.Power,gemstone.numeric.units.Power)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Power" /> left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Power" /> right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Power" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Power" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Power" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Power.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Power.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Power.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:gemstone.numeric.units.Power" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Power" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Power.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Power.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Power.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:gemstone.numeric.units.Power" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Power" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Power.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Power.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Power.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:gemstone.numeric.units.Power" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Power" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Power.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Power.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Power.ToBoilerHorsepower">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Power" /> value in boiler horsepower.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Power" /> in boiler horsepower.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.ToBTUPerSecond">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Power" /> value in BTU (International Table) per second.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Power" /> in BTU per second.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.ToCaloriesPerSecond">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Power" /> value in calories (International Table) per second.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Power" /> in calories per second.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.ToHorsepower">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Power" /> value in mechanical horsepower (Imperial).
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Power" /> in mechanical horsepower.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.ToLitersAtmospherePerSecond">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Power" /> value in liters-atmosphere per second.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Power" /> in liters-atmosphere per second.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.ToMetricHorsepower">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Power" /> value in metric horsepower.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Power" /> in metric horsepower.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeros.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.TryParse(System.String,gemstone.numeric.units.Power@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Power" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Power" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:gemstone.numeric.units.Power.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Power.MaxValue" />.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Power.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,gemstone.numeric.units.Power@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:gemstone.numeric.units.Power" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Power" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:gemstone.numeric.units.Power.MinValue" /> or
            greater than <see cref="F:gemstone.numeric.units.Power.MaxValue" />. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:gemstone.numeric.units.PowerUnit">
      <summary>
            Represents the units available for a <see cref="T:gemstone.numeric.units.Power" /> value.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.PowerUnit.Watts">
      <summary>
            Watt power units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.PowerUnit.Horsepower">
      <summary>
            Horsepower units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.PowerUnit.MetricHorsepower">
      <summary>
            Metric horsepower units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.PowerUnit.BoilerHorsepower">
      <summary>
            Boiler horsepower units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.PowerUnit.BTUPerSecond">
      <summary>
            BTU per second power units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.PowerUnit.CaloriesPerSecond">
      <summary>
            Calories per second power units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.PowerUnit.LitersAtmospherePerSecond">
      <summary>
            Liters atmosphere per second power units.
            </summary>
    </member>
    <member name="T:gemstone.numeric.units.SI">
      <summary>
            Defines constant factors for SI units of measure to handle metric conversions.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI.Atto">
      <summary>
            SI prefix a, 10^-18
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI.Centi">
      <summary>
            SI prefix c, 10^-2
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI.Deca">
      <summary>
            SI prefix da, 10^1
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI.Deci">
      <summary>
            SI prefix d, 10^-1
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI.Exa">
      <summary>
            SI prefix E, 10^18
            </summary>
    </member>
    <member name="P:gemstone.numeric.units.SI.Factors">
      <summary>
            Gets an array of all the defined SI unit factors ordered from least (<see cref="F:gemstone.numeric.units.SI.Yocto" />) to greatest (<see cref="F:gemstone.numeric.units.SI.Yotta" />).
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI.Femto">
      <summary>
            SI prefix f, 10^-15
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI.Giga">
      <summary>
            SI prefix G, 10^9
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI.Hecto">
      <summary>
            SI prefix h, 10^2
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI.Kilo">
      <summary>
            SI prefix k, 10^3
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI.Mega">
      <summary>
            SI prefix M, 10^6
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI.Micro">
      <summary>
            SI prefix µ, 10^-6
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI.Milli">
      <summary>
            SI prefix m, 10^-3
            </summary>
    </member>
    <member name="P:gemstone.numeric.units.SI.Names">
      <summary>
            Gets an array of all the defined unit factor SI names ordered from least (<see cref="F:gemstone.numeric.units.SI.Yocto" />) to greatest (<see cref="F:gemstone.numeric.units.SI.Yotta" />).
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI.Nano">
      <summary>
            SI prefix n, 10^-9
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI.Peta">
      <summary>
            SI prefix P, 10^15
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI.Pico">
      <summary>
            SI prefix p, 10^-12
            </summary>
    </member>
    <member name="P:gemstone.numeric.units.SI.Symbols">
      <summary>
            Gets an array of all the defined unit factor SI prefix symbols ordered from least (<see cref="F:gemstone.numeric.units.SI.Yocto" />) to greatest (<see cref="F:gemstone.numeric.units.SI.Yotta" />).
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI.Tera">
      <summary>
            SI prefix T, 10^12
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.SI.ToScaledString(System.Double,System.Int32,System.String,System.String[],System.Double,System.Double)">
      <summary>
            Turns the given number of units into a textual representation with an appropriate unit scaling.
            </summary>
      <param name="totalUnits">Total units to represent textually.</param>
      <param name="decimalPlaces">Number of decimal places to display.</param>
      <param name="unitName">Name of unit display (e.g., you could use "m/h" for meters per hour).</param>
      <param name="symbolNames">Optional SI factor symbol or name array to use during textual conversion, defaults to <see cref="P:gemstone.numeric.units.SI.Symbols" />.</param>
      <param name="minimumFactor">Optional minimum SI factor. Defaults to <see cref="F:gemstone.numeric.units.SI.Yocto" />.</param>
      <param name="maximumFactor">Optional maximum SI factor. Defaults to <see cref="F:gemstone.numeric.units.SI.Yotta" />.</param>
      <returns>A <see cref="T:System.String" /> representation of the number of units.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimalPlaces" /> cannot be negative.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumFactor" /> or <paramref name="maximumFactor" /> is not defined in <see cref="P:gemstone.numeric.units.SI.Factors" /> array.</exception>
    </member>
    <member name="M:gemstone.numeric.units.SI.ToScaledString(System.Double,System.String,System.String,System.Double,System.Double)">
      <summary>
            Turns the given number of units into a textual representation with an appropriate unit scaling.
            </summary>
      <param name="totalUnits">Total units to represent textually.</param>
      <param name="format">A numeric string format for scaled <paramref name="totalUnits" />.</param>
      <param name="unitName">Name of unit display (e.g., you could use "m/h" for meters per hour).</param>
      <param name="minimumFactor">Optional minimum SI factor. Defaults to <see cref="F:gemstone.numeric.units.SI.Yocto" />.</param>
      <param name="maximumFactor">Optional maximum SI factor. Defaults to <see cref="F:gemstone.numeric.units.SI.Yotta" />.</param>
      <returns>A <see cref="T:System.String" /> representation of the number of units.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumFactor" /> or <paramref name="maximumFactor" /> is not defined in <see cref="P:gemstone.numeric.units.SI.Factors" /> array.</exception>
    </member>
    <member name="M:gemstone.numeric.units.SI.ToScaledString(System.Double,System.String,System.String,System.String[],System.Int32,System.Double,System.Double)">
      <summary>
            Turns the given number of units into a textual representation with an appropriate unit scaling
            given string array of factor names or symbols.
            </summary>
      <param name="totalUnits">Total units to represent textually.</param>
      <param name="format">A numeric string format for scaled <paramref name="totalUnits" />.</param>
      <param name="unitName">Name of unit display (e.g., you could use "m/h" for meters per hour).</param>
      <param name="symbolNames">SI factor symbol or name array to use during textual conversion.</param>
      <param name="decimalPlaces">Optional number of decimal places to display.</param>
      <param name="minimumFactor">Optional minimum SI factor. Defaults to <see cref="F:gemstone.numeric.units.SI.Yocto" />.</param>
      <param name="maximumFactor">Optional maximum SI factor. Defaults to <see cref="F:gemstone.numeric.units.SI.Yotta" />.</param>
      <returns>A <see cref="T:System.String" /> representation of the number of units.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumFactor" /> or <paramref name="maximumFactor" /> is not defined in <see cref="P:gemstone.numeric.units.SI.Factors" /> array.</exception>
    </member>
    <member name="M:gemstone.numeric.units.SI.ToScaledString(System.Double,System.String,System.String[],System.Double,System.Double)">
      <summary>
            Turns the given number of units into a textual representation with an appropriate unit scaling.
            </summary>
      <param name="totalUnits">Total units to represent textually.</param>
      <param name="unitName">Name of unit display (e.g., you could use "m/h" for meters per hour).</param>
      <param name="symbolNames">Optional SI factor symbol or name array to use during textual conversion, defaults to <see cref="P:gemstone.numeric.units.SI.Symbols" />.</param>
      <param name="minimumFactor">Optional minimum SI factor. Defaults to <see cref="F:gemstone.numeric.units.SI.Yocto" />.</param>
      <param name="maximumFactor">Optional maximum SI factor. Defaults to <see cref="F:gemstone.numeric.units.SI.Yotta" />.</param>
      <returns>A <see cref="T:System.String" /> representation of the number of units.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumFactor" /> or <paramref name="maximumFactor" /> is not defined in <see cref="P:gemstone.numeric.units.SI.Factors" /> array.</exception>
    </member>
    <member name="F:gemstone.numeric.units.SI.Yocto">
      <summary>
            SI prefix y, 10^-24
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI.Yotta">
      <summary>
            SI prefix Y, 10^24
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI.Zepto">
      <summary>
            SI prefix z, 10^-21
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI.Zetta">
      <summary>
            SI prefix Z, 10^21
            </summary>
    </member>
    <member name="T:gemstone.numeric.units.SI2">
      <summary>
            Defines constant factors based on 1024 for related binary SI units of measure used in computational measurements.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI2.Exa">
      <summary>
            1 exa, binary (E) = 1,152,921,504,606,846,976
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI2.Exbi">
      <summary>
            1 exbi (Ei) = 1,152,921,504,606,846,976
            </summary>
    </member>
    <member name="P:gemstone.numeric.units.SI2.Factors">
      <summary>
            Gets an array of all the defined binary SI unit factors ordered from least (<see cref="F:gemstone.numeric.units.SI2.Kilo" />) to greatest (<see cref="F:gemstone.numeric.units.SI2.Exa" />).
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI2.Gibi">
      <summary>
            1 gibi (Gi) = 1,073,741,824
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI2.Giga">
      <summary>
            1 giga, binary (G) = 1,073,741,824
            </summary>
    </member>
    <member name="P:gemstone.numeric.units.SI2.IECNames">
      <summary>
            Gets an array of all the defined IEC binary unit factor SI names ordered from least (<see cref="F:gemstone.numeric.units.SI2.Kibi" />) to greatest (<see cref="F:gemstone.numeric.units.SI2.Exbi" />).
            </summary>
    </member>
    <member name="P:gemstone.numeric.units.SI2.IECSymbols">
      <summary>
            Gets an array of all the defined IEC binary unit factor SI prefix symbols ordered from least (<see cref="F:gemstone.numeric.units.SI2.Kibi" />) to greatest (<see cref="F:gemstone.numeric.units.SI2.Exbi" />).
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI2.Kibi">
      <summary>
            1 kibi (Ki) = 1,024
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI2.Kilo">
      <summary>
            1 kilo, binary (K) = 1,024
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI2.Mebi">
      <summary>
            1 mebi (Mi) = 1,048,576
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI2.Mega">
      <summary>
            1 mega, binary (M) = 1,048,576
            </summary>
    </member>
    <member name="P:gemstone.numeric.units.SI2.Names">
      <summary>
            Gets an array of all the defined common binary unit factor SI names ordered from least (<see cref="F:gemstone.numeric.units.SI2.Kilo" />) to greatest (<see cref="F:gemstone.numeric.units.SI2.Exa" />).
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI2.Pebi">
      <summary>
            1 pebi (Pi) = 1,125,899,906,842,624
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI2.Peta">
      <summary>
            1 peta, binary (P) = 1,125,899,906,842,624
            </summary>
    </member>
    <member name="P:gemstone.numeric.units.SI2.Symbols">
      <summary>
            Gets an array of all the defined common binary unit factor SI prefix symbols ordered from least (<see cref="F:gemstone.numeric.units.SI2.Kilo" />) to greatest (<see cref="F:gemstone.numeric.units.SI2.Exa" />).
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI2.Tebi">
      <summary>
            1 tebi (Ti) = 1,099,511,627,776
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SI2.Tera">
      <summary>
            1 tera, binary (T) = 1,099,511,627,776
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.SI2.ToScaledString(System.Int64,System.Int32,System.String,System.String[],System.Int64,System.Int64)">
      <summary>
            Turns the given number of units (e.g., bytes) into a textual representation with an appropriate unit scaling
            and common named representation (e.g., KB, MB, GB, TB, etc.).
            </summary>
      <param name="totalUnits">Total units to represent textually.</param>
      <param name="decimalPlaces">Number of decimal places to display.</param>
      <param name="unitName">Name of unit display (e.g., you could use "B" for bytes).</param>
      <param name="symbolNames">Optional SI factor symbol or name array to use during textual conversion, defaults to <see cref="P:gemstone.numeric.units.SI2.Symbols" />.</param>
      <param name="minimumFactor">Optional minimum SI factor. Defaults to <see cref="F:gemstone.numeric.units.SI2.Kilo" />.</param>
      <param name="maximumFactor">Optional maximum SI factor. Defaults to <see cref="F:gemstone.numeric.units.SI2.Exa" />.</param>
      <returns>A <see cref="T:System.String" /> representation of the number of units.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimalPlaces" /> cannot be negative.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumFactor" /> or <paramref name="maximumFactor" /> is not defined in <see cref="P:gemstone.numeric.units.SI2.Factors" /> array.</exception>
    </member>
    <member name="M:gemstone.numeric.units.SI2.ToScaledString(System.Int64,System.String,System.String,System.Int64,System.Int64)">
      <summary>
            Turns the given number of units (e.g., bytes) into a textual representation with an appropriate unit scaling
            and common named representation (e.g., KB, MB, GB, TB, etc.).
            </summary>
      <param name="totalUnits">Total units to represent textually.</param>
      <param name="format">A numeric string format for scaled <paramref name="totalUnits" />.</param>
      <param name="unitName">Name of unit display (e.g., you could use "B" for bytes).</param>
      <param name="minimumFactor">Optional minimum SI factor. Defaults to <see cref="F:gemstone.numeric.units.SI2.Kilo" />.</param>
      <param name="maximumFactor">Optional maximum SI factor. Defaults to <see cref="F:gemstone.numeric.units.SI2.Exa" />.</param>
      <returns>A <see cref="T:System.String" /> representation of the number of units.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumFactor" /> or <paramref name="maximumFactor" /> is not defined in <see cref="P:gemstone.numeric.units.SI2.Factors" /> array.</exception>
    </member>
    <member name="M:gemstone.numeric.units.SI2.ToScaledString(System.Int64,System.String,System.String,System.String[],System.Int32,System.Int64,System.Int64)">
      <summary>
            Turns the given number of units (e.g., bytes) into a textual representation with an appropriate unit scaling
            given string array of factor names or symbols.
            </summary>
      <param name="totalUnits">Total units to represent textually.</param>
      <param name="format">A numeric string format for scaled <paramref name="totalUnits" />.</param>
      <param name="unitName">Name of unit display (e.g., you could use "B" for bytes).</param>
      <param name="symbolNames">SI factor symbol or name array to use during textual conversion.</param>
      <param name="decimalPlaces">Optional number of decimal places to display.</param>
      <param name="minimumFactor">Optional minimum SI factor. Defaults to <see cref="F:gemstone.numeric.units.SI2.Kilo" />.</param>
      <param name="maximumFactor">Optional maximum SI factor. Defaults to <see cref="F:gemstone.numeric.units.SI2.Exa" />.</param>
      <returns>A <see cref="T:System.String" /> representation of the number of units.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumFactor" /> or <paramref name="maximumFactor" /> is not defined in <see cref="P:gemstone.numeric.units.SI2.Factors" /> array.</exception>
    </member>
    <member name="M:gemstone.numeric.units.SI2.ToScaledString(System.Int64,System.String,System.String[],System.Int64,System.Int64)">
      <summary>
            Turns the given number of units (e.g., bytes) into a textual representation with an appropriate unit scaling
            and common named representation (e.g., KB, MB, GB, TB, etc.).
            </summary>
      <param name="totalUnits">Total units to represent textually.</param>
      <param name="unitName">Name of unit display (e.g., you could use "B" for bytes).</param>
      <param name="symbolNames">Optional SI factor symbol or name array to use during textual conversion, defaults to <see cref="P:gemstone.numeric.units.SI2.Symbols" />.</param>
      <param name="minimumFactor">Optional minimum SI factor. Defaults to <see cref="F:gemstone.numeric.units.SI2.Kilo" />.</param>
      <param name="maximumFactor">Optional maximum SI factor. Defaults to <see cref="F:gemstone.numeric.units.SI2.Exa" />.</param>
      <returns>A <see cref="T:System.String" /> representation of the number of units.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumFactor" /> or <paramref name="maximumFactor" /> is not defined in <see cref="P:gemstone.numeric.units.SI2.Factors" /> array.</exception>
    </member>
    <member name="T:gemstone.numeric.units.Speed">
      <summary>
            Represents a speed measurement, in meters per second, as a double-precision floating-point number.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.Speed.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Speed" />.
            </summary>
      <param name="value">New speed value in meters per second.</param>
    </member>
    <member name="M:gemstone.numeric.units.Speed.CompareTo(gemstone.numeric.units.Speed)">
      <summary>
            Compares this instance to a specified <see cref="T:gemstone.numeric.units.Speed" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:gemstone.numeric.units.Speed" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.CompareTo(System.Double)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Double" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double" /> or <see cref="T:gemstone.numeric.units.Speed" />.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Speed.ConvertFrom(System.Double,gemstone.numeric.units.SpeedUnit)">
      <summary>
            Converts the <paramref name="value" /> in the specified <paramref name="sourceUnit" /> to a new <see cref="T:gemstone.numeric.units.Speed" /> in meters per second.
            </summary>
      <param name="value">Source value.</param>
      <param name="sourceUnit">Source value units.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Speed" /> from the specified <paramref name="value" /> in <paramref name="sourceUnit" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.ConvertTo(gemstone.numeric.units.SpeedUnit)">
      <summary>
            Converts the <see cref="T:gemstone.numeric.units.Speed" /> to the specified <paramref name="targetUnit" />.
            </summary>
      <param name="targetUnit">Target units.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Speed" /> converted to <paramref name="targetUnit" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.Equals(gemstone.numeric.units.Speed)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:gemstone.numeric.units.Speed" /> value.
            </summary>
      <param name="obj">A <see cref="T:gemstone.numeric.units.Speed" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.Equals(System.Double)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.Double" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Double" /> or <see cref="T:gemstone.numeric.units.Speed" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.FromFeetPerMinute(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Speed" /> value from the specified <paramref name="value" /> in feet per minute.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Speed" /> value in feet per minute.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Speed" /> object from the specified <paramref name="value" /> in feet per minute.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.FromInchesPerSecond(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Speed" /> value from the specified <paramref name="value" /> in inches per second.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Speed" /> value in inches per second.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Speed" /> object from the specified <paramref name="value" /> in inches per second.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.FromKilometersPerHour(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Speed" /> value from the specified <paramref name="value" /> in kilometers per hour.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Speed" /> value in kilometers per hour.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Speed" /> object from the specified <paramref name="value" /> in kilometers per hour.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.FromKnots(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Speed" /> value from the specified <paramref name="value" /> in knots (International).
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Speed" /> value in knots.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Speed" /> object from the specified <paramref name="value" /> in knots.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.FromMach(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Speed" /> value from the specified <paramref name="value" /> in Mach.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Speed" /> value in Mach.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Speed" /> object from the specified <paramref name="value" /> in Mach.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.FromMilesPerHour(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Speed" /> value from the specified <paramref name="value" /> in miles per hour.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Speed" /> value in miles per hour.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Speed" /> object from the specified <paramref name="value" /> in miles per hour.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="F:gemstone.numeric.units.Speed.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:gemstone.numeric.units.Speed" />. This field is constant.</summary>
    </member>
    <member name="F:gemstone.numeric.units.Speed.MinValue">
      <summary>Represents the smallest possible value of an <see cref="T:gemstone.numeric.units.Speed" />. This field is constant.</summary>
    </member>
    <member name="M:gemstone.numeric.units.Speed.op_Addition(gemstone.numeric.units.Speed,gemstone.numeric.units.Speed)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Speed" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Speed" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Speed" /> object as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.op_Division(gemstone.numeric.units.Speed,gemstone.numeric.units.Speed)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Speed" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Speed" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Speed" /> object as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.op_Equality(gemstone.numeric.units.Speed,gemstone.numeric.units.Speed)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Speed" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Speed" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.op_Exponent(gemstone.numeric.units.Speed,gemstone.numeric.units.Speed)">
      <summary>
            Returns result of first value raised to speed of second value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Speed" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Speed" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Double" /> value as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.op_GreaterThan(gemstone.numeric.units.Speed,gemstone.numeric.units.Speed)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Speed" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Speed" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.op_GreaterThanOrEqual(gemstone.numeric.units.Speed,gemstone.numeric.units.Speed)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Speed" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Speed" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.op_Implicit(gemstone.numeric.units.Speed)~System.Double">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.units.Speed" />, represented in meters per second, to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">A <see cref="T:gemstone.numeric.units.Speed" /> object.</param>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.op_Implicit(System.Double)~gemstone.numeric.units.Speed">
      <summary>
            Implicitly converts value, represented in meters per second, to a <see cref="T:gemstone.numeric.units.Speed" />.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Speed" /> object.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.op_Inequality(gemstone.numeric.units.Speed,gemstone.numeric.units.Speed)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Speed" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Speed" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.op_LessThan(gemstone.numeric.units.Speed,gemstone.numeric.units.Speed)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Speed" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Speed" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.op_LessThanOrEqual(gemstone.numeric.units.Speed,gemstone.numeric.units.Speed)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Speed" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Speed" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.op_Modulus(gemstone.numeric.units.Speed,gemstone.numeric.units.Speed)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Speed" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Speed" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Speed" /> object as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.op_Multiply(gemstone.numeric.units.Speed,gemstone.numeric.units.Speed)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Speed" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Speed" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Speed" /> object as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.op_Subtraction(gemstone.numeric.units.Speed,gemstone.numeric.units.Speed)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Speed" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Speed" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Speed" /> object as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Speed" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Speed" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Speed.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Speed.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Speed.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:gemstone.numeric.units.Speed" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Speed" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Speed.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Speed.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Speed.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:gemstone.numeric.units.Speed" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Speed" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Speed.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Speed.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Speed.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:gemstone.numeric.units.Speed" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Speed" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Speed.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Speed.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Speed.ToFeetPerMinute">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Speed" /> value in feet per minute.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Speed" /> in feet per minute.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.ToInchesPerSecond">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Speed" /> value in inches per second.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Speed" /> in inches per second.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.ToKilometersPerHour">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Speed" /> value in kilometers per hour.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Speed" /> in kilometers per hour.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.ToKnots">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Speed" /> value in knots (International).
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Speed" /> in knots.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.ToMach">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Speed" /> value in Mach.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Speed" /> in Mach.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.ToMilesPerHour">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Speed" /> value in miles per hour.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Speed" /> in miles per hour.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeros.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.TryParse(System.String,gemstone.numeric.units.Speed@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Speed" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Speed" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter per second is null,
            is not of the correct format, or represents a number less than <see cref="F:gemstone.numeric.units.Speed.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Speed.MaxValue" />.
            This parameter per second is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Speed.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,gemstone.numeric.units.Speed@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:gemstone.numeric.units.Speed" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Speed" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter per second is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:gemstone.numeric.units.Speed.MinValue" /> or
            greater than <see cref="F:gemstone.numeric.units.Speed.MaxValue" />. This parameter per second is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:gemstone.numeric.units.SpeedUnit">
      <summary>
            Represents the units available for a <see cref="T:gemstone.numeric.units.Speed" /> value.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SpeedUnit.MetersPerSecond">
      <summary>
            Meters per second speed units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SpeedUnit.MilesPerHour">
      <summary>
            Miles per hour speed units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SpeedUnit.KilometersPerHour">
      <summary>
            Kilometers per hour speed units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SpeedUnit.FeetPerMinute">
      <summary>
            Feet per minute speed units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SpeedUnit.InchesPerSecond">
      <summary>
            Inches per second speed units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SpeedUnit.Knots">
      <summary>
            Knot speed units, international.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.SpeedUnit.Mach">
      <summary>
            Mach speed units.
            </summary>
    </member>
    <member name="T:gemstone.numeric.units.Temperature">
      <summary>
            Represents a temperature, in Kelvin, as a double-precision floating-point number.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Temperature" />.
            </summary>
      <param name="value">New temperature value in Kelvin.</param>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.CompareTo(gemstone.numeric.units.Temperature)">
      <summary>
            Compares this instance to a specified <see cref="T:gemstone.numeric.units.Temperature" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:gemstone.numeric.units.Temperature" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.CompareTo(System.Double)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Double" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double" /> or <see cref="T:gemstone.numeric.units.Temperature" />.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.ConvertFrom(System.Double,gemstone.numeric.units.TemperatureUnit)">
      <summary>
            Converts the <paramref name="value" /> in the specified <paramref name="sourceUnit" /> to a new <see cref="T:gemstone.numeric.units.Temperature" /> in Kelvin.
            </summary>
      <param name="value">Source value.</param>
      <param name="sourceUnit">Source value units.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Temperature" /> from the specified <paramref name="value" /> in <paramref name="sourceUnit" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.ConvertTo(gemstone.numeric.units.TemperatureUnit)">
      <summary>
            Converts the <see cref="T:gemstone.numeric.units.Temperature" /> to the specified <paramref name="targetUnit" />.
            </summary>
      <param name="targetUnit">Target units.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Temperature" /> converted to <paramref name="targetUnit" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.Equals(gemstone.numeric.units.Temperature)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:gemstone.numeric.units.Temperature" /> value.
            </summary>
      <param name="obj">A <see cref="T:gemstone.numeric.units.Temperature" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.Equals(System.Double)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.Double" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Double" /> or <see cref="T:gemstone.numeric.units.Temperature" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.FromCelsius(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Temperature" /> value from the specified <paramref name="value" /> in Celsius.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Temperature" /> value in Celsius.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Temperature" /> object from the specified <paramref name="value" /> in Celsius.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.FromDelisle(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Temperature" /> value from the specified <paramref name="value" /> in Delisle.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Temperature" /> value in Delisle.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Temperature" /> object from the specified <paramref name="value" /> in Delisle.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.FromFahrenheit(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Temperature" /> value from the specified <paramref name="value" /> in Fahrenheit.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Temperature" /> value in Fahrenheit.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Temperature" /> object from the specified <paramref name="value" /> in Fahrenheit.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.FromNewton(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Temperature" /> value from the specified <paramref name="value" /> in Newton.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Temperature" /> value in Newton.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Temperature" /> object from the specified <paramref name="value" /> in Newton.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.FromRankine(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Temperature" /> value from the specified <paramref name="value" /> in Rankine.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Temperature" /> value in Rankine.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Temperature" /> object from the specified <paramref name="value" /> in Rankine.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.FromRéaumur(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Temperature" /> value from the specified <paramref name="value" /> in Réaumur.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Temperature" /> value in Réaumur.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Temperature" /> object from the specified <paramref name="value" /> in Réaumur.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.FromRømer(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Temperature" /> value from the specified <paramref name="value" /> in Rømer.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Temperature" /> value in Rømer.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Temperature" /> object from the specified <paramref name="value" /> in Rømer.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="F:gemstone.numeric.units.Temperature.MaxValue">
      <summary>Represents the largest possible value of a <see cref="T:gemstone.numeric.units.Temperature" />. This field is constant.</summary>
    </member>
    <member name="F:gemstone.numeric.units.Temperature.MinValue">
      <summary>Represents the smallest possible value of a <see cref="T:gemstone.numeric.units.Temperature" />. This field is constant.</summary>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.op_Addition(gemstone.numeric.units.Temperature,gemstone.numeric.units.Temperature)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Temperature" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Temperature" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Temperature" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.op_Division(gemstone.numeric.units.Temperature,gemstone.numeric.units.Temperature)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Temperature" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Temperature" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Temperature" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.op_Equality(gemstone.numeric.units.Temperature,gemstone.numeric.units.Temperature)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Temperature" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Temperature" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.op_Exponent(gemstone.numeric.units.Temperature,gemstone.numeric.units.Temperature)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Temperature" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Temperature" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Double" /> value as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.op_GreaterThan(gemstone.numeric.units.Temperature,gemstone.numeric.units.Temperature)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Temperature" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Temperature" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.op_GreaterThanOrEqual(gemstone.numeric.units.Temperature,gemstone.numeric.units.Temperature)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Temperature" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Temperature" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.op_Implicit(gemstone.numeric.units.Temperature)~System.Double">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.units.Temperature" />, represented in Kelvin, to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">A <see cref="T:gemstone.numeric.units.Temperature" /> object.</param>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.op_Implicit(System.Double)~gemstone.numeric.units.Temperature">
      <summary>
            Implicitly converts value, represented in Kelvin, to a <see cref="T:gemstone.numeric.units.Temperature" />.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Temperature" /> object.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.op_Inequality(gemstone.numeric.units.Temperature,gemstone.numeric.units.Temperature)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Temperature" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Temperature" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.op_LessThan(gemstone.numeric.units.Temperature,gemstone.numeric.units.Temperature)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Temperature" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Temperature" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.op_LessThanOrEqual(gemstone.numeric.units.Temperature,gemstone.numeric.units.Temperature)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Temperature" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Temperature" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.op_Modulus(gemstone.numeric.units.Temperature,gemstone.numeric.units.Temperature)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Temperature" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Temperature" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Temperature" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.op_Multiply(gemstone.numeric.units.Temperature,gemstone.numeric.units.Temperature)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Temperature" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Temperature" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Temperature" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.op_Subtraction(gemstone.numeric.units.Temperature,gemstone.numeric.units.Temperature)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Temperature" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Temperature" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Temperature" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Temperature" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Temperature" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Temperature.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Temperature.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:gemstone.numeric.units.Temperature" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Temperature" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Temperature.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Temperature.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:gemstone.numeric.units.Temperature" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Temperature" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Temperature.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Temperature.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:gemstone.numeric.units.Temperature" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Temperature" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Temperature.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Temperature.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.ToCelsius">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Temperature" /> value in Celsius.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Temperature" /> in Celsius.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.ToDelisle">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Temperature" /> value in Delisle.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Temperature" /> in Delisle.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.ToFahrenheit">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Temperature" /> value in Fahrenheit.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Temperature" /> in Fahrenheit.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.ToNewton">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Temperature" /> value in Newton.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Temperature" /> in Newton.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.ToRankine">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Temperature" /> value in Rankine.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Temperature" /> in Rankine.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.ToRéaumur">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Temperature" /> value in Réaumur.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Temperature" /> in Réaumur.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.ToRømer">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Temperature" /> value in Rømer.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Temperature" /> in Rømer.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeros.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.TryParse(System.String,gemstone.numeric.units.Temperature@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Temperature" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Temperature" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:gemstone.numeric.units.Temperature.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Temperature.MaxValue" />.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Temperature.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,gemstone.numeric.units.Temperature@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:gemstone.numeric.units.Temperature" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Temperature" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:gemstone.numeric.units.Temperature.MinValue" /> or
            greater than <see cref="F:gemstone.numeric.units.Temperature.MaxValue" />. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:gemstone.numeric.units.TemperatureUnit">
      <summary>
            Represents the units available for a <see cref="T:gemstone.numeric.units.Temperature" /> value.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.TemperatureUnit.Kelvin">
      <summary>
            Kelvin temperature units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.TemperatureUnit.Celsius">
      <summary>
            Celsius temperature units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.TemperatureUnit.Fahrenheit">
      <summary>
            Fahrenheit temperature units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.TemperatureUnit.Newton">
      <summary>
            Newton temperature units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.TemperatureUnit.Rankine">
      <summary>
            Rankine temperature units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.TemperatureUnit.Delisle">
      <summary>
            Delisle temperature units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.TemperatureUnit.Réaumur">
      <summary>
            Réaumur temperature units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.TemperatureUnit.Rømer">
      <summary>
            Rømer temperature units.
            </summary>
    </member>
    <member name="T:gemstone.numeric.units.Ticks">
      <summary>
            Represents an instant in time, or time period, as a 64-bit signed integer with a value that is expressed as the number
            of 100-nanosecond intervals that have elapsed since 12:00:00 midnight, January 1, 0001.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.#ctor(System.DateTime)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Ticks" />.
            </summary>
      <param name="value">New time value as a <see cref="T:System.DateTime" />.</param>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.#ctor(System.Int64)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Ticks" />.
            </summary>
      <param name="value">New time value in ticks.</param>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.#ctor(System.TimeSpan)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Ticks" />.
            </summary>
      <param name="value">New time value as a <see cref="T:System.TimeSpan" />.</param>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.AlignToMicrosecondDistribution(gemstone.numeric.units.Ticks,System.Int32)">
      <summary>
            Returns a floor-aligned microsecond distribution timestamp for given <paramref name="timestamp" />.
            </summary>
      <param name="timestamp">Timestamp to align.</param>
      <param name="samplesPerSecond">Samples per second to use for distribution.</param>
      <returns>A floor-aligned microsecond distribution timestamp for given <paramref name="timestamp" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.AlignToMillisecondDistribution(gemstone.numeric.units.Ticks,System.Int32)">
      <summary>
            Returns a floor-aligned millisecond distribution timestamp for given <paramref name="timestamp" />.
            </summary>
      <param name="timestamp">Timestamp to align.</param>
      <param name="samplesPerSecond">Samples per second to use for distribution.</param>
      <returns>A floor-aligned millisecond distribution timestamp for given <paramref name="timestamp" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.AlignToSubsecondDistribution(gemstone.numeric.units.Ticks,System.Int32,System.Int64)">
      <summary>
            Returns a floor-aligned sub-second distribution timestamp for given <paramref name="timestamp" />.
            </summary>
      <param name="timestamp">Timestamp to align.</param>
      <param name="samplesPerSecond">Samples per second to use for distribution.</param>
      <param name="timeResolution">Defines the time resolution to use when aligning <paramref name="timestamp" /> to its proper distribution timestamp.</param>
      <returns>A floor-aligned sub-second distribution timestamp for given <paramref name="timestamp" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.BaselinedTimestamp(gemstone.numeric.units.BaselineTimeInterval)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Ticks" /> value that represents a base-lined timestamp, in 100-nanoseconds
            intervals, that begins at the beginning of the specified time interval.
            </summary>
      <param name="interval">
        <see cref="T:gemstone.numeric.units.BaselineTimeInterval" /> to which <see cref="T:gemstone.numeric.units.Ticks" /> timestamp should be base-lined.
            </param>
      <returns>
            A new <see cref="T:gemstone.numeric.units.Ticks" /> value that represents a base-lined timestamp, in 100-nanoseconds intervals,
            that begins at the specified <see cref="T:gemstone.numeric.units.BaselineTimeInterval" />.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.CompareTo(gemstone.numeric.units.Ticks)">
      <summary>
            Compares this instance to a specified <see cref="T:gemstone.numeric.units.Ticks" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:gemstone.numeric.units.Ticks" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.CompareTo(System.DateTime)">
      <summary>
            Compares this instance to a specified <see cref="T:System.DateTime" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.DateTime" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.CompareTo(System.Int64)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Int64" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">An <see cref="T:System.Int64" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not an <see cref="T:System.Int64" /> or <see cref="T:gemstone.numeric.units.Ticks" />.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.CompareTo(System.TimeSpan)">
      <summary>
            Compares this instance to a specified <see cref="T:System.TimeSpan" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.TimeSpan" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.DistanceBeyondSecond">
      <summary>
            Gets the distance, in 100-nanoseconds intervals, beyond the top of the second in the timestamp
            represented by the <see cref="T:gemstone.numeric.units.Ticks" />.
            </summary>
      <returns>
            Number of 100-nanoseconds intervals <see cref="T:gemstone.numeric.units.Ticks" /> value is from the top of the second.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.Equals(gemstone.numeric.units.Ticks)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:gemstone.numeric.units.Ticks" /> value.
            </summary>
      <param name="obj">A <see cref="T:gemstone.numeric.units.Ticks" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.Equals(System.DateTime)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.DateTime" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.Equals(System.Int64)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Int64" /> value.
            </summary>
      <param name="obj">An <see cref="T:System.Int64" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Int64" /> or <see cref="T:gemstone.numeric.units.Ticks" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.Equals(System.TimeSpan)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.TimeSpan" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.FromMicroseconds(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Ticks" /> from the specified <paramref name="value" /> in microseconds.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Ticks" /> value in microseconds.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Ticks" /> object from the specified <paramref name="value" /> in microseconds.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.FromMilliseconds(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Ticks" /> from the specified <paramref name="value" /> in milliseconds.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Ticks" /> value in milliseconds.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Ticks" /> object from the specified <paramref name="value" /> in milliseconds.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.FromSeconds(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Ticks" /> from the specified <paramref name="value" /> in seconds.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Ticks" /> value in seconds.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Ticks" /> object from the specified <paramref name="value" /> in seconds.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Int64" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Int64" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.LocalTimeIsValid(gemstone.numeric.units.Ticks,gemstone.numeric.units.Ticks)">
      <summary>
            Determines if time, represented by <see cref="T:gemstone.numeric.units.Ticks" /> value in local time, is valid by comparing it to
            the system clock.
            </summary>
      <param name="lagTime">The allowed lag time, in ticks, before assuming time is too old to be valid.</param>
      <param name="leadTime">The allowed lead time, in ticks, before assuming time is too advanced to be valid.</param>
      <returns>True, if local time represented by <see cref="T:gemstone.numeric.units.Ticks" /> value, is within the specified range.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lagTime" /> and <paramref name="leadTime" /> must be greater than zero.
            </exception>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.LocalTimeIsValid(System.Double,System.Double)">
      <summary>
            Determines if time, represented by <see cref="T:gemstone.numeric.units.Ticks" /> value in local time, is valid by comparing it to
            the system clock.
            </summary>
      <param name="lagTime">The allowed lag time, in seconds, before assuming time is too old to be valid.</param>
      <param name="leadTime">The allowed lead time, in seconds, before assuming time is too advanced to be valid.</param>
      <returns>True, if local time represented by <see cref="T:gemstone.numeric.units.Ticks" /> value, is within the specified range.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lagTime" /> and <paramref name="leadTime" /> must be greater than zero, but can be less than one.
            </exception>
    </member>
    <member name="F:gemstone.numeric.units.Ticks.MaxValue">
      <summary>
            Represents the largest possible value of a <see cref="T:gemstone.numeric.units.Ticks" />. This field is constant.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.MicrosecondDistribution(System.Int32)">
      <summary>
            Gets a sub-second time distribution in microseconds for the specified <paramref name="samplesPerSecond" />.
            </summary>
      <param name="samplesPerSecond">Samples per second.</param>
      <returns>Array of sub-second time distribution in microseconds.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.MillisecondDistribution(System.Int32)">
      <summary>
            Gets a sub-second time distribution in milliseconds for the specified <paramref name="samplesPerSecond" />.
            </summary>
      <param name="samplesPerSecond">Samples per second.</param>
      <returns>Array of sub-second time distribution in milliseconds.</returns>
    </member>
    <member name="F:gemstone.numeric.units.Ticks.MinValue">
      <summary>
            Represents the smallest possible value of a <see cref="T:gemstone.numeric.units.Ticks" />. This field is constant.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_Addition(gemstone.numeric.units.Ticks,gemstone.numeric.units.Ticks)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">Left hand <see cref="T:gemstone.numeric.units.Ticks" /> operand.</param>
      <param name="value2">Right hand <see cref="T:gemstone.numeric.units.Ticks" /> operand.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_BitwiseAnd(gemstone.numeric.units.Ticks,gemstone.numeric.units.Ticks)">
      <summary>
            Returns logical bitwise AND of values.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.units.Ticks" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.units.Ticks" /> right hand operand.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_BitwiseOr(gemstone.numeric.units.Ticks,gemstone.numeric.units.Ticks)">
      <summary>
            Returns logical bitwise OR of values.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.units.Ticks" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.units.Ticks" /> right hand operand.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_Division(gemstone.numeric.units.Ticks,gemstone.numeric.units.Ticks)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">Left hand <see cref="T:gemstone.numeric.units.Ticks" /> operand.</param>
      <param name="value2">Right hand <see cref="T:gemstone.numeric.units.Ticks" /> operand.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_Equality(gemstone.numeric.units.Ticks,gemstone.numeric.units.Ticks)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.units.Ticks" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.units.Ticks" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_ExclusiveOr(gemstone.numeric.units.Ticks,gemstone.numeric.units.Ticks)">
      <summary>
            Returns logical bitwise exclusive-OR of values.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.units.Ticks" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.units.Ticks" /> right hand operand.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_Exponent(gemstone.numeric.units.Ticks,gemstone.numeric.units.Ticks)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">Left hand <see cref="T:gemstone.numeric.units.Ticks" /> operand.</param>
      <param name="value2">Right hand <see cref="T:gemstone.numeric.units.Ticks" /> operand.</param>
      <returns>
        <see cref="T:System.Double" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_False(gemstone.numeric.units.Ticks)">
      <summary>
            Returns true if value is equal to zero.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.units.Ticks" /> value to evaluate.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_GreaterThan(gemstone.numeric.units.Ticks,gemstone.numeric.units.Ticks)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.units.Ticks" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.units.Ticks" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_GreaterThanOrEqual(gemstone.numeric.units.Ticks,gemstone.numeric.units.Ticks)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.units.Ticks" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.units.Ticks" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_Implicit(gemstone.numeric.units.Ticks)~System.Int64">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.units.Ticks" />, represented in ticks, to an <see cref="T:System.Int64" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.units.Ticks" /> value to convert.</param>
      <returns>
        <see cref="T:System.Int64" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_Implicit(gemstone.numeric.units.Ticks)~System.DateTime">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.units.Ticks" />, represented in ticks, to a <see cref="T:System.DateTime" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.units.Ticks" /> value to convert.</param>
      <returns>
        <see cref="T:System.DateTime" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_Implicit(gemstone.numeric.units.Ticks)~System.TimeSpan">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.units.Ticks" />, represented in ticks, to a <see cref="T:System.TimeSpan" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.units.Ticks" /> value to convert.</param>
      <returns>
        <see cref="T:System.TimeSpan" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_Implicit(gemstone.numeric.units.Ticks)~gemstone.numeric.units.NtpTimeTag">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.units.Ticks" />, represented in ticks, to an <see cref="T:gemstone.numeric.units.NtpTimeTag" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.units.Ticks" /> value to convert.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.NtpTimeTag" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_Implicit(gemstone.numeric.units.Ticks)~gemstone.numeric.units.UnixTimeTag">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.units.Ticks" />, represented in ticks, to a <see cref="T:gemstone.numeric.units.UnixTimeTag" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.units.Ticks" /> value to convert.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.UnixTimeTag" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_Implicit(gemstone.numeric.units.TimeTagBase)~gemstone.numeric.units.Ticks">
      <summary>
            Implicitly converts value, represented as a <see cref="T:gemstone.numeric.units.TimeTagBase" />, to a <see cref="T:gemstone.numeric.units.Ticks" />.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.units.TimeTagBase" /> value to convert.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_Implicit(System.DateTime)~gemstone.numeric.units.Ticks">
      <summary>
            Implicitly converts value, represented as a <see cref="T:System.DateTime" />, to a <see cref="T:gemstone.numeric.units.Ticks" />.
            </summary>
      <param name="value">
        <see cref="T:System.DateTime" /> value to convert.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_Implicit(System.Int64)~gemstone.numeric.units.Ticks">
      <summary>
            Implicitly converts value, represented in ticks, to a <see cref="T:gemstone.numeric.units.Ticks" />.
            </summary>
      <param name="value">
        <see cref="T:System.Int64" /> value to convert.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_Implicit(System.TimeSpan)~gemstone.numeric.units.Ticks">
      <summary>
            Implicitly converts value, represented as a <see cref="T:System.TimeSpan" />, to a <see cref="T:gemstone.numeric.units.Ticks" />.
            </summary>
      <param name="value">
        <see cref="T:System.TimeSpan" /> value to convert.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_Inequality(gemstone.numeric.units.Ticks,gemstone.numeric.units.Ticks)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.units.Ticks" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.units.Ticks" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_LeftShift(gemstone.numeric.units.Ticks,System.Int32)">
      <summary>
            Returns value after left shifts of first value by the number of bits specified by second value.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.units.Ticks" /> value to shift.</param>
      <param name="shifts">
        <see cref="T:System.Int32" /> number of bits to shift.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_LessThan(gemstone.numeric.units.Ticks,gemstone.numeric.units.Ticks)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.units.Ticks" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.units.Ticks" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_LessThanOrEqual(gemstone.numeric.units.Ticks,gemstone.numeric.units.Ticks)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">
        <see cref="T:gemstone.numeric.units.Ticks" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:gemstone.numeric.units.Ticks" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_Modulus(gemstone.numeric.units.Ticks,gemstone.numeric.units.Ticks)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">Left hand <see cref="T:gemstone.numeric.units.Ticks" /> operand.</param>
      <param name="value2">Right hand <see cref="T:gemstone.numeric.units.Ticks" /> operand.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_Multiply(gemstone.numeric.units.Ticks,gemstone.numeric.units.Ticks)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">Left hand <see cref="T:gemstone.numeric.units.Ticks" /> operand.</param>
      <param name="value2">Right hand <see cref="T:gemstone.numeric.units.Ticks" /> operand.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_OnesComplement(gemstone.numeric.units.Ticks)">
      <summary>
            Returns bitwise complement of value.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.units.Ticks" /> value to evaluate.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_RightShift(gemstone.numeric.units.Ticks,System.Int32)">
      <summary>
            Returns value after right shifts of first value by the number of bits specified by second value.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.units.Ticks" /> value to shift.</param>
      <param name="shifts">
        <see cref="T:System.Int32" /> number of bits to shift.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_Subtraction(gemstone.numeric.units.Ticks,gemstone.numeric.units.Ticks)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">Left hand <see cref="T:gemstone.numeric.units.Ticks" /> operand.</param>
      <param name="value2">Right hand <see cref="T:gemstone.numeric.units.Ticks" /> operand.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.op_True(gemstone.numeric.units.Ticks)">
      <summary>
            Returns true if value is not zero.
            </summary>
      <param name="value">
        <see cref="T:gemstone.numeric.units.Ticks" /> value to evaluate.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Ticks" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Ticks" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Ticks.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Ticks.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:gemstone.numeric.units.Ticks" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Ticks" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Ticks.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Ticks.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:gemstone.numeric.units.Ticks" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Ticks" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Ticks.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Ticks.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:gemstone.numeric.units.Ticks" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Ticks" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Ticks.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Ticks.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="F:gemstone.numeric.units.Ticks.PerDay">
      <summary>
            Number of 100-nanosecond ticks in one day.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.Ticks.PerHour">
      <summary>
            Number of 100-nanosecond ticks in one hour.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.Ticks.PerMicrosecond">
      <summary>
            Number of 100-nanosecond ticks in one microsecond.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.Ticks.PerMillisecond">
      <summary>
            Number of 100-nanosecond ticks in one millisecond.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.Ticks.PerMinute">
      <summary>
            Number of 100-nanosecond ticks in one minute.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.Ticks.PerSecond">
      <summary>
            Number of 100-nanosecond ticks in one second.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.RoundToSecondDistribution(gemstone.numeric.units.Ticks,System.Double,gemstone.numeric.units.Ticks)">
      <summary>
            Returns the nearest distribution timestamp for given <paramref name="timestamp" />.
            </summary>
      <param name="timestamp">Timestamp to align.</param>
      <param name="samplesPerSecond">Samples per second to use for distribution.</param>
      <param name="Baseline"> Starting Timestamp of the Distribution.</param>
      <returns>The nearest distribution timestamp for given <paramref name="timestamp" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.RoundToSubsecondDistribution(gemstone.numeric.units.Ticks,System.Int32)">
      <summary>
            Returns the nearest sub-second distribution timestamp for given <paramref name="timestamp" />.
            </summary>
      <param name="timestamp">Timestamp to align.</param>
      <param name="samplesPerSecond">Samples per second to use for distribution.</param>
      <returns>The nearest sub-second distribution timestamp for given <paramref name="timestamp" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.SubsecondDistribution(System.Int32)">
      <summary>
            Gets a sub-second time distribution in <see cref="T:gemstone.numeric.units.Ticks" /> for the specified <paramref name="samplesPerSecond" />.
            </summary>
      <param name="samplesPerSecond">Samples per second.</param>
      <returns>Array of sub-second time distribution in <see cref="T:gemstone.numeric.units.Ticks" />.</returns>
    </member>
    <member name="P:gemstone.numeric.units.Ticks.SystemTimer">
      <summary>
            Gets a high-resolution number of seconds, including fractional seconds, that have
            elapsed since 12:00:00 midnight, January 1, 0001.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.TimeIsValid(gemstone.numeric.units.Ticks,gemstone.numeric.units.Ticks,gemstone.numeric.units.Ticks)">
      <summary>
            Determines if time, represented by <see cref="T:gemstone.numeric.units.Ticks" /> value, is valid by comparing it to the specified
            current time.
            </summary>
      <param name="currentTime">Specified current time (e.g., could be DateTime.Now.Ticks).</param>
      <param name="lagTime">The allowed lag time, in ticks, before assuming time is too old to be valid.</param>
      <param name="leadTime">The allowed lead time, in ticks, before assuming time is too advanced to be valid.</param>
      <returns>True, if time represented by <see cref="T:gemstone.numeric.units.Ticks" /> value, is within the specified range.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lagTime" /> and <paramref name="leadTime" /> must be greater than zero.
            </exception>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.TimeIsValid(gemstone.numeric.units.Ticks,System.Double,System.Double)">
      <summary>
            Determines if time, represented by <see cref="T:gemstone.numeric.units.Ticks" /> value, is valid by comparing it to the specified
            current time.
            </summary>
      <param name="currentTime">Specified current time (e.g., could be DateTime.Now.Ticks).</param>
      <param name="lagTime">The allowed lag time, in seconds, before assuming time is too old to be valid.</param>
      <param name="leadTime">The allowed lead time, in seconds, before assuming time is too advanced to be valid.</param>
      <returns>True, if time represented by <see cref="T:gemstone.numeric.units.Ticks" /> value, is within the specified range.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lagTime" /> and <paramref name="leadTime" /> must be greater than zero, but can be less than one.
            </exception>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.ToDays">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Ticks" /> value in equivalent number of days.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Ticks" /> in days.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.ToElapsedTimeString">
      <summary>
            Converts the <see cref="T:gemstone.numeric.units.Ticks" /> value into a textual representation of years, days, hours,
            minutes and seconds.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of the number of
            years, days, hours, minutes and seconds represented by this value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.ToElapsedTimeString(System.Int32,System.Double)">
      <summary>
            Converts the <see cref="T:gemstone.numeric.units.Ticks" /> value into a textual representation of years, days, hours,
            minutes and seconds with the specified number of fractional digits.
            </summary>
      <param name="secondPrecision">Number of fractional digits to display for seconds.</param>
      <param name="minimumSubSecondResolution">
            Minimum sub-second resolution to display. Defaults to <see cref="F:gemstone.numeric.units.SI.Milli" />.
            </param>
      <returns>
            The string representation of the value of this instance, consisting of the number of
            years, days, hours, minutes and seconds represented by this value.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumSubSecondResolution" /> is not less than or equal to <see cref="F:gemstone.numeric.units.SI.Milli" /> or
            <paramref name="minimumSubSecondResolution" /> is not defined in <see cref="P:gemstone.numeric.units.SI.Factors" /> array.
            </exception>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.ToElapsedTimeString(System.Int32,System.String[],System.Double)">
      <summary>
            Converts the <see cref="T:gemstone.numeric.units.Ticks" /> value into a textual representation of years, days, hours,
            minutes and seconds with the specified number of fractional digits given string array of
            time names.
            </summary>
      <param name="secondPrecision">Number of fractional digits to display for seconds.</param>
      <param name="timeNames">Time names array to use during textual conversion.</param>
      <param name="minimumSubSecondResolution">
            Minimum sub-second resolution to display. Defaults to <see cref="F:gemstone.numeric.units.SI.Milli" />.
            </param>
      <returns>
            The string representation of the value of this instance, consisting of the number of
            years, days, hours, minutes and seconds represented by this value.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumSubSecondResolution" /> is not less than or equal to <see cref="F:gemstone.numeric.units.SI.Milli" /> or
            <paramref name="minimumSubSecondResolution" /> is not defined in <see cref="P:gemstone.numeric.units.SI.Factors" /> array.
            </exception>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.ToHours">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Ticks" /> value in equivalent number of hours.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Ticks" /> in hours.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.ToMicroseconds">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Ticks" /> value in equivalent number of microseconds.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Ticks" /> in microseconds.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.ToMicroseconds(gemstone.numeric.units.Ticks)">
      <summary>
            Converts <paramref name="value" />, in 100-nanosecond tick intervals, to microseconds.
            </summary>
      <param name="value">Number of ticks to convert to microseconds.</param>
      <returns>Number microseconds represented by specified <paramref name="value" /> in ticks.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.ToMilliseconds">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Ticks" /> value in equivalent number of milliseconds.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Ticks" /> in milliseconds.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.ToMilliseconds(gemstone.numeric.units.Ticks)">
      <summary>
            Converts <paramref name="value" />, in 100-nanosecond tick intervals, to milliseconds.
            </summary>
      <param name="value">Number of ticks to convert to milliseconds.</param>
      <returns>Number milliseconds represented by specified <paramref name="value" /> in ticks.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.ToMinutes">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Ticks" /> value in equivalent number of minutes.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Ticks" /> in minutes.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.ToSecondDistribution(gemstone.numeric.units.Ticks,System.Double,gemstone.numeric.units.Ticks,System.Int32)">
      <summary>
            Returns the distribution timestamp for given <paramref name="timestamp" /> or <see cref="F:gemstone.numeric.units.Ticks.MinValue" /> if there is no TS within the specified Tolerance.
            </summary>
      <param name="timestamp">Timestamp to align.</param>
      <param name="samplesPerSecond">Samples per second to use for distribution.</param>
      <param name="tolerance">Tolerance of the TS in ticks.</param>
      <param name="baseline"> Starting Timestamp of the Distribution.</param>
      <returns>The distribution timestamp for given <paramref name="timestamp" />or <see cref="F:gemstone.numeric.units.Ticks.MinValue" /> .</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.ToSeconds">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Ticks" /> value in equivalent number of seconds.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Ticks" /> in seconds.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.ToSeconds(gemstone.numeric.units.Ticks)">
      <summary>
            Converts <paramref name="value" />, in 100-nanosecond tick intervals, to seconds.
            </summary>
      <param name="value">Number of ticks to convert to seconds.</param>
      <returns>Number seconds represented by specified <paramref name="value" /> in ticks.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.ToString">
      <summary>
            Converts the value of the <see cref="T:gemstone.numeric.units.Ticks" /> value to its equivalent <see cref="T:System.DateTime" /> string representation.
            </summary>
      <returns>A <see cref="T:System.DateTime" /> string representation of the <see cref="T:gemstone.numeric.units.Ticks" /> value.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.ToString(System.IFormatProvider)">
      <summary>
            Converts the <see cref="T:gemstone.numeric.units.Ticks" /> value to its equivalent string representation, using
            the specified culture-specific <see cref="T:System.DateTime" /> format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.ToString(System.String)">
      <summary>
            Converts the <see cref="T:gemstone.numeric.units.Ticks" /> value to its equivalent string representation, using
            the specified <see cref="T:System.DateTime" /> format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the <see cref="T:gemstone.numeric.units.Ticks" /> value to its equivalent string representation, using
            specified format and culture-specific <see cref="T:System.DateTime" /> format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.TryParse(System.String,gemstone.numeric.units.Ticks@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Ticks" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Ticks" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:gemstone.numeric.units.Ticks.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Ticks.MaxValue" />.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,gemstone.numeric.units.Ticks@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:gemstone.numeric.units.Ticks" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Ticks" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:gemstone.numeric.units.Ticks.MinValue" /> or
            greater than <see cref="F:gemstone.numeric.units.Ticks.MaxValue" />. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.UtcTimeIsValid(gemstone.numeric.units.Ticks,gemstone.numeric.units.Ticks)">
      <summary>
            Determines if time, represented by <see cref="T:gemstone.numeric.units.Ticks" /> value in UTC time, is valid by comparing it to
            the system clock.
            </summary>
      <param name="lagTime">The allowed lag time, in ticks, before assuming time is too old to be valid.</param>
      <param name="leadTime">The allowed lead time, in ticks, before assuming time is too advanced to be valid.</param>
      <returns>True, if UTC time represented by <see cref="T:gemstone.numeric.units.Ticks" /> value, is within the specified range.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lagTime" /> and <paramref name="leadTime" /> must be greater than zero.
            </exception>
    </member>
    <member name="M:gemstone.numeric.units.Ticks.UtcTimeIsValid(System.Double,System.Double)">
      <summary>
            Determines if time, represented by <see cref="T:gemstone.numeric.units.Ticks" /> value in UTC time, is valid by comparing it to
            the system clock.
            </summary>
      <param name="lagTime">The allowed lag time, in seconds, before assuming time is too old to be valid.</param>
      <param name="leadTime">The allowed lead time, in seconds, before assuming time is too advanced to be valid.</param>
      <returns>True, if UTC time represented by <see cref="T:gemstone.numeric.units.Ticks" /> value, is within the specified range.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lagTime" /> and <paramref name="leadTime" /> must be greater than zero, but can be less than one.
            </exception>
    </member>
    <member name="F:gemstone.numeric.units.Ticks.Value">
      <summary>
            Time value stored in ticks.
            </summary>
    </member>
    <member name="T:gemstone.numeric.units.Time">
      <summary>
            Represents a time measurement, in seconds, as a double-precision floating-point number.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.Time.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Time" />.
            </summary>
      <param name="value">New time value in seconds.</param>
    </member>
    <member name="M:gemstone.numeric.units.Time.#ctor(System.TimeSpan)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Time" />.
            </summary>
      <param name="value">New time value as a <see cref="T:System.TimeSpan" />.</param>
    </member>
    <member name="M:gemstone.numeric.units.Time.CompareTo(gemstone.numeric.units.Time)">
      <summary>
            Compares this instance to a specified <see cref="T:gemstone.numeric.units.Time" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:gemstone.numeric.units.Time" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.CompareTo(System.Double)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Double" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">An <see cref="T:System.Double" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double" /> or <see cref="T:gemstone.numeric.units.Time" />.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Time.CompareTo(System.TimeSpan)">
      <summary>
            Compares this instance to a specified <see cref="T:System.TimeSpan" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.TimeSpan" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.ConvertFrom(System.Double,gemstone.numeric.units.TimeUnit)">
      <summary>
            Converts the <paramref name="value" /> in the specified <paramref name="sourceUnit" /> to a new <see cref="T:gemstone.numeric.units.Time" /> in seconds.
            </summary>
      <param name="value">Source value.</param>
      <param name="sourceUnit">Source value units.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Time" /> from the specified <paramref name="value" /> in <paramref name="sourceUnit" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.ConvertTo(gemstone.numeric.units.TimeUnit)">
      <summary>
            Converts the <see cref="T:gemstone.numeric.units.Time" /> to the specified <paramref name="targetUnit" />.
            </summary>
      <param name="targetUnit">Target units.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Time" /> converted to <paramref name="targetUnit" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.Equals(gemstone.numeric.units.Time)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:gemstone.numeric.units.Time" /> value.
            </summary>
      <param name="obj">A <see cref="T:gemstone.numeric.units.Time" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.Equals(System.Double)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double" /> value.
            </summary>
      <param name="obj">An <see cref="T:System.Double" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Double" /> or <see cref="T:gemstone.numeric.units.Time" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.Equals(System.TimeSpan)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.TimeSpan" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.FromAtomicUnitsOfTime(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Time" /> value from the specified <paramref name="value" /> in atomic units of time.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Time" /> value in atomic units of time.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Time" /> object from the specified <paramref name="value" /> in atomic units of time.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.FromDays(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Time" /> value from the specified <paramref name="value" /> in days.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Time" /> value in days.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Time" /> object from the specified <paramref name="value" /> in days.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.FromHours(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Time" /> value from the specified <paramref name="value" /> in hours.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Time" /> value in hours.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Time" /> object from the specified <paramref name="value" /> in hours.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.FromKe(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Time" /> value from the specified <paramref name="value" /> in ke,
            the traditional Chinese unit of decimal time.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Time" /> value in ke.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Time" /> object from the specified <paramref name="value" /> in ke.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.FromMinutes(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Time" /> value from the specified <paramref name="value" /> in minutes.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Time" /> value in minutes.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Time" /> object from the specified <paramref name="value" /> in minutes.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.FromPlanckTime(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Time" /> value from the specified <paramref name="value" /> in Planck time.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Time" /> value in Planck time.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Time" /> object from the specified <paramref name="value" /> in Planck time.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.FromTicks(gemstone.numeric.units.Ticks)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Time" /> value from the specified <paramref name="value" /> in <see cref="T:gemstone.numeric.units.Ticks" />.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Time" /> value in Ticks.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Time" /> object from the specified <paramref name="value" /> in <see cref="T:gemstone.numeric.units.Ticks" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.FromWeeks(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Time" /> value from the specified <paramref name="value" /> in weeks.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Time" /> value in weeks.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Time" /> object from the specified <paramref name="value" /> in weeks.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="F:gemstone.numeric.units.Time.MaxValue">
      <summary>Represents the largest possible value of a <see cref="T:gemstone.numeric.units.Time" />. This field is constant.</summary>
    </member>
    <member name="F:gemstone.numeric.units.Time.MinValue">
      <summary>Represents the smallest possible value of a <see cref="T:gemstone.numeric.units.Time" />. This field is constant.</summary>
    </member>
    <member name="M:gemstone.numeric.units.Time.op_Addition(gemstone.numeric.units.Time,gemstone.numeric.units.Time)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Time" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Time" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Time" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.op_Division(gemstone.numeric.units.Time,gemstone.numeric.units.Time)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Time" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Time" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Time" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.op_Equality(gemstone.numeric.units.Time,gemstone.numeric.units.Time)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Time" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Time" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.op_Exponent(gemstone.numeric.units.Time,gemstone.numeric.units.Time)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Time" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Time" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Double" /> value as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.op_GreaterThan(gemstone.numeric.units.Time,gemstone.numeric.units.Time)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Time" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Time" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.op_GreaterThanOrEqual(gemstone.numeric.units.Time,gemstone.numeric.units.Time)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Time" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Time" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.op_Implicit(gemstone.numeric.units.Time)~System.Double">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.units.Time" />, represented in seconds, to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">A <see cref="T:gemstone.numeric.units.Time" /> object.</param>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.op_Implicit(gemstone.numeric.units.Time)~System.TimeSpan">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.units.Time" />, represented in seconds, to a <see cref="T:System.TimeSpan" />.
            </summary>
      <param name="value">A <see cref="T:gemstone.numeric.units.Time" /> object.</param>
      <returns>A <see cref="T:System.TimeSpan" /> object.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.op_Implicit(System.Double)~gemstone.numeric.units.Time">
      <summary>
            Implicitly converts value, represented in seconds, to a <see cref="T:gemstone.numeric.units.Time" />.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Time" /> object.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.op_Implicit(System.TimeSpan)~gemstone.numeric.units.Time">
      <summary>
            Implicitly converts value, represented as a <see cref="T:System.TimeSpan" />, to a <see cref="T:gemstone.numeric.units.Time" />.
            </summary>
      <param name="value">A <see cref="T:System.TimeSpan" /> object.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Time" /> object.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.op_Inequality(gemstone.numeric.units.Time,gemstone.numeric.units.Time)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Time" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Time" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.op_LessThan(gemstone.numeric.units.Time,gemstone.numeric.units.Time)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Time" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Time" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.op_LessThanOrEqual(gemstone.numeric.units.Time,gemstone.numeric.units.Time)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Time" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Time" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.op_Modulus(gemstone.numeric.units.Time,gemstone.numeric.units.Time)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Time" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Time" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Time" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.op_Multiply(gemstone.numeric.units.Time,gemstone.numeric.units.Time)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Time" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Time" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Time" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.op_Subtraction(gemstone.numeric.units.Time,gemstone.numeric.units.Time)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Time" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Time" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Time" /> object as the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Time" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Time" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Time.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Time.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Time.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:gemstone.numeric.units.Time" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Time" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Time.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Time.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Time.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:gemstone.numeric.units.Time" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Time" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Time.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Time.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Time.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:gemstone.numeric.units.Time" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Time" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Time.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Time.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="F:gemstone.numeric.units.Time.SecondsPerDay">
      <summary>
            Number of seconds in one day.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.Time.SecondsPerHour">
      <summary>
            Number of seconds in one hour.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.Time.SecondsPerMinute">
      <summary>
            Number of seconds in one minute.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.Time.SecondsPerMonth(System.Int32,System.Int32)">
      <summary>
            Returns the number of seconds in the specified month and year.
            </summary>
      <param name="year">The year.</param>
      <param name="month">The month (a number ranging from 1 to 12).</param>
      <returns>
            The number of seconds, as a <see cref="T:gemstone.numeric.units.Time" />, in the month for the specified year.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Month is less than 1 or greater than 12. -or- year is less than 1 or greater than 9999.
            </exception>
    </member>
    <member name="F:gemstone.numeric.units.Time.SecondsPerTick">
      <summary>
            Fractional number of seconds in one tick.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.Time.SecondsPerWeek">
      <summary>
            Number of seconds in one week.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.Time.SecondsPerYear(System.Int32)">
      <summary>
            Returns the number of seconds in the specified year.
            </summary>
      <param name="year">The year.</param>
      <returns>
            The number of seconds in the specified year.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Year is less than 1 or greater than 9999.
            </exception>
    </member>
    <member name="F:gemstone.numeric.units.Time.TimeNames">
      <summary>
            Standard time names used by <see cref="M:gemstone.numeric.units.Time.ToElapsedTimeString(System.Double,System.Int32,System.String[],System.Double)" /> method.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.Time.ToAtomicUnitsOfTime">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Time" /> value in atomic units of time.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Time" /> in atomic units of time.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.ToDays">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Time" /> value in days.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Time" /> in days.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.ToElapsedTimeString(System.Double,System.Int32,System.String[],System.Double)">
      <summary>
            Converts total <paramref name="seconds" /> into a textual representation of years, days, hours,
            minutes and seconds with the specified number of fractional digits given string array of
            time names.
            </summary>
      <param name="seconds">Seconds to convert to elapsed time.</param>
      <param name="secondPrecision">Number of fractional digits to display for seconds.</param>
      <param name="timeNames">Time names array to use during textual conversion.</param>
      <param name="minimumSubSecondResolution">
            Minimum sub-second resolution to display. Defaults to <see cref="F:gemstone.numeric.units.SI.Milli" />.
            </param>
      <returns>
            The string representation of the value of this instance, consisting of the number of
            years, days, hours, minutes and seconds represented by this value.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumSubSecondResolution" /> is not less than or equal to <see cref="F:gemstone.numeric.units.SI.Milli" /> or
            <paramref name="minimumSubSecondResolution" /> is not defined in <see cref="P:gemstone.numeric.units.SI.Factors" /> array.
            </exception>
    </member>
    <member name="M:gemstone.numeric.units.Time.ToHours">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Time" /> value in hours.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Time" /> in hours.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.ToKe">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Time" /> value in ke, the traditional Chinese unit of decimal time.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Time" /> in ke.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.ToMinutes">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Time" /> value in minutes.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Time" /> in minutes.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.ToPlanckTime">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Time" /> value in Planck time.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Time" /> in Planck time.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.ToString">
      <summary>
            Converts the <see cref="T:gemstone.numeric.units.Time" /> value into a textual representation of years, days, hours,
            minutes and seconds.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of the number of
            years, days, hours, minutes and seconds represented by this value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.ToString(System.Int32,System.Double)">
      <summary>
            Converts the <see cref="T:gemstone.numeric.units.Time" /> value into a textual representation of years, days, hours,
            minutes and seconds with the specified number of fractional digits.
            </summary>
      <param name="secondPrecision">Number of fractional digits to display for seconds.</param>
      <param name="minimumSubSecondResolution">
            Minimum sub-second resolution to display. Defaults to <see cref="F:gemstone.numeric.units.SI.Milli" />.
            </param>
      <returns>
            The string representation of the value of this instance, consisting of the number of
            years, days, hours, minutes and seconds represented by this value.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumSubSecondResolution" /> is not less than or equal to <see cref="F:gemstone.numeric.units.SI.Milli" /> or
            <paramref name="minimumSubSecondResolution" /> is not defined in <see cref="P:gemstone.numeric.units.SI.Factors" /> array.
            </exception>
    </member>
    <member name="M:gemstone.numeric.units.Time.ToString(System.Int32,System.String[],System.Double)">
      <summary>
            Converts the <see cref="T:gemstone.numeric.units.Time" /> value into a textual representation of years, days, hours,
            minutes and seconds with the specified number of fractional digits given string array of
            time names.
            </summary>
      <param name="secondPrecision">Number of fractional digits to display for seconds.</param>
      <param name="timeNames">Time names array to use during textual conversion.</param>
      <param name="minimumSubSecondResolution">
            Minimum sub-second resolution to display. Defaults to <see cref="F:gemstone.numeric.units.SI.Milli" />.
            </param>
      <returns>
            The string representation of the value of this instance, consisting of the number of
            years, days, hours, minutes and seconds represented by this value.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumSubSecondResolution" /> is not less than or equal to <see cref="F:gemstone.numeric.units.SI.Milli" /> or
            <paramref name="minimumSubSecondResolution" /> is not defined in <see cref="P:gemstone.numeric.units.SI.Factors" /> array.
            </exception>
    </member>
    <member name="M:gemstone.numeric.units.Time.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.ToTicks">
      <summary>
            Converts the <see cref="T:gemstone.numeric.units.Time" /> value, in seconds, to 100-nanosecond tick intervals.
            </summary>
      <returns>A <see cref="T:gemstone.numeric.units.Ticks" /> object.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.ToWeeks">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Time" /> value in weeks.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Time" /> in weeks.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.TryParse(System.String,gemstone.numeric.units.Time@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Time" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Time" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:gemstone.numeric.units.Time.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Time.MaxValue" />.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Time.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,gemstone.numeric.units.Time@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:gemstone.numeric.units.Time" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Time" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:gemstone.numeric.units.Time.MinValue" /> or
            greater than <see cref="F:gemstone.numeric.units.Time.MaxValue" />. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:gemstone.numeric.units.TimeSpanExtensions">
      <summary>
            Extends the TimeSpan Class
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.TimeSpanExtensions.ToElapsedTimeString(System.TimeSpan,System.Int32,System.Double)">
      <summary>
            Converts the <see cref="T:System.TimeSpan" /> value into a textual representation of years, days, hours,
            minutes and seconds with the specified number of fractional digits.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> to process.</param>
      <param name="secondPrecision">Number of fractional digits to display for seconds. Defaults to 2.</param>
      <param name="minimumSubSecondResolution">Minimum sub-second resolution to display. Defaults to <see cref="F:gemstone.numeric.units.SI.Milli" />.</param>
      <returns>
            The string representation of the value of this <see cref="T:System.TimeSpan" />, consisting of the number of
            years, days, hours, minutes and seconds represented by this value.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumSubSecondResolution" /> is not less than or equal to <see cref="F:gemstone.numeric.units.SI.Milli" /> or
            <paramref name="minimumSubSecondResolution" /> is not defined in <see cref="P:gemstone.numeric.units.SI.Factors" /> array.
            </exception>
    </member>
    <member name="T:gemstone.numeric.units.TimeTagBase">
      <summary>
            Represents the base class for alternate timetag implementations.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.#ctor(System.Int64,gemstone.numeric.units.Ticks)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.TimeTagBase" />, given standard .NET <see cref="T:System.DateTime" />.
            </summary>
      <param name="baseDateOffsetTicks">Ticks of timetag base.</param>
      <param name="timestamp">Timestamp in <see cref="T:gemstone.numeric.units.Ticks" /> used to create timetag from.</param>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.#ctor(System.Int64,System.Decimal)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.TimeTagBase" />, given number base time (in ticks) and seconds since base time.
            </summary>
      <param name="baseDateOffsetTicks">Ticks of timetag base.</param>
      <param name="seconds">Number of seconds since base time.</param>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.TimeTagBase" /> from serialization parameters.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with populated with data.</param>
      <param name="context">The source <see cref="T:System.Runtime.Serialization.StreamingContext" /> for this deserialization.</param>
    </member>
    <member name="P:gemstone.numeric.units.TimeTagBase.BaseDateOffsetTicks">
      <summary>
            Gets ticks representing the absolute minimum time of this timetag implementation.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.CompareTo(gemstone.numeric.units.TimeTagBase)">
      <summary>
            Compares the <see cref="T:gemstone.numeric.units.TimeTagBase" /> with another <see cref="T:gemstone.numeric.units.TimeTagBase" />.
            </summary>
      <param name="other">The <see cref="T:gemstone.numeric.units.TimeTagBase" /> to compare with the current <see cref="T:gemstone.numeric.units.TimeTagBase" />.</param>
      <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.</returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.CompareTo(System.DateTime)">
      <summary>
            Compares the <see cref="T:gemstone.numeric.units.TimeTagBase" /> with a <see cref="T:System.DateTime" />.
            </summary>
      <param name="other">The <see cref="T:System.DateTime" /> to compare with the current <see cref="T:gemstone.numeric.units.TimeTagBase" />.</param>
      <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.</returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.CompareTo(System.Object)">
      <summary>
            Compares the <see cref="T:gemstone.numeric.units.TimeTagBase" /> with the specified <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:gemstone.numeric.units.TimeTagBase" />.</param>
      <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Object" /> is not an <see cref="T:gemstone.numeric.units.TimeTagBase" /> or a <see cref="T:System.DateTime" />.</exception>
    </member>
    <member name="F:gemstone.numeric.units.TimeTagBase.DefaultFormat">
      <summary>
            Default format for <see cref="T:gemstone.numeric.units.TimeTagBase" /> implementations.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.Equals(gemstone.numeric.units.TimeTagBase)">
      <summary>
            Determines whether the specified <see cref="T:gemstone.numeric.units.TimeTagBase" /> is equal to the current <see cref="T:gemstone.numeric.units.TimeTagBase" />.
            </summary>
      <param name="other">The <see cref="T:gemstone.numeric.units.TimeTagBase" /> to compare with the current <see cref="T:gemstone.numeric.units.TimeTagBase" />.</param>
      <returns>
            true if the specified <see cref="T:gemstone.numeric.units.TimeTagBase" /> is equal to the current <see cref="T:gemstone.numeric.units.TimeTagBase" />;
            otherwise, false.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.Equals(System.DateTime)">
      <summary>
            Determines whether the specified <see cref="T:System.DateTime" /> is equal to the current <see cref="T:gemstone.numeric.units.TimeTagBase" />.
            </summary>
      <param name="other">The <see cref="T:System.DateTime" /> to compare with the current <see cref="T:gemstone.numeric.units.TimeTagBase" />.</param>
      <returns>
            true if the specified <see cref="T:System.DateTime" /> is equal to the current <see cref="T:gemstone.numeric.units.TimeTagBase" />;
            otherwise, false.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:gemstone.numeric.units.TimeTagBase" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:gemstone.numeric.units.TimeTagBase" />.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:gemstone.numeric.units.TimeTagBase" />;
            otherwise, false.
            </returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Object" /> is not an <see cref="T:gemstone.numeric.units.TimeTagBase" />.</exception>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.GetHashCode">
      <summary>
            Serves as a hash function for the current <see cref="T:gemstone.numeric.units.TimeTagBase" />.
            </summary>
      <returns>A hash code for the current <see cref="T:gemstone.numeric.units.TimeTagBase" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination <see cref="T:System.Runtime.Serialization.StreamingContext" /> for this serialization.</param>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.op_Equality(gemstone.numeric.units.TimeTagBase,gemstone.numeric.units.TimeTagBase)">
      <summary>
            Returns true if <paramref name="value1" /> is equal to <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is equal to <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.op_Equality(gemstone.numeric.units.TimeTagBase,System.DateTime)">
      <summary>
            Returns true if <paramref name="value1" /> is equal to <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is equal to <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.op_Equality(System.DateTime,gemstone.numeric.units.TimeTagBase)">
      <summary>
            Returns true if <paramref name="value1" /> is equal to <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is equal to <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.op_GreaterThan(gemstone.numeric.units.TimeTagBase,gemstone.numeric.units.TimeTagBase)">
      <summary>
            Returns true if <paramref name="value1" /> is greater than <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is greater than <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.op_GreaterThan(gemstone.numeric.units.TimeTagBase,System.DateTime)">
      <summary>
            Returns true if <paramref name="value1" /> is greater than <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is greater than <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.op_GreaterThan(System.DateTime,gemstone.numeric.units.TimeTagBase)">
      <summary>
            Returns true if <paramref name="value1" /> is greater than <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is greater than <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.op_GreaterThanOrEqual(gemstone.numeric.units.TimeTagBase,gemstone.numeric.units.TimeTagBase)">
      <summary>
            Returns true if <paramref name="value1" /> is greater than or equal to <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is greater than or equal to <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.op_GreaterThanOrEqual(gemstone.numeric.units.TimeTagBase,System.DateTime)">
      <summary>
            Returns true if <paramref name="value1" /> is greater than or equal to <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is greater than or equal to <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.op_GreaterThanOrEqual(System.DateTime,gemstone.numeric.units.TimeTagBase)">
      <summary>
            Returns true if <paramref name="value1" /> is greater than or equal to <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is greater than or equal to <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.op_Inequality(gemstone.numeric.units.TimeTagBase,gemstone.numeric.units.TimeTagBase)">
      <summary>
            Returns true if <paramref name="value1" /> is not equal to <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is not equal to <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.op_Inequality(gemstone.numeric.units.TimeTagBase,System.DateTime)">
      <summary>
            Returns true if <paramref name="value1" /> is not equal to <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is not equal to <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.op_Inequality(System.DateTime,gemstone.numeric.units.TimeTagBase)">
      <summary>
            Returns true if <paramref name="value1" /> is not equal to <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is not equal to <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.op_LessThan(gemstone.numeric.units.TimeTagBase,gemstone.numeric.units.TimeTagBase)">
      <summary>
            Returns true if <paramref name="value1" /> is less than <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is less than <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.op_LessThan(gemstone.numeric.units.TimeTagBase,System.DateTime)">
      <summary>
            Returns true if <paramref name="value1" /> is less than <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is less than <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.op_LessThan(System.DateTime,gemstone.numeric.units.TimeTagBase)">
      <summary>
            Returns true if <paramref name="value1" /> is less than <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is less than <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.op_LessThanOrEqual(gemstone.numeric.units.TimeTagBase,gemstone.numeric.units.TimeTagBase)">
      <summary>
            Returns true if <paramref name="value1" /> is less than or equal to <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is less than or equal to <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.op_LessThanOrEqual(gemstone.numeric.units.TimeTagBase,System.DateTime)">
      <summary>
            Returns true if <paramref name="value1" /> is less than or equal to <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is less than or equal to <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.op_LessThanOrEqual(System.DateTime,gemstone.numeric.units.TimeTagBase)">
      <summary>
            Returns true if <paramref name="value1" /> is less than or equal to <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is less than or equal to <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.ToDateTime">
      <summary>
            Returns standard .NET <see cref="T:System.DateTime" /> representation for timetag.
            </summary>
      <returns>A <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.ToString">
      <summary>
            Returns basic textual representation for timetag.
            </summary>
      <returns>A <see cref="T:System.String" /> value representing the timetag.</returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.ToString(System.IFormatProvider)">
      <summary>
            Returns textual representation for timetag using the specified <paramref name="provider" />.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <see cref="T:System.String" /> of textual representation for timetag.</returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.ToString(System.String)">
      <summary>
            Returns textual representation for timetag in the specified <paramref name="format" />.
            </summary>
      <param name="format">Format of text output.</param>
      <returns>
        <see cref="T:System.String" /> of textual representation for timetag.</returns>
    </member>
    <member name="M:gemstone.numeric.units.TimeTagBase.ToString(System.String,System.IFormatProvider)">
      <summary>
            Returns textual representation for timetag in the specified <paramref name="format" /> using 
            the specified <paramref name="provider" />.
            </summary>
      <param name="format">Format of text output.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <see cref="T:System.String" /> of textual representation for timetag.</returns>
    </member>
    <member name="P:gemstone.numeric.units.TimeTagBase.Value">
      <summary>
            Gets or sets number of seconds (including any fractional seconds) since base time.
            </summary>
    </member>
    <member name="T:gemstone.numeric.units.TimeUnit">
      <summary>
            Represents the units available for a <see cref="T:gemstone.numeric.units.Time" /> value.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.TimeUnit.Seconds">
      <summary>
            Second time units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.TimeUnit.Minutes">
      <summary>
            Minute time units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.TimeUnit.Hours">
      <summary>
            Hour time units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.TimeUnit.Days">
      <summary>
            Day time units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.TimeUnit.Weeks">
      <summary>
            Week time units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.TimeUnit.Ticks">
      <summary>
            Tick time units, 100-nanosecond intervals since 1/1/0001.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.TimeUnit.AtomicUnitsOfTime">
      <summary>
            Atomic time units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.TimeUnit.PlanckTime">
      <summary>
            Planck time units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.TimeUnit.Ke">
      <summary>
            Ke time units, traditional Chinese unit of decimal time.
            </summary>
    </member>
    <member name="T:gemstone.numeric.units.UnitExtensions">
      <summary>
            Defines extension functions related to unit structures.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.UnitExtensions.Average(System.Collections.Generic.IEnumerable{gemstone.numeric.units.Angle})">
      <summary>
            Calculates an average of the specified sequence of <see cref="T:gemstone.numeric.units.Angle" /> values.
            </summary>
      <param name="source">Sequence of <see cref="T:gemstone.numeric.units.Angle" /> values over which to calculate average.</param>
      <returns>Average of the specified sequence of <see cref="T:gemstone.numeric.units.Angle" /> values.</returns>
    </member>
    <member name="M:gemstone.numeric.units.UnitExtensions.Unwrap(System.Collections.Generic.IEnumerable{gemstone.numeric.units.Angle})">
      <summary>
            Unwraps a set of <see cref="T:gemstone.numeric.units.Angle" /> values so a comparable mathematical operation can be applied.
            </summary>
      <param name="source">Sequence of <see cref="T:gemstone.numeric.units.Angle" /> values to unwrap.</param>
      <returns>Unwrapped set of <see cref="T:gemstone.numeric.units.Angle" /> values.</returns>
    </member>
    <member name="T:gemstone.numeric.units.UnixTimeTag">
      <summary>
            Represents a standard Unix timetag.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.UnixTimeTag.#ctor(gemstone.numeric.units.Ticks)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.UnixTimeTag" />, given specified <see cref="T:gemstone.numeric.units.Ticks" />.
            </summary>
      <param name="timestamp">Timestamp in <see cref="T:gemstone.numeric.units.Ticks" /> to create Unix timetag from (minimum valid date is 1/1/1970).</param>
    </member>
    <member name="M:gemstone.numeric.units.UnixTimeTag.#ctor(System.Decimal)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.UnixTimeTag" />, given number of seconds since 1/1/1970.
            </summary>
      <param name="seconds">Number of seconds since 1/1/1970.</param>
    </member>
    <member name="M:gemstone.numeric.units.UnixTimeTag.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.UnixTimeTag" /> from serialization parameters.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with populated with data.</param>
      <param name="context">The source <see cref="T:System.Runtime.Serialization.StreamingContext" /> for this deserialization.</param>
    </member>
    <member name="M:gemstone.numeric.units.UnixTimeTag.#ctor(System.UInt32)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.UnixTimeTag" />, given number of seconds since 1/1/1970.
            </summary>
      <param name="seconds">Number of seconds since 1/1/1970.</param>
    </member>
    <member name="F:gemstone.numeric.units.UnixTimeTag.BaseTicks">
      <summary>
            Number of ticks since 1/1/1970.
            </summary>
    </member>
    <member name="T:gemstone.numeric.units.Voltage">
      <summary>
            Represents an electromotive force (i.e., voltage) measurement, in volts, as a double-precision floating-point number.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Voltage" />.
            </summary>
      <param name="value">New voltage value in volts.</param>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.CompareTo(gemstone.numeric.units.Voltage)">
      <summary>
            Compares this instance to a specified <see cref="T:gemstone.numeric.units.Voltage" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:gemstone.numeric.units.Voltage" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.CompareTo(System.Double)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Double" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double" /> or <see cref="T:gemstone.numeric.units.Voltage" />.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.ConvertFrom(System.Double,gemstone.numeric.units.VoltageUnit)">
      <summary>
            Converts the <paramref name="value" /> in the specified <paramref name="sourceUnit" /> to a new <see cref="T:gemstone.numeric.units.Voltage" /> in volts.
            </summary>
      <param name="value">Source value.</param>
      <param name="sourceUnit">Source value units.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Voltage" /> from the specified <paramref name="value" /> in <paramref name="sourceUnit" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.ConvertTo(gemstone.numeric.units.VoltageUnit)">
      <summary>
            Converts the <see cref="T:gemstone.numeric.units.Voltage" /> to the specified <paramref name="targetUnit" />.
            </summary>
      <param name="targetUnit">Target units.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Voltage" /> converted to <paramref name="targetUnit" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.Equals(gemstone.numeric.units.Voltage)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:gemstone.numeric.units.Voltage" /> value.
            </summary>
      <param name="obj">A <see cref="T:gemstone.numeric.units.Voltage" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.Equals(System.Double)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.Double" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Double" /> or <see cref="T:gemstone.numeric.units.Voltage" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.FromAbvolts(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Voltage" /> value from the specified <paramref name="value" /> in abvolts.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Voltage" /> value in abvolts.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Voltage" /> object from the specified <paramref name="value" /> in abvolts.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.FromStatvolts(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Voltage" /> value from the specified <paramref name="value" /> in statvolts.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Voltage" /> value in statvolts.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Voltage" /> object from the specified <paramref name="value" /> in statvolts.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="F:gemstone.numeric.units.Voltage.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:gemstone.numeric.units.Voltage" />. This field is constant.</summary>
    </member>
    <member name="F:gemstone.numeric.units.Voltage.MinValue">
      <summary>Represents the smallest possible value of an <see cref="T:gemstone.numeric.units.Voltage" />. This field is constant.</summary>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.op_Addition(gemstone.numeric.units.Voltage,gemstone.numeric.units.Voltage)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Voltage" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Voltage" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Voltage" /> as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.op_Division(gemstone.numeric.units.Voltage,gemstone.numeric.units.Voltage)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Voltage" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Voltage" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Voltage" /> as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.op_Equality(gemstone.numeric.units.Voltage,gemstone.numeric.units.Voltage)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Voltage" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Voltage" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.op_Exponent(gemstone.numeric.units.Voltage,gemstone.numeric.units.Voltage)">
      <summary>
            Returns result of first value raised to voltage of second value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Voltage" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Voltage" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Double" /> value as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.op_GreaterThan(gemstone.numeric.units.Voltage,gemstone.numeric.units.Voltage)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Voltage" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Voltage" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.op_GreaterThanOrEqual(gemstone.numeric.units.Voltage,gemstone.numeric.units.Voltage)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Voltage" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Voltage" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.op_Implicit(gemstone.numeric.units.Voltage)~System.Double">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.units.Voltage" />, represented in volts, to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">A <see cref="T:gemstone.numeric.units.Voltage" /> object.</param>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.op_Implicit(System.Double)~gemstone.numeric.units.Voltage">
      <summary>
            Implicitly converts value, represented in volts, to a <see cref="T:gemstone.numeric.units.Voltage" />.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Voltage" /> object.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.op_Inequality(gemstone.numeric.units.Voltage,gemstone.numeric.units.Voltage)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Voltage" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Voltage" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.op_LessThan(gemstone.numeric.units.Voltage,gemstone.numeric.units.Voltage)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Voltage" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Voltage" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.op_LessThanOrEqual(gemstone.numeric.units.Voltage,gemstone.numeric.units.Voltage)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Voltage" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Voltage" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.op_Modulus(gemstone.numeric.units.Voltage,gemstone.numeric.units.Voltage)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Voltage" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Voltage" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Voltage" /> as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.op_Multiply(gemstone.numeric.units.Voltage,gemstone.numeric.units.Voltage)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Voltage" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Voltage" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Voltage" /> as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.op_Subtraction(gemstone.numeric.units.Voltage,gemstone.numeric.units.Voltage)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Voltage" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Voltage" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Voltage" /> as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Voltage" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Voltage" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Voltage.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Voltage.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:gemstone.numeric.units.Voltage" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Voltage" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Voltage.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Voltage.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:gemstone.numeric.units.Voltage" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Voltage" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Voltage.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Voltage.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:gemstone.numeric.units.Voltage" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Voltage" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Voltage.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Voltage.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.ToAbvolts">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Voltage" /> value in abvolts.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Voltage" /> in abvolts.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.ToStatvolts">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Voltage" /> value in statvolts.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Voltage" /> in statvolts.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeros.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.TryParse(System.String,gemstone.numeric.units.Voltage@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Voltage" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Voltage" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:gemstone.numeric.units.Voltage.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Voltage.MaxValue" />.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Voltage.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,gemstone.numeric.units.Voltage@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:gemstone.numeric.units.Voltage" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Voltage" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:gemstone.numeric.units.Voltage.MinValue" /> or
            greater than <see cref="F:gemstone.numeric.units.Voltage.MaxValue" />. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:gemstone.numeric.units.VoltageUnit">
      <summary>
            Represents the units available for a <see cref="T:gemstone.numeric.units.Voltage" /> value.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.VoltageUnit.Volts">
      <summary>
            Voltage units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.VoltageUnit.Abvolts">
      <summary>
            Abvoltage units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.VoltageUnit.Statvolts">
      <summary>
            Statvoltage units.
            </summary>
    </member>
    <member name="T:gemstone.numeric.units.Volume">
      <summary>
            Represents a volume measurement, in cubic meters, as a double-precision floating-point number.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.Volume.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Volume" />.
            </summary>
      <param name="value">New volume value in cubic meters.</param>
    </member>
    <member name="M:gemstone.numeric.units.Volume.CompareTo(gemstone.numeric.units.Volume)">
      <summary>
            Compares this instance to a specified <see cref="T:gemstone.numeric.units.Volume" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:gemstone.numeric.units.Volume" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.CompareTo(System.Double)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Double" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double" /> or <see cref="T:gemstone.numeric.units.Volume" />.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Volume.ConvertFrom(System.Double,gemstone.numeric.units.VolumeUnit)">
      <summary>
            Converts the <paramref name="value" /> in the specified <paramref name="sourceUnit" /> to a new <see cref="T:gemstone.numeric.units.Volume" /> in cubic meters.
            </summary>
      <param name="value">Source value.</param>
      <param name="sourceUnit">Source value units.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Volume" /> from the specified <paramref name="value" /> in <paramref name="sourceUnit" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.ConvertTo(gemstone.numeric.units.VolumeUnit)">
      <summary>
            Converts the <see cref="T:gemstone.numeric.units.Volume" /> to the specified <paramref name="targetUnit" />.
            </summary>
      <param name="targetUnit">Target units.</param>
      <returns>
        <see cref="T:gemstone.numeric.units.Volume" /> converted to <paramref name="targetUnit" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.Equals(gemstone.numeric.units.Volume)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:gemstone.numeric.units.Volume" /> value.
            </summary>
      <param name="obj">A <see cref="T:gemstone.numeric.units.Volume" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.Equals(System.Double)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.Double" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Double" /> or <see cref="T:gemstone.numeric.units.Volume" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.FromCubicFeet(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Volume" /> value from the specified <paramref name="value" /> in cubic feet.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Volume" /> value in cubic feet.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Volume" /> object from the specified <paramref name="value" /> in cubic feet.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.FromCubicInches(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Volume" /> value from the specified <paramref name="value" /> in cubic inches.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Volume" /> value in cubic inches.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Volume" /> object from the specified <paramref name="value" /> in cubic inches.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.FromCups(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Volume" /> value from the specified <paramref name="value" /> in US cups.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Volume" /> value in US cups.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Volume" /> object from the specified <paramref name="value" /> in US cups.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.FromFluidOunces(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Volume" /> value from the specified <paramref name="value" /> in US fluid ounces.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Volume" /> value in US fluid ounces.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Volume" /> object from the specified <paramref name="value" /> in US fluid ounces.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.FromGallons(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Volume" /> value from the specified <paramref name="value" /> in US fluid gallons.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Volume" /> value in US fluid gallons.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Volume" /> object from the specified <paramref name="value" /> in US fluid gallons.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.FromLiters(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Volume" /> value from the specified <paramref name="value" /> in liters.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Volume" /> value in liters.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Volume" /> object from the specified <paramref name="value" /> in liters.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.FromMetricCups(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Volume" /> value from the specified <paramref name="value" /> in metric cups.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Volume" /> value in metric cups.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Volume" /> object from the specified <paramref name="value" /> in metric cups.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.FromMetricTablespoons(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Volume" /> value from the specified <paramref name="value" /> in metric tablespoons.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Volume" /> value in metric tablespoons.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Volume" /> object from the specified <paramref name="value" /> in metric tablespoons.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.FromMetricTeaspoons(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Volume" /> value from the specified <paramref name="value" /> in metric teaspoons.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Volume" /> value in metric teaspoons.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Volume" /> object from the specified <paramref name="value" /> in metric teaspoons.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.FromPints(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Volume" /> value from the specified <paramref name="value" /> in US fluid pints.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Volume" /> value in US fluid pints.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Volume" /> object from the specified <paramref name="value" /> in US fluid pints.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.FromQuarts(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Volume" /> value from the specified <paramref name="value" /> in US fluid quarts.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Volume" /> value in US fluid quarts.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Volume" /> object from the specified <paramref name="value" /> in US fluid quarts.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.FromTablespoons(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Volume" /> value from the specified <paramref name="value" /> in US tablespoons.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Volume" /> value in US tablespoons.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Volume" /> object from the specified <paramref name="value" /> in US tablespoons.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.FromTeaspoons(System.Double)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.Volume" /> value from the specified <paramref name="value" /> in US teaspoons.
            </summary>
      <param name="value">New <see cref="T:gemstone.numeric.units.Volume" /> value in US teaspoons.</param>
      <returns>New <see cref="T:gemstone.numeric.units.Volume" /> object from the specified <paramref name="value" /> in US teaspoons.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="F:gemstone.numeric.units.Volume.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:gemstone.numeric.units.Volume" />. This field is constant.</summary>
    </member>
    <member name="F:gemstone.numeric.units.Volume.MinValue">
      <summary>Represents the smallest possible value of an <see cref="T:gemstone.numeric.units.Volume" />. This field is constant.</summary>
    </member>
    <member name="M:gemstone.numeric.units.Volume.op_Addition(gemstone.numeric.units.Volume,gemstone.numeric.units.Volume)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Volume" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Volume" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Volume" /> object as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.op_Division(gemstone.numeric.units.Volume,gemstone.numeric.units.Volume)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Volume" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Volume" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Volume" /> object as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.op_Equality(gemstone.numeric.units.Volume,gemstone.numeric.units.Volume)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Volume" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Volume" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.op_Exponent(gemstone.numeric.units.Volume,gemstone.numeric.units.Volume)">
      <summary>
            Returns result of first value raised to volume of second value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Volume" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Volume" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Double" /> value as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.op_GreaterThan(gemstone.numeric.units.Volume,gemstone.numeric.units.Volume)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Volume" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Volume" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.op_GreaterThanOrEqual(gemstone.numeric.units.Volume,gemstone.numeric.units.Volume)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Volume" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Volume" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.op_Implicit(gemstone.numeric.units.Volume)~System.Double">
      <summary>
            Implicitly converts <see cref="T:gemstone.numeric.units.Volume" />, represented in cubic meters, to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">A <see cref="T:gemstone.numeric.units.Volume" /> object.</param>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.op_Implicit(System.Double)~gemstone.numeric.units.Volume">
      <summary>
            Implicitly converts value, represented in cubic meters, to a <see cref="T:gemstone.numeric.units.Volume" />.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Volume" /> object.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.op_Inequality(gemstone.numeric.units.Volume,gemstone.numeric.units.Volume)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Volume" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Volume" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.op_LessThan(gemstone.numeric.units.Volume,gemstone.numeric.units.Volume)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Volume" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Volume" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.op_LessThanOrEqual(gemstone.numeric.units.Volume,gemstone.numeric.units.Volume)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Volume" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Volume" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.op_Modulus(gemstone.numeric.units.Volume,gemstone.numeric.units.Volume)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Volume" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Volume" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Volume" /> object as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.op_Multiply(gemstone.numeric.units.Volume,gemstone.numeric.units.Volume)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Volume" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Volume" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Volume" /> object as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.op_Subtraction(gemstone.numeric.units.Volume,gemstone.numeric.units.Volume)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">A <see cref="T:gemstone.numeric.units.Volume" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:gemstone.numeric.units.Volume" /> object as the right hand operand.</param>
      <returns>A <see cref="T:gemstone.numeric.units.Volume" /> object as the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Volume" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Volume" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Volume.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Volume.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Volume.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:gemstone.numeric.units.Volume" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Volume" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Volume.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Volume.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Volume.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:gemstone.numeric.units.Volume" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Volume" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Volume.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Volume.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Volume.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:gemstone.numeric.units.Volume" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:gemstone.numeric.units.Volume" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:gemstone.numeric.units.Volume.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Volume.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:gemstone.numeric.units.Volume.ToCubicFeet">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Volume" /> value in cubic feet.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Volume" /> in cubic feet.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.ToCubicInches">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Volume" /> value in cubic inches.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Volume" /> in cubic inches.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.ToCups">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Volume" /> value in US cups.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Volume" /> in US cups.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.ToFluidOunces">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Volume" /> value in US fluid ounces.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Volume" /> in US fluid ounces.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.ToGallons">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Volume" /> value in US fluid gallons.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Volume" /> in US fluid gallons.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.ToLiters">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Volume" /> value in liters.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Volume" /> in liters.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.ToMetricCups">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Volume" /> value in metric cups.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Volume" /> in metric cups.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.ToMetricTablespoons">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Volume" /> value in metric tablespoons.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Volume" /> in metric tablespoons.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.ToMetricTeaspoons">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Volume" /> value in metric teaspoons.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Volume" /> in metric teaspoons.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.ToPints">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Volume" /> value in US fluid pints.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Volume" /> in US fluid pints.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.ToQuarts">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Volume" /> value in US fluid quarts.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Volume" /> in US fluid quarts.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeros.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.ToTablespoons">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Volume" /> value in US tablespoons.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Volume" /> in US tablespoons.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.ToTeaspoons">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.Volume" /> value in US teaspoons.
            </summary>
      <returns>Value of <see cref="T:gemstone.numeric.units.Volume" /> in US teaspoons.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.TryParse(System.String,gemstone.numeric.units.Volume@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:gemstone.numeric.units.Volume" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Volume" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:gemstone.numeric.units.Volume.MinValue" /> or greater than <see cref="F:gemstone.numeric.units.Volume.MaxValue" />.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:gemstone.numeric.units.Volume.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,gemstone.numeric.units.Volume@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:gemstone.numeric.units.Volume" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:gemstone.numeric.units.Volume" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:gemstone.numeric.units.Volume.MinValue" /> or
            greater than <see cref="F:gemstone.numeric.units.Volume.MaxValue" />. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:gemstone.numeric.units.VolumeUnit">
      <summary>
            Represents the units available for a <see cref="T:gemstone.numeric.units.Volume" /> value.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.VolumeUnit.CubicMeters">
      <summary>
            Cubic meter volume units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.VolumeUnit.Liters">
      <summary>
            Liter volume units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.VolumeUnit.Teaspoons">
      <summary>
            Teaspoon volume units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.VolumeUnit.MetricTeaspoons">
      <summary>
            Metric teaspoon volume units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.VolumeUnit.Tablespoons">
      <summary>
            Tablespoon volume units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.VolumeUnit.MetricTablespoons">
      <summary>
            Metric tablespoon volume units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.VolumeUnit.Cups">
      <summary>
            Cup volume units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.VolumeUnit.MetricCups">
      <summary>
            Metric cup volume units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.VolumeUnit.FluidOunces">
      <summary>
            Fluid ounce volume units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.VolumeUnit.Pints">
      <summary>
            Pint volume units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.VolumeUnit.Quarts">
      <summary>
            Quart volume units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.VolumeUnit.Gallons">
      <summary>
            Gallon volume units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.VolumeUnit.CubicInches">
      <summary>
            Cubic inch volume units.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.VolumeUnit.CubicFeet">
      <summary>
            Cubic feet volume units.
            </summary>
    </member>
    <member name="T:gemstone.numeric.units.ee.LineFrequency">
      <summary>
            Nominal line frequencies enumeration.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.LineFrequency.Hz50">
      <summary>
            50Hz nominal frequency.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.LineFrequency.Hz60">
      <summary>
            60Hz nominal frequency.
            </summary>
    </member>
    <member name="T:gemstone.numeric.units.ee.Phasor">
      <summary>
            Represents a phasor as a complex number value and a type (i.e., a voltage or a current).
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.ee.Phasor.#ctor(gemstone.numeric.units.ee.PhasorType,gemstone.numeric.ComplexNumber)">
      <summary>
            Creates a <see cref="T:gemstone.numeric.units.ee.Phasor" /> of the specified <paramref name="type" /> from the given <see cref="T:gemstone.numeric.ComplexNumber" />.
            </summary>
      <param name="type">Type of phasor, i.e., current or voltage.</param>
      <param name="z">
        <see cref="T:gemstone.numeric.ComplexNumber" /> to be copied.</param>
    </member>
    <member name="M:gemstone.numeric.units.ee.Phasor.#ctor(gemstone.numeric.units.ee.PhasorType,gemstone.numeric.units.Angle,System.Double)">
      <summary>
            Creates a <see cref="T:gemstone.numeric.units.ee.Phasor" /> of the specified <paramref name="type" /> from the given polar values.
            </summary>
      <param name="type">Type of phasor, i.e., current or voltage.</param>
      <param name="angle">The <see cref="T:gemstone.numeric.units.Angle" /> component, in radians, of the <see cref="T:gemstone.numeric.ComplexNumber" />.</param>
      <param name="magnitude">The magnitude (or absolute value) component of the <see cref="T:gemstone.numeric.ComplexNumber" />.</param>
    </member>
    <member name="M:gemstone.numeric.units.ee.Phasor.#ctor(gemstone.numeric.units.ee.PhasorType,System.Double,System.Double)">
      <summary>
            Creates a <see cref="T:gemstone.numeric.units.ee.Phasor" /> of the specified <paramref name="type" /> from the given rectangular values. 
            </summary>
      <param name="type">Type of phasor, i.e., current or voltage.</param>
      <param name="real">The real component of the <see cref="T:gemstone.numeric.ComplexNumber" />.</param>
      <param name="imaginary">The imaginary component of the <see cref="T:gemstone.numeric.ComplexNumber" />.</param>
    </member>
    <member name="M:gemstone.numeric.units.ee.Phasor.CalculateActivePower(gemstone.numeric.units.ee.Phasor,gemstone.numeric.units.ee.Phasor)">
      <summary>
            Calculates active (or real) power P, i.e., total watts, from imaginary and real components of a voltage and current phasor.
            </summary>
      <param name="voltage">Voltage phasor.</param>
      <param name="current">Current phasor.</param>
      <returns>Calculated watts from imaginary and real components of specified <paramref name="voltage" /> and <paramref name="current" /> phasors.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="voltage" /> and <paramref name="current" /> must have proper <see cref="F:gemstone.numeric.units.ee.Phasor.Type" />.</exception>
    </member>
    <member name="M:gemstone.numeric.units.ee.Phasor.CalculateApparentPower(gemstone.numeric.units.ee.Phasor,gemstone.numeric.units.ee.Phasor)">
      <summary>
            Calculates apparent power |S|, i.e., magnitude of complex power, from a voltage and current phasor.
            </summary>
      <param name="voltage">Voltage phasor.</param>
      <param name="current">Current phasor.</param>
      <returns>Calculated complex volt-amperes magnitude from specified <paramref name="voltage" /> and <paramref name="current" /> phasors.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="voltage" /> and <paramref name="current" /> must have proper <see cref="F:gemstone.numeric.units.ee.Phasor.Type" />.</exception>
    </member>
    <member name="M:gemstone.numeric.units.ee.Phasor.CalculateComplexPower(gemstone.numeric.units.ee.Phasor,gemstone.numeric.units.ee.Phasor)">
      <summary>
            Calculates complex power S, i.e., total volt-amperes power vector, from a voltage and current phasor.
            </summary>
      <param name="voltage">Voltage phasor.</param>
      <param name="current">Current phasor.</param>
      <returns>Calculated complex volt-amperes from specified <paramref name="voltage" /> and <paramref name="current" /> phasors.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="voltage" /> and <paramref name="current" /> must have proper <see cref="F:gemstone.numeric.units.ee.Phasor.Type" />.</exception>
    </member>
    <member name="M:gemstone.numeric.units.ee.Phasor.CalculateReactivePower(gemstone.numeric.units.ee.Phasor,gemstone.numeric.units.ee.Phasor)">
      <summary>
            Calculates reactive power Q, i.e., total volt-amperes of reactive power, from imaginary and real components of a voltage and current phasor.
            </summary>
      <param name="voltage">Voltage phasor.</param>
      <param name="current">Current phasor.</param>
      <returns>Calculated vars from imaginary and real components of specified <paramref name="voltage" /> and <paramref name="current" /> phasors.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="voltage" /> and <paramref name="current" /> must have proper <see cref="F:gemstone.numeric.units.ee.Phasor.Type" />.</exception>
    </member>
    <member name="M:gemstone.numeric.units.ee.Phasor.CalculateRelativePhase(gemstone.numeric.units.ee.Phasor,gemstone.numeric.units.ee.Phasor)">
      <summary>
            Calculates phase φ of voltage relative to current, i.e., angle difference between current and voltage phasor.
            </summary>
      <param name="voltage">Voltage phasor.</param>
      <param name="current">Current phasor.</param>
      <returns>Calculated phase of specified <paramref name="voltage" /> phasor relative to specified <paramref name="current" /> phasor.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="voltage" /> and <paramref name="current" /> must have proper <see cref="F:gemstone.numeric.units.ee.Phasor.Type" />.</exception>
    </member>
    <member name="P:gemstone.numeric.units.ee.Phasor.Conjugate">
      <summary>
            Gets the complex conjugate of this <see cref="T:gemstone.numeric.units.ee.Phasor" />.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.ee.Phasor.Equals(gemstone.numeric.units.ee.Phasor)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified Phasor value.
            </summary>
      <param name="obj">A <see cref="T:gemstone.numeric.units.ee.Phasor" /> to compare to this instance.</param>
      <returns>
            True if <paramref name="obj" /> has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.ee.Phasor.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if <paramref name="obj" /> is an instance of Phasor and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.ee.Phasor.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:gemstone.numeric.units.ee.Phasor.op_Addition(gemstone.numeric.units.ee.Phasor,gemstone.numeric.units.ee.Phasor)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="phasor1">Left hand operand.</param>
      <param name="phasor2">Right hand operand.</param>
      <returns>ComplexNumber representing the result of the addition operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.ee.Phasor.op_Division(gemstone.numeric.units.ee.Phasor,gemstone.numeric.units.ee.Phasor)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="phasor1">Left hand operand.</param>
      <param name="phasor2">Right hand operand.</param>
      <returns>ComplexNumber representing the result of the division operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.ee.Phasor.op_Equality(gemstone.numeric.units.ee.Phasor,gemstone.numeric.units.ee.Phasor)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="phasor1">Left hand operand.</param>
      <param name="phasor2">Right hand operand.</param>
      <returns>Boolean representing the result of the addition operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.ee.Phasor.op_Exponent(gemstone.numeric.units.ee.Phasor,System.Double)">
      <summary>
             Returns result of first value raised to power of second value.
             </summary>
      <param name="z">Phasor to be raised to power <paramref name="y" />.</param>
      <param name="y">Power to raise <see cref="T:gemstone.numeric.units.ee.Phasor" /><paramref name="z" />.</param>
      <returns>Phasor representing the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.ee.Phasor.op_Implicit(gemstone.numeric.units.ee.Phasor)~gemstone.numeric.ComplexNumber">
      <summary>
            Implicitly converts a <see cref="T:gemstone.numeric.units.ee.Phasor" /> to a <see cref="T:gemstone.numeric.ComplexNumber" />.
            </summary>
      <param name="phasor">Operand.</param>
      <returns>ComplexNumber representing the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.ee.Phasor.op_Implicit(gemstone.numeric.units.ee.Phasor)~System.Numerics.Complex">
      <summary>
            Implicitly converts a <see cref="T:gemstone.numeric.units.ee.Phasor" /> to a .NET <see cref="T:System.Numerics.Complex" /> value.
            </summary>
      <param name="phasor">Operand.</param>
      <returns>ComplexNumber representing the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.ee.Phasor.op_Inequality(gemstone.numeric.units.ee.Phasor,gemstone.numeric.units.ee.Phasor)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="phasor1">Left hand operand.</param>
      <param name="phasor2">Right hand operand.</param>
      <returns>Boolean representing the result of the inequality operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.ee.Phasor.op_Multiply(gemstone.numeric.units.ee.Phasor,gemstone.numeric.units.ee.Phasor)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="phasor1">Left hand operand.</param>
      <param name="phasor2">Right hand operand.</param>
      <returns>ComplexNumber representing the result of the multiplication operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.ee.Phasor.op_Subtraction(gemstone.numeric.units.ee.Phasor,gemstone.numeric.units.ee.Phasor)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="phasor1">Left hand operand.</param>
      <param name="phasor2">Right hand operand.</param>
      <returns>ComplexNumber representing the result of the subtraction operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.ee.Phasor.op_UnaryNegation(gemstone.numeric.units.ee.Phasor)">
      <summary>
            Returns the negated value.
            </summary>
      <param name="z">Left hand operand.</param>
      <returns>Phasor representing the result of the unary negation operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.ee.Phasor.Pow(gemstone.numeric.units.ee.Phasor,System.Double)">
      <summary>
             Returns specified <see cref="T:gemstone.numeric.units.ee.Phasor" /> raised to the specified power.
            </summary>
      <param name="z">Phasor to be raised to power <paramref name="y" />.</param>
      <param name="y">Power to raise <see cref="T:gemstone.numeric.units.ee.Phasor" /><paramref name="z" />.</param>
      <returns>Phasor representing the result of the operation.</returns>
    </member>
    <member name="M:gemstone.numeric.units.ee.Phasor.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this <see cref="T:gemstone.numeric.ComplexNumber" /> instance.
            </returns>
    </member>
    <member name="F:gemstone.numeric.units.ee.Phasor.Type">
      <summary>
            Phasor type.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.Phasor.Value">
      <summary>
            Phasor value.
            </summary>
    </member>
    <member name="T:gemstone.numeric.units.ee.PhasorType">
      <summary>
            Phasor types enumeration.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.PhasorType.Voltage">
      <summary>
            Voltage phasor.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.PhasorType.Current">
      <summary>
            Current phasor.
            </summary>
    </member>
    <member name="T:gemstone.numeric.units.ee.SignalKind">
      <summary>
            Fundamental signal type enumeration for common EE measurements that represents a kind of signal, not an explicit type.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalKind.Angle">
      <summary>
            Phase angle.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalKind.Magnitude">
      <summary>
            Phase magnitude.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalKind.Frequency">
      <summary>
            Line frequency.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalKind.DfDt">
      <summary>
            Frequency delta over time (dF/dt).
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalKind.Status">
      <summary>
            Status flags.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalKind.Digital">
      <summary>
            Digital value.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalKind.Analog">
      <summary>
            Analog value.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalKind.Calculation">
      <summary>
            Calculated value.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalKind.Statistic">
      <summary>
            Statistical value.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalKind.Alarm">
      <summary>
            Alarm value.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalKind.Quality">
      <summary>
            Quality flags.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalKind.Unknown">
      <summary>
            Undetermined signal type.
            </summary>
    </member>
    <member name="T:gemstone.numeric.units.ee.SignalKindExtensions">
      <summary>
            Defines extension functions for the <see cref="T:gemstone.numeric.units.ee.SignalKind" /> enumeration.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.ee.SignalKindExtensions.GetAcronym(gemstone.numeric.units.ee.SignalKind)">
      <summary>
            Gets the acronym for the specified <see cref="T:gemstone.numeric.units.ee.SignalKind" />.
            </summary>
      <param name="signal">
        <see cref="T:gemstone.numeric.units.ee.SignalKind" /> to convert to an acronym.</param>
      <returns>The acronym for the specified <see cref="T:gemstone.numeric.units.ee.SignalKind" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.ee.SignalKindExtensions.ParseSignalKind(System.String)">
      <summary>
            Gets the <see cref="T:gemstone.numeric.units.ee.SignalKind" /> for the specified <paramref name="acronym" />.
            </summary>
      <param name="acronym">Acronym of the desired <see cref="T:gemstone.numeric.units.ee.SignalKind" />.</param>
      <returns>The <see cref="T:gemstone.numeric.units.ee.SignalKind" /> for the specified <paramref name="acronym" />.</returns>
    </member>
    <member name="T:gemstone.numeric.units.ee.SignalReference">
      <summary>
            Represents a signal that can be referenced by its constituent components.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.ee.SignalReference.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:gemstone.numeric.units.ee.SignalReference" />.
            </summary>
      <param name="signal">
        <see cref="T:System.String" /> representation of this <see cref="T:gemstone.numeric.units.ee.SignalReference" />.</param>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalReference.Acronym">
      <summary>
            Gets or sets the acronym of this <see cref="T:gemstone.numeric.units.ee.SignalReference" />.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalReference.CellIndex">
      <summary>
            Gets or sets the cell index, if applicable, of this <see cref="T:gemstone.numeric.units.ee.SignalReference" />.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.ee.SignalReference.CompareTo(gemstone.numeric.units.ee.SignalReference)">
      <summary>
            Compares the current object with another object of the same type.
            </summary>
      <param name="other">Another <see cref="T:gemstone.numeric.units.ee.SignalReference" /> to compare with this <see cref="T:gemstone.numeric.units.ee.SignalReference" />.</param>
      <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.</returns>
    </member>
    <member name="M:gemstone.numeric.units.ee.SignalReference.CompareTo(System.Object)">
      <summary>
            Compares the current object with another object of the same type.
            </summary>
      <param name="obj">An object to compare with this <see cref="T:gemstone.numeric.units.ee.SignalReference" />.</param>
      <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.</returns>
      <exception cref="T:System.ArgumentException">Object is not a <see cref="T:gemstone.numeric.units.ee.SignalReference" />.</exception>
    </member>
    <member name="M:gemstone.numeric.units.ee.SignalReference.Equals(gemstone.numeric.units.ee.SignalReference)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:gemstone.numeric.units.ee.SignalReference.Equals(System.Object)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="obj">An object to compare with this object.</param>
      <returns>
        <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">Object is not a <see cref="T:gemstone.numeric.units.ee.SignalReference" />.</exception>
    </member>
    <member name="M:gemstone.numeric.units.ee.SignalReference.GetHashCode">
      <summary>
            Returns the hash code for this <see cref="T:gemstone.numeric.units.ee.SignalReference" />.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalReference.Index">
      <summary>
            Gets or sets the signal index of this <see cref="T:gemstone.numeric.units.ee.SignalReference" />.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalReference.Kind">
      <summary>
            Gets or sets the <see cref="T:gemstone.numeric.units.ee.SignalKind" /> of this <see cref="T:gemstone.numeric.units.ee.SignalReference" />.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.ee.SignalReference.op_Equality(gemstone.numeric.units.ee.SignalReference,gemstone.numeric.units.ee.SignalReference)">
      <summary>
            Compares two <see cref="T:gemstone.numeric.units.ee.SignalReference" /> values for equality.
            </summary>
      <param name="signal1">A <see cref="T:gemstone.numeric.units.ee.SignalReference" /> left hand operand.</param>
      <param name="signal2">A <see cref="T:gemstone.numeric.units.ee.SignalReference" /> right hand operand.</param>
      <returns>A boolean representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.ee.SignalReference.op_GreaterThan(gemstone.numeric.units.ee.SignalReference,gemstone.numeric.units.ee.SignalReference)">
      <summary>
            Returns true if left <see cref="T:gemstone.numeric.units.ee.SignalReference" /> value is greater than right <see cref="T:gemstone.numeric.units.ee.SignalReference" /> value.
            </summary>
      <param name="signal1">A <see cref="T:gemstone.numeric.units.ee.SignalReference" /> left hand operand.</param>
      <param name="signal2">A <see cref="T:gemstone.numeric.units.ee.SignalReference" /> right hand operand.</param>
      <returns>A boolean representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.ee.SignalReference.op_GreaterThanOrEqual(gemstone.numeric.units.ee.SignalReference,gemstone.numeric.units.ee.SignalReference)">
      <summary>
            Returns true if left <see cref="T:gemstone.numeric.units.ee.SignalReference" /> value is greater than or equal to right <see cref="T:gemstone.numeric.units.ee.SignalReference" /> value.
            </summary>
      <param name="signal1">A <see cref="T:gemstone.numeric.units.ee.SignalReference" /> left hand operand.</param>
      <param name="signal2">A <see cref="T:gemstone.numeric.units.ee.SignalReference" /> right hand operand.</param>
      <returns>A boolean representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.ee.SignalReference.op_Inequality(gemstone.numeric.units.ee.SignalReference,gemstone.numeric.units.ee.SignalReference)">
      <summary>
            Compares two <see cref="T:gemstone.numeric.units.ee.SignalReference" /> values for inequality.
            </summary>
      <param name="signal1">A <see cref="T:gemstone.numeric.units.ee.SignalReference" /> left hand operand.</param>
      <param name="signal2">A <see cref="T:gemstone.numeric.units.ee.SignalReference" /> right hand operand.</param>
      <returns>A boolean representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.ee.SignalReference.op_LessThan(gemstone.numeric.units.ee.SignalReference,gemstone.numeric.units.ee.SignalReference)">
      <summary>
            Returns true if left <see cref="T:gemstone.numeric.units.ee.SignalReference" /> value is less than right <see cref="T:gemstone.numeric.units.ee.SignalReference" /> value.
            </summary>
      <param name="signal1">A <see cref="T:gemstone.numeric.units.ee.SignalReference" /> left hand operand.</param>
      <param name="signal2">A <see cref="T:gemstone.numeric.units.ee.SignalReference" /> right hand operand.</param>
      <returns>A boolean representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.ee.SignalReference.op_LessThanOrEqual(gemstone.numeric.units.ee.SignalReference,gemstone.numeric.units.ee.SignalReference)">
      <summary>
            Returns true if left <see cref="T:gemstone.numeric.units.ee.SignalReference" /> value is less than or equal to right <see cref="T:gemstone.numeric.units.ee.SignalReference" /> value.
            </summary>
      <param name="signal1">A <see cref="T:gemstone.numeric.units.ee.SignalReference" /> left hand operand.</param>
      <param name="signal2">A <see cref="T:gemstone.numeric.units.ee.SignalReference" /> right hand operand.</param>
      <returns>A boolean representing the result.</returns>
    </member>
    <member name="M:gemstone.numeric.units.ee.SignalReference.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:gemstone.numeric.units.ee.SignalReference" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:gemstone.numeric.units.ee.SignalReference" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.ee.SignalReference.ToString(System.String,gemstone.numeric.units.ee.SignalKind)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the specified <paramref name="acronym" /> and <see cref="T:gemstone.numeric.units.ee.SignalKind" />.
            </summary>
      <param name="acronym">Acronym portion of the desired <see cref="T:System.String" /> representation.</param>
      <param name="type">
        <see cref="T:gemstone.numeric.units.ee.SignalKind" /> portion of the desired <see cref="T:System.String" /> representation.</param>
      <returns>A <see cref="T:System.String" /> that represents the specified <paramref name="acronym" /> and <see cref="T:gemstone.numeric.units.ee.SignalKind" />.</returns>
    </member>
    <member name="M:gemstone.numeric.units.ee.SignalReference.ToString(System.String,gemstone.numeric.units.ee.SignalKind,System.Int32)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the specified <paramref name="acronym" />, <see cref="T:gemstone.numeric.units.ee.SignalKind" /> and <paramref name="index" />.
            </summary>
      <param name="acronym">Acronym portion of the desired <see cref="T:System.String" /> representation.</param>
      <param name="type">
        <see cref="T:gemstone.numeric.units.ee.SignalKind" /> portion of the desired <see cref="T:System.String" /> representation.</param>
      <param name="index">Index of <see cref="T:gemstone.numeric.units.ee.SignalKind" /> portion of the desired <see cref="T:System.String" /> representation.</param>
      <returns>A <see cref="T:System.String" /> that represents the specified <paramref name="acronym" />, <see cref="T:gemstone.numeric.units.ee.SignalKind" /> and <paramref name="index" />.</returns>
    </member>
    <member name="T:gemstone.numeric.units.ee.SignalType">
      <summary>
            Fundamental signal type enumeration for common EE measurements that represents an explicit type of signal.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalType.IPHM">
      <summary>
            Current phase magnitude.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalType.IPHA">
      <summary>
            Current phase angle.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalType.VPHM">
      <summary>
            Voltage phase magnitude.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalType.VPHA">
      <summary>
            Voltage phase angle.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalType.FREQ">
      <summary>
            Frequency.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalType.DFDT">
      <summary>
            Frequency delta (dF/dt).
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalType.ALOG">
      <summary>
            Analog value.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalType.FLAG">
      <summary>
            Status flags.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalType.DIGI">
      <summary>
            Digital values.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalType.CALC">
      <summary>
            Calculated value.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalType.STAT">
      <summary>
            Statistical value.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalType.ALRM">
      <summary>
            Alarm value.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalType.QUAL">
      <summary>
            Quality flags.
            </summary>
    </member>
    <member name="F:gemstone.numeric.units.ee.SignalType.NONE">
      <summary>
            Undefined signal.
            </summary>
    </member>
    <member name="T:gemstone.numeric.units.ee.SignalTypeExtensions">
      <summary>
            Defines extension functions for the <see cref="T:gemstone.numeric.units.ee.SignalType" /> enumeration.
            </summary>
    </member>
    <member name="M:gemstone.numeric.units.ee.SignalTypeExtensions.GetFormattedName(gemstone.numeric.units.ee.SignalType)">
      <summary>
            Returns display friendly signal type name.
            </summary>
      <param name="signalType">
        <see cref="T:gemstone.numeric.units.ee.SignalType" /> to return display name for.</param>
      <returns>Friendly protocol display name for specified <paramref name="signalType" />.</returns>
    </member>
  </members>
</doc>